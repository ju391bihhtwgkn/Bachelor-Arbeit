Python (programming language) - Wikipedia
Jump to content
Main menu
Main menu
move to sidebar
hide
Navigation
Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us
Contribute

Contribute
HelpLearn to editCommunity portalRecent changesUpload file
Search
Search
Donate
Appearance
Create account
Log in
Personal tools
Create account Log in
Pages for logged out editors learn more
ContributionsTalk
Contents
move to sidebar
hide

ContributionsTalk
Contents
move to sidebar
hide
(Top)
1
History
2
Design philosophy and features
3
Syntax and semantics
Toggle Syntax and semantics subsection
3.1
Indentation
3.2
Statements and control flow
3.3
Expressions
3.4
Methods
3.5
Typing
3.6

3.3
Expressions
3.4
Methods
3.5
Typing
3.6
Arithmetic operations
4
Programming examples
5
Libraries
6
Development environments
7
Implementations
Toggle Implementations subsection
7.1
Reference implementation
7.2
Other implementations
7.3

7.2
Other implementations
7.3
No longer supported implementations
7.4
Cross-compilers to other languages
7.5
Performance
8
Development
9
API documentation generators
10
Naming
11
Popularity
12
Uses
13
Languages influenced by Python
14
See also
15

13
Languages influenced by Python
14
See also
15
References
Toggle References subsection
15.1
Sources
16
Further reading
17
External links
Toggle the table of contents
Python (programming language)
111 languages

AfrikaansAlemannischالعربيةAragonésঅসমীয়াAsturianuAzərbaycancaتۆرکجهBasa Baliবাংলা閩南語 / Bân-lâm-gúБеларускаяБеларуская

Baliবাংলা閩南語 / Bân-lâm-gúБеларускаяБеларуская (тарашкевіца)भोजपुरीБългарскиBosanskiBrezhonegCatalàCebuanoČeštinaCymraegDanskDeutschEestiΕλληνικάEspañolEsperantoEuskaraفارسیFrançaisGalegoગુજરાતી한국어HausaՀայերենहिन्दीHrvatskiIdoBahasa

IndonesiaInterlinguaÍslenskaItalianoעבריתქართულიҚазақшаKiswahiliKurdîКыргызчаLatinaLatviešuLietuviųLa .lojban.LombardMagyarМакедонскиമലയാളംमराठीBahasa MelayuМонголမြန်မာဘာသာNa Vosa VakavitiNederlandsनेपाली日本語ߒߞߏNorsk bokmålNorsk

VakavitiNederlandsनेपाली日本語ߒߞߏNorsk bokmålNorsk nynorskଓଡ଼ିଆOʻzbekcha / ўзбекчаਪੰਜਾਬੀپنجابیភាសាខ្មែរPlattdüütschPolskiPortuguêsQaraqalpaqshaRomânăRuna SimiРусскийСаха тылаᱥᱟᱱᱛᱟᱲᱤScotsShqipසිංහලSimple EnglishSlovenčinaSlovenščinaکوردیСрпски /

EnglishSlovenčinaSlovenščinaکوردیСрпски / srpskiSrpskohrvatski / српскохрватскиSuomiSvenskaTagalogதமிழ்Татарча / tatarçaၽႃႇသႃႇတႆး తెలుగుไทยТоҷикӣTürkçeBasa UgiУкраїнськаاردوئۇيغۇرچە / UyghurcheTiếng ViệtWalon文言Winaray吴语粵語中文

Edit links
ArticleTalk
English
ReadEditView history
Tools
Tools
move to sidebar
hide
Actions
ReadEditView history
General

hide
Actions
ReadEditView history
General
What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata item
Print/export
Download as PDFPrintable version

Print/export
Download as PDFPrintable version
In other projects
Wikimedia CommonsMediaWikiWikibooksWikifunctionsWikiquoteWikiversity
Appearance
move to sidebar
hide
From Wikipedia, the free encyclopedia
General-purpose programming language

PythonParadigmMulti-paradigm: object-oriented,[1] procedural (imperative), functional, structured, reflectiveDesigned byGuido van RossumDeveloperPython Software FoundationFirst appeared20 February 1991; 33 years ago (1991-02-20)[2]Stable

1991; 33 years ago (1991-02-20)[2]Stable release3.13.0

/ 7 October 2024; 5 days ago (7 October 2024)
Typing disciplineduck, dynamic, strong;[3] optional type annotations (since 3.5, but those hints are ignored, except with unofficial tools)[4]OS
Tier 1: 64-bit Linux, macOS; 64- and 32-bit Windows 10+[5]

Tier 2: E.g. 32-bit WebAssembly (WASI)
Tier 3: 64-bit Android 5.0+,[6] iOS, FreeBSD, and (32-bit) Raspberry Pi OSUnofficial (or has been known to work): Other Unix-like/BSD variants) and a few other platforms[7][8][9]

LicensePython Software Foundation LicenseFilename extensions.py, .pyw, .pyz,[10]

.pyi, .pyc, .pydWebsitepython.orgMajor implementationsCPython, PyPy, Stackless Python, MicroPython, CircuitPython, IronPython, JythonDialectsCython, RPython, Starlark[11]Influenced byABC,[12] Ada,[13] ALGOL 68,[14] APL,[15] C,[16] C++,[17] CLU,[18]

ALGOL 68,[14] APL,[15] C,[16] C++,[17] CLU,[18] Dylan,[19] Haskell,[20][15] Icon,[21] Lisp,[22] Modula-3,[14][17] Perl,[23] Standard ML[15]InfluencedApache Groovy, Boo, Cobra, CoffeeScript,[24] D, F#, GDScript, Go, JavaScript,[25][26] Julia,[27]

F#, GDScript, Go, JavaScript,[25][26] Julia,[27] Mojo,[28] Nim, Ring,[29] Ruby,[30] Swift[31]

Python Programming at Wikibooks
Python is a high-level, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation.[32]

Python is dynamically typed and garbage-collected. It supports multiple programming paradigms, including structured (particularly procedural), object-oriented and functional programming. It is often described as a "batteries included" language due

described as a "batteries included" language due to its comprehensive standard library.[33][34]

Guido van Rossum began working on Python in the late 1980s as a successor to the ABC programming language and first released it in 1991 as Python 0.9.0.[35] Python 2.0 was released in 2000. Python 3.0, released in 2008, was a major revision not

released in 2008, was a major revision not completely backward-compatible with earlier versions. Python 2.7.18, released in 2020, was the last release of Python 2.[36]

Python consistently ranks as one of the most popular programming languages, and has gained widespread use in the machine learning community.[37][38][39][40]
History[edit]
Main article: History of Python

History[edit]
Main article: History of Python
The designer of Python, Guido van Rossum, at OSCON 2006

Python was invented in the late 1980s[41] by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC programming language, which was inspired by SETL,[42] capable of exception handling and interfacing

capable of exception handling and interfacing with the Amoeba operating system.[12] Its implementation began in December 1989.[43] Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he

the lead developer, until 12 July 2018, when he announced his "permanent vacation" from his responsibilities as Python's "benevolent dictator for life" (BDFL), a title the Python community bestowed upon him to reflect his long-term commitment as the

him to reflect his long-term commitment as the project's chief decision-maker[44] (he has since come out of retirement and is self-titled "BDFL-emeritus"). In January 2019, active Python core developers elected a five-member Steering Council to lead

elected a five-member Steering Council to lead the project.[45][46]

Python 2.0 was released on 16 October 2000, with many major new features such as list comprehensions, cycle-detecting garbage collection, reference counting, and Unicode support.[47] Python 3.0 was released on 3 December 2008, with many of its major

on 3 December 2008, with many of its major features backported to Python 2.6.x[48] and 2.7.x. Releases of Python 3 include the 2to3 utility, which automates the translation of Python 2 code to Python 3.[49]

Python 2.7's end-of-life was initially set for 2015, then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3.[50][51] No further security patches or other improvements will be released

patches or other improvements will be released for it.[52][53] Currently only 3.9 and later are supported (2023 security issues were fixed in e.g. 3.7.17, the final 3.7.x release[54]). While Python 2.7 and older is officially unsupported, a

Python 2.7 and older is officially unsupported, a different unofficial Python implementation, PyPy, continues to support Python 2, i.e. "2.7.18+" (plus 3.10), with the plus meaning (at least some) "backported security updates".[55]

In 2021 (and again twice in 2022, and in September 2024 for Python 3.12.6 down to 3.8.20), security updates were expedited, since all Python versions were insecure (including 2.7[56]) because of security issues leading to possible remote code

security issues leading to possible remote code execution[57] and web-cache poisoning.[58] In 2022, Python 3.10.4 and 3.9.12 were expedited[59] and 3.8.13, because of many security issues.[60] When Python 3.9.13 was released in May 2022, it was

Python 3.9.13 was released in May 2022, it was announced that the 3.9 series (joining the older series 3.8 and 3.7) would only receive security fixes in the future.[61] On 7 September 2022, four new releases were made due to a potential

four new releases were made due to a potential denial-of-service attack: 3.10.7, 3.9.14, 3.8.14, and 3.7.14.[62][63]

Every Python release since 3.5 has added some syntax to the language. 3.10 added the | union type operator[64] and the match and case keywords (for structural pattern matching statements). 3.11 expanded exception handling functionality. Python 3.12

exception handling functionality. Python 3.12 added the new keyword type. Notable changes in 3.11 from 3.10 include increased program execution speed and improved error reporting.[65] Python 3.11 claims to be between 10 and 60% faster than Python

to be between 10 and 60% faster than Python 3.10, and Python 3.12 adds another 5% on top of that. It also has improved error messages, and many other changes.

Python 3.13 introduces more syntax for types, a new and improved interactive interpreter (REPL), featuring multi-line editing and color support; an incremental garbage collector (producing shorter pauses for collection in programs with a lot of

pauses for collection in programs with a lot of objects, and addition to the improved speed in 3.11 and 3.12),  and an experimental just-in-time (JIT) compiler (such features, can/needs to be enabled specifically for the increase in speed),[66] and

specifically for the increase in speed),[66] and an experimental free-threaded build mode, which disables the global interpreter lock (GIL), allowing threads to run more concurrently, that latter feature enabled with python3.13t or python3.13t.exe.

Python 3.13 introduces some change in behavior, i.e. new "well-defined semantics", fixing bugs (plus many removals of deprecated classes, functions and methods, and removed some of the C API and outdated modules): "The  [old] implementation of

outdated modules): "The  [old] implementation of locals() and frame.f_locals is slow, inconsistent and buggy [and it has] has many corner cases and oddities. Code that works around those may need to be changed. Code that uses locals() for simple

to be changed. Code that uses locals() for simple templating, or print debugging, will continue to work correctly."[67]

Since 7 October 2024[update], Python 3.13 is the latest stable release, and 3.13 and 3.12 are the only versions with active (as opposed to just security) support and Python 3.9 is the oldest supported version of Python (albeit in the 'security

version of Python (albeit in the 'security support' phase), due to Python 3.8 reaching end-of-life.[68] Starting with 3.13, it and later versions have 2 years of full support (up from one and a half); followed by 3 years of security support (for

followed by 3 years of security support (for same total support as before).

Some (more) standard library modules and many deprecated classes, functions and methods, will be removed in Python 3.15 or 3.16.[69][70]
Design philosophy and features[edit]

Python is a multi-paradigm programming language. Object-oriented programming and structured programming are fully supported, and many of their features support functional programming and aspect-oriented programming (including metaprogramming[71] and

programming (including metaprogramming[71] and metaobjects).[72] Many other paradigms are supported via extensions, including design by contract[73][74] and logic programming.[75] Python is known as a glue language,[76] able to work very well with

a glue language,[76] able to work very well with many other languages with ease of access.

Python uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory management.[77] It uses dynamic name resolution (late binding), which binds method and variable names during program execution.

Its design offers some support for functional programming in the Lisp tradition. It has filter,mapandreduce functions; list comprehensions, dictionaries, sets, and generator expressions.[78] The standard library has two modules (itertools and

standard library has two modules (itertools and functools) that implement functional tools borrowed from Haskell and Standard ML.[79]

Its core philosophy is summarized in the Zen of Python (PEP 20), which includes aphorisms such as:[80]
Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.

Complex is better than complicated.
Readability counts.

However, Python features regularly violate these principles and have received criticism for adding unnecessary language bloat.[81] Responses to these criticisms are that the Zen of Python is a guideline rather than a rule.[82] The addition of some

rather than a rule.[82] The addition of some new features had been so controversial that Guido van Rossum resigned as Benevolent Dictator for Life following vitriol over the addition of the assignment expression operator in Python 3.8.[83][84]

Nevertheless, rather than building all of its functionality into its core, Python was designed to be highly extensible via modules. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing

of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with ABC, which espoused the opposite

with ABC, which espoused the opposite approach.[41]

Python claims to strive for a simpler, less-cluttered syntax and grammar while giving developers a choice in their coding methodology. In contrast to Perl's "there is more than one way to do it" motto, Python embraces a "there should be one—and

motto, Python embraces a "there should be one—and preferably only one—obvious way to do it." philosophy.[80] In practice, however, Python provides many ways to achieve the same task. There are, for example, at least three ways to format a string

example, at least three ways to format a string literal, with no certainty as to which one a programmer should use.[85] Alex Martelli, a Fellow at the Python Software Foundation and Python book author, wrote: "To describe something as 'clever' is

wrote: "To describe something as 'clever' is not considered a compliment in the Python culture."[86]

Python's developers usually strive to avoid premature optimization and reject patches to non-critical parts of the CPython reference implementation that would offer marginal increases in speed at the cost of clarity.[87] Execution speed can be

the cost of clarity.[87] Execution speed can be improved by moving speed-critical functions to extension modules written in languages such as C, or by using a just-in-time compiler like PyPy. It is also possible to cross-compile to other languages,

possible to cross-compile to other languages, but it either doesn't provide the full speed-up that might be expected, since Python is a very dynamic language, or a restricted subset of Python is compiled, and possibly semantics are slightly

is compiled, and possibly semantics are slightly changed.[88]

Python's developers aim for it to be fun to use. This is reflected in its name—a tribute to the British comedy group Monty Python[89]—and in occasionally playful approaches to tutorials and reference materials, such as the use of the terms "spam"

materials, such as the use of the terms "spam" and "eggs" (a reference to a Monty Python sketch) in examples, instead of the often-used "foo" and "bar".[90][91] A common neologism in the Python community is pythonic, which has a wide range of

community is pythonic, which has a wide range of meanings related to program style. "Pythonic" code may use Python idioms well, be natural or show fluency in the language, or conform with Python's minimalist philosophy and emphasis on readability.

philosophy and emphasis on readability. Code that is difficult to understand or reads like a rough transcription from another programming language is called unpythonic.[92]

Syntax and semantics[edit]
Main article: Python syntax and semantics
An example of Python code and indentation
Example of C# code with curly braces and semicolons

Python is meant to be an easily readable language. Its formatting is visually uncluttered and often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use curly brackets to delimit blocks, and

not use curly brackets to delimit blocks, and semicolons after statements are allowed but rarely used. It has fewer syntactic exceptions and special cases than C or Pascal.[93]

Indentation[edit]
Main article: Python syntax and semantics § Indentation

Python uses whitespace indentation, rather than curly brackets or keywords, to delimit blocks. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.[94] Thus, the program's

end of the current block.[94] Thus, the program's visual structure accurately represents its semantic structure.[95] This feature is sometimes termed the off-side rule. Some other languages use indentation this way; but in most, indentation has no

this way; but in most, indentation has no semantic meaning. The recommended indent size is four spaces.[96]

Statements and control flow[edit]
Python's statements include:
The assignment statement, using a single equals sign =
The if statement, which conditionally executes a block of code, along with else and elif (a contraction of else-if)

The for statement, which iterates over an iterable object, capturing each element to a local variable for use by the attached block
The while statement, which executes a block of code as long as its condition is true

The try statement, which allows exceptions raised in its attached code block to be caught and handled by except clauses (or new syntax except* in Python 3.11 for exception groups[97]); it also ensures that clean-up code in a finally block is always

that clean-up code in a finally block is always run regardless of how the block exits

The raise statement, used to raise a specified exception or re-raise a caught exception
The class statement, which executes a block of code and attaches its local namespace to a class, for use in object-oriented programming

The def statement, which defines a function or method

The with statement, which encloses a code block within a context manager (for example, acquiring a lock before it is run, then releasing the lock; or opening and closing a file), allowing resource-acquisition-is-initialization (RAII)-like behavior

(RAII)-like behavior and replacing a common try/finally idiom[98]

The break statement, which exits a loop
The continue statement, which skips the rest of the current iteration and continues with the next

The del statement, which removes a variable—deleting the reference from the name to the value, and producing an error if the variable is referred to before it is redefined

The pass statement, serving as a NOP, syntactically needed to create an empty code block
The assert statement, used in debugging to check for conditions that should apply

The yield statement, which returns a value from a generator function (and also an operator); used to implement coroutines
The return statement, used to return a value from a function

The import and from statements, used to import modules whose functions or variables can be used in the current program

The match and case statements, an analog of the switch statement construct, that compares an expression against one or more cases as a control-of-flow measure.

The assignment statement (=) binds a name as a reference to a separate, dynamically allocated object. Variables may subsequently be rebound at any time to any object. In Python, a variable name is a generic reference holder without a fixed data

a generic reference holder without a fixed data type; however, it always refers to some object with a type. This is called dynamic typing—in contrast to statically-typed languages, where each variable may contain only a value of a certain type.

Python does not support tail call optimization or first-class continuations, and, according to Van Rossum, it never will.[99][100] However, better support for coroutine-like functionality is provided by extending Python's generators.[101] Before

by extending Python's generators.[101] Before 2.5, generators were lazy iterators; data was passed unidirectionally out of the generator. From Python 2.5 on, it is possible to pass data back into a generator function; and from version 3.3, it can be

function; and from version 3.3, it can be passed through multiple stack levels.[102]

Expressions[edit]
Python's expressions include:

The +, -, and * operators for mathematical addition, subtraction, and multiplication are similar to other languages, but the behavior of division differs. There are two types of divisions in Python: floor division (or integer division) // and

floor division (or integer division) // and floating-point/division.[103] Python uses the ** operator for exponentiation.

Python uses the + operator for string concatenation. Python uses the * operator for duplicating a string a specified number of times.
The @ infix operator. It is intended to be used by libraries such as NumPy for matrix multiplication.[104][105]

The syntax :=, called the "walrus operator", was introduced in Python 3.8. It assigns values to variables as part of a larger expression.[106]

In Python, == compares by value. Python's is operator may be used to compare object identities (comparison by reference), and comparisons may be chained—for example, a <= b <= c.
Python uses and, or, and not as Boolean operators.

Python has a type of expression named a list comprehension, and a more general expression named a generator expression.[78]
Anonymous functions are implemented using lambda expressions; however, there may be only one expression in each body.

Conditional expressions are written as x if c else y[107] (different in order of operands from the c ? x : y operator common to many other languages).

Python makes a distinction between lists and tuples. Lists are written as [1, 2, 3], are mutable, and cannot be used as the keys of dictionaries (dictionary keys must be immutable in Python). Tuples, written as (1, 2, 3), are immutable and thus can

written as (1, 2, 3), are immutable and thus can be used as keys of dictionaries, provided all of the tuple's elements are immutable. The + operator can be used to concatenate two tuples, which does not directly modify their contents, but produces a

directly modify their contents, but produces a new tuple containing the elements of both. Thus, given the variable t initially equal to (1, 2, 3), executing t = t + (4, 5) first evaluates t + (4, 5), which yields (1, 2, 3, 4, 5), which is then

5), which yields (1, 2, 3, 4, 5), which is then assigned back to t—thereby effectively "modifying the contents" of t while conforming to the immutable nature of tuple objects. Parentheses are optional for tuples in unambiguous contexts.[108]

Python features sequence unpacking where multiple expressions, each evaluating to anything that can be assigned (to a variable, writable property, etc.) are associated in an identical manner to that forming tuple literals—and, as a whole, are put on

tuple literals—and, as a whole, are put on the left-hand side of the equal sign in an assignment statement. The statement expects an iterable object on the right-hand side of the equal sign that produces the same number of values as the provided

the same number of values as the provided writable expressions; when iterated through them, it assigns each of the produced values to the corresponding expression on the left.[109]

Python has a "string format" operator % that functions analogously to printf format strings in C—e.g. "spam=%s eggs=%d" % ("blah", 2) evaluates to "spam=blah eggs=2". In Python 2.6+ and 3+, this was supplemented by the format() method of the str

supplemented by the format() method of the str class, e.g. "spam={0} eggs={1}".format("blah", 2). Python 3.6 added "f-strings": spam = "blah"; eggs = 2; f'spam={spam} eggs={eggs}'.[110]

Strings in Python can be concatenated by "adding" them (with the same operator as for adding integers and floats), e.g. "spam" + "eggs" returns "spameggs". If strings contain numbers, they are added as strings rather than integers, e.g. "2" + "2"

as strings rather than integers, e.g. "2" + "2" returns "22".

Python has various string literals:

Delimited by single or double quotes; unlike in Unix shells, Perl, and Perl-influenced languages, single and double quotes work the same. Both use the backslash (\) as an escape character. String interpolation became available in Python 3.6 as

interpolation became available in Python 3.6 as "formatted string literals".[110]

Triple-quoted (beginning and ending with three single or double quotes), which may span multiple lines and function like here documents in shells, Perl, and Ruby.

Raw string varieties, denoted by prefixing the string literal with r. Escape sequences are not interpreted; hence raw strings are useful where literal backslashes are common, such as regular expressions and Windows-style paths. (Compare "@-quoting"

and Windows-style paths. (Compare "@-quoting" in C#.)

Python has array index and array slicing expressions in lists, denoted as a[key], a[start:stop] or a[start:stop:step]. Indexes are zero-based, and negative indexes are relative to the end. Slices take elements from the start index up to, but not

take elements from the start index up to, but not including, the stop index. The third slice parameter, called step or stride, allows elements to be skipped and reversed. Slice indexes may be omitted—for example, a[:] returns a copy of the entire

example, a[:] returns a copy of the entire list. Each element of a slice is a shallow copy.

In Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as Common Lisp, Scheme, or Ruby. This leads to duplicating some functionality. For example:
List comprehensions vs. for-loops

List comprehensions vs. for-loops
Conditional expressions vs. if blocks
The eval() vs. exec() built-in functions (in Python 2, exec is a statement); the former is for expressions, the latter is for statements

Statements cannot be a part of an expression—so list and other comprehensions or lambda expressions, all being expressions, cannot contain statements. A particular case is that an assignment statement such as a = 1 cannot form part of the

statement such as a = 1 cannot form part of the conditional expression of a conditional statement.

Methods[edit]

Methods on objects are functions attached to the object's class; the syntax instance.method(argument) is, for normal methods and functions, syntactic sugar for Class.method(instance, argument). Python methods have an explicit self parameter to

Python methods have an explicit self parameter to access instance data, in contrast to the implicit self (or this) in some other object-oriented programming languages (e.g., C++, Java, Objective-C, Ruby).[111] Python also provides methods, often

Ruby).[111] Python also provides methods, often called dunder methods (due to their names beginning and ending with double-underscores), to allow user-defined classes to modify how they are handled by native operations including length, comparison,

native operations including length, comparison, in arithmetic operations and type conversion.[112]

Typing[edit]
The standard type hierarchy in Python 3

Python uses duck typing and has typed objects but untyped variable names. Type constraints are not checked at compile time; rather, operations on an object may fail, signifying that it is not of a suitable type. Despite being dynamically typed,

a suitable type. Despite being dynamically typed, Python is strongly typed, forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them.

Python allows programmers to define their own types using classes, most often used for object-oriented programming. New instances of classes are constructed by calling the class (for example, SpamClass() or EggsClass()), and the classes are

SpamClass() or EggsClass()), and the classes are instances of the metaclass type (itself an instance of itself), allowing metaprogramming and reflection.

Before version 3.0, Python had two kinds of classes (both using the same syntax):  old-style and new-style;[113] current Python versions only support the semantics of the new style.

Python supports optional type annotations.[4][114] These annotations are not enforced by the language, but may be used by external tools such as mypy to catch errors.[115][116] Mypy also supports a Python compiler called mypyc, which leverages type

compiler called mypyc, which leverages type annotations for optimization.[117]

Summary of Python 3's built-in types
Type
Mutability
Description
Syntax examples
bool
immutable
Boolean value
TrueFalse
bytearray
mutable
Sequence of bytes
bytearray(b'Some ASCII')bytearray(b"Some ASCII")bytearray([119, 105, 107, 105])
bytes

bytes
immutable
Sequence of bytes
b'Some ASCII'b"Some ASCII"bytes([119, 105, 107, 105])
complex
immutable
Complex number with real and imaginary parts
3+2.7j3 + 2.7j
dict
mutable

3+2.7j3 + 2.7j
dict
mutable
Associative array (or dictionary) of key and value pairs; can contain mixed types (keys and values), keys must be a hashable type
{'key1': 1.0, 3: False}{}
types.EllipsisType
immutable

types.EllipsisType
immutable
An ellipsis placeholder to be used as an index in NumPy arrays
...Ellipsis
float
immutable

...Ellipsis
float
immutable
Double-precision floating-point number. The precision is machine-dependent but in practice is generally implemented as a 64-bit IEEE 754 number with 53 bits of precision.[118]
1.33333
frozenset
immutable

1.33333
frozenset
immutable
Unordered set, contains no duplicates; can contain mixed types, if hashable
frozenset([4.0, 'string', True])
int
immutable
Integer of unlimited magnitude[119]
42
list
mutable
List, can contain mixed types

42
list
mutable
List, can contain mixed types
[4.0, 'string', True][]
types.NoneType
immutable
An object representing the absence of a value, often called null in other languages
None
types.NotImplementedType
immutable

None
types.NotImplementedType
immutable
A placeholder that can be returned from overloaded operators to indicate unsupported operand types.
NotImplemented
range
immutable

NotImplemented
range
immutable
An immutable sequence of numbers commonly used for looping a specific number of times in for loops[120]
range(−1, 10)range(10, −5, −2)
set
mutable

range(−1, 10)range(10, −5, −2)
set
mutable
Unordered set, contains no duplicates; can contain mixed types, if hashable
{4.0, 'string', True}set()
str
immutable
A character string: sequence of Unicode codepoints
'Wikipedia'"Wikipedia""""Spanning

'Wikipedia'"Wikipedia""""Spanning
multiple
lines"""
Spanning
multiple
lines
tuple
immutable
Can contain mixed types
(4.0, 'string', True)('single element',)()
Arithmetic operations[edit]

Python has the usual symbols for arithmetic operators (+, -, *, /), the floor division operator // and the modulo operation % (where the remainder can be negative, e.g. 4 % -3 == -2). It also has ** for exponentiation, e.g. 5**3 == 125 and 9**0.5 ==

exponentiation, e.g. 5**3 == 125 and 9**0.5 == 3.0, and a matrix‑multiplication operator @ .[121] These operators work like in traditional math; with the same precedence rules, the operators infix (+ and - can also be unary to represent positive and

and - can also be unary to represent positive and negative numbers respectively).

The division between integers produces floating-point results. The behavior of division has changed significantly over time:[122]
Current Python (i.e. since 3.0) changed / to always be floating-point division, e.g. 5/2 == 2.5.

The floor division // operator was introduced. So 7//3 == 2, -7//3 == -3, 7.5//3 == 2.0 and -7.5//3 == -3.0. Adding from __future__ import division causes a module used in Python 2.7 to use Python 3.0 rules for division (see above).

In Python terms, / is true division (or simply division), and // is floor division. / before version 3.0 is classic division.[122]

Rounding towards negative infinity, though different from most languages, adds consistency. For instance, it means that the equation (a + b)//b == a//b + 1 is always true. It also means that the equation b*(a//b) + a%b == a is valid for both

equation b*(a//b) + a%b == a is valid for both positive and negative values of a. However, maintaining the validity of this equation means that while the result of a%b is, as expected, in the half-open interval [0, b), where b is a positive integer,

interval [0, b), where b is a positive integer, it has to lie in the interval (b, 0] when b is negative.[123]

Python provides a round function for rounding a float to the nearest integer. For tie-breaking, Python 3 uses round to even: round(1.5) and round(2.5) both produce 2.[124] Versions before 3 used round-away-from-zero: round(0.5) is 1.0, round(-0.5)

round(0.5) is 1.0, round(-0.5) is −1.0.[125]

Python allows Boolean expressions with multiple equality relations in a manner that is consistent with general use in mathematics. For example, the expression a < b < c tests whether a is less than b and b is less than c.[126] C-derived languages

b and b is less than c.[126] C-derived languages interpret this expression differently: in C, the expression would first evaluate a < b, resulting in 0 or 1, and that result would then be compared with c.[127]

Python uses arbitrary-precision arithmetic for all integer operations. The Decimal type/class in the decimal module provides decimal floating-point numbers to a pre-defined arbitrary precision and several rounding modes.[128] The Fraction class in

rounding modes.[128] The Fraction class in the fractions module provides arbitrary precision for rational numbers.[129]

Due to Python's extensive mathematics library, and the third-party library NumPy that further extends the native capabilities, it is frequently used as a scientific scripting language to aid in problems such as numerical data processing and

in problems such as numerical data processing and manipulation.[130][131]

Programming examples[edit]
"Hello, World!" program:
print('Hello, world!')
Program to calculate the factorial of a positive integer:
n = int(input('Type a number, and its factorial will be printed: '))
if n < 0:

if n < 0:
raise ValueError('You must enter a non-negative integer')
factorial = 1
for i in range(2, n + 1):
factorial *= i
print(factorial)
Libraries[edit]

Python's large standard library[132] provides tools suited to many tasks and is commonly cited as one of its greatest strengths. For Internet-facing applications, many standard formats and protocols such as MIME and HTTP are supported. It includes

such as MIME and HTTP are supported. It includes modules for creating graphical user interfaces, connecting to relational databases, generating pseudorandom numbers, arithmetic with arbitrary-precision decimals,[128] manipulating regular

decimals,[128] manipulating regular expressions, and unit testing.

Some parts of the standard library are covered by specifications—for example, the Web Server Gateway Interface (WSGI) implementation wsgiref follows PEP 333[133]—but most are specified by their code, internal documentation, and test suites. However,

internal documentation, and test suites. However, because most of the standard library is cross-platform Python code, only a few modules need altering or rewriting for variant implementations.

As of 17 March 2024,[update] the Python Package Index (PyPI), the official repository for third-party Python software, contains over 523,000[134] packages with a wide range of functionality, including:
Automation
Data analytics
Databases

Automation
Data analytics
Databases
Documentation
Graphical user interfaces
Image processing
Machine learning
Mobile apps
Multimedia
Computer networking
Scientific computing
System administration
Test frameworks
Text processing
Web frameworks

Test frameworks
Text processing
Web frameworks
Web scraping
Development environments[edit]
See also: Comparison of integrated development environments § Python

Most Python implementations (including CPython) include a read–eval–print loop (REPL), permitting them to function as a command line interpreter for which users enter statements sequentially and receive results immediately.

Python also comes with an Integrated development environment (IDE) called IDLE, which is more beginner-oriented.

Other shells, including IDLE and IPython, add further abilities such as improved auto-completion, session state retention, and syntax highlighting.

As well as standard desktop integrated development environments including PyCharm, IntelliJ Idea, Visual Studio Code etc, there are web browser-based IDEs, including SageMath, for developing science- and math-related programs; PythonAnywhere, a

and math-related programs; PythonAnywhere, a browser-based IDE and hosting environment; and Canopy IDE, a commercial IDE emphasizing scientific computing.[135]

Implementations[edit]
See also: List of Python software § Python implementations
Reference implementation[edit]

CPython is the reference implementation of Python. It is written in C, meeting the C89 standard (Python 3.11 uses C11[136]) with several select C99 features. CPython includes its own C extensions, but third-party extensions are not limited to older

third-party extensions are not limited to older C versions—e.g. they can be implemented with C11 or C++.[137][138] CPython compiles Python programs into an intermediate bytecode[139] which is then executed by its virtual machine.[140] CPython is

executed by its virtual machine.[140] CPython is distributed with a large standard library written in a mixture of C and native Python, and is available for many platforms, including Windows (starting with Python 3.9, the Python installer

(starting with Python 3.9, the Python installer deliberately fails to install on Windows 7 and 8;[141][142] Windows XP was supported until Python 3.5) and most modern Unix-like systems, including macOS (and Apple M1 Macs, since Python 3.9.1, with

(and Apple M1 Macs, since Python 3.9.1, with experimental installer), with unofficial support for VMS.[143] Platform portability was one of its earliest priorities.[144] (During Python 1 and 2 development, even OS/2 and Solaris were supported,[145]

even OS/2 and Solaris were supported,[145] but support has since been dropped for many platforms.)

All current Python versions (i.e. since 3.7) only support operating systems with multi-threading support.
Other implementations[edit]

All alternative implementations have at least slightly different semantics (e.g. may have unordered dictionaries, unlike all current Python versions), e.g. with the larger Python ecosystem, such as with supporting the C Python API of with PyPy:

PyPy is a fast, compliant interpreter of Python 2.7 and  3.10.[146][147] Its just-in-time compiler often brings a significant speed improvement over CPython, but some libraries written in C cannot be used with it.[148] It has e.g. RISC-V support.

Codon is a language with an ahead-of-time (AOT) compiler, that (AOT) compiles a statically-typed Python-like language with "syntax and semantics are nearly identical to Python's, there are some notable differences"[149] e.g. it uses 64-bit machine

differences"[149] e.g. it uses 64-bit machine integers, for speed, not arbitrary like Python, and it claims speedups over CPython are usually on the order of 10–100x. It compiles to machine code (via LLVM) and supports native multithreading.[150]

LLVM) and supports native multithreading.[150]  Codon can also compile to Python extension modules that can be imported and used from Python.

Stackless Python is a significant fork of CPython that implements microthreads; it does not use the call stack in the same way, thus allowing massively concurrent programs. PyPy also has a stackless version.[151]

MicroPython and CircuitPython are Python 3 variants optimized for microcontrollers, including Lego Mindstorms EV3.[152]
Pyston is a variant of the Python runtime that uses just-in-time compilation to speed up the execution of Python programs.[153]

Cinder is a performance-oriented fork of CPython 3.8 that contains a number of optimizations, including bytecode inline caching, eager evaluation of coroutines, a method-at-a-time JIT, and an experimental bytecode compiler.[154]

Snek[155][156][157] Embedded Computing Language (compatible with e.g. 8-bit AVR microcontrollers such as ATmega 328P-based Arduino, as well as larger ones compatible with MicroPython) "is Python-inspired, but it is not Python. It is possible to

but it is not Python. It is possible to write Snek programs that run under a full Python system, but most Python programs will not run under Snek."[158] It is an imperative language not including OOP / classes, unlike Python, and simplifying to one

/ classes, unlike Python, and simplifying to one number type with 32-bit single-precision (similar to JavaScript, except smaller).

No longer supported implementations[edit]
Other just-in-time Python compilers have been developed, but are now unsupported:

Google began a project named Unladen Swallow in 2009, with the aim of speeding up the Python interpreter five-fold by using the LLVM, and of improving its multithreading ability to scale to thousands of cores,[159] while ordinary implementations

of cores,[159] while ordinary implementations suffer from the global interpreter lock.

Psyco is a discontinued just-in-time specializing compiler that integrates with CPython and transforms bytecode to machine code at runtime. The emitted code is specialized for certain data types and is faster than the standard Python code. Psyco

is faster than the standard Python code. Psyco does not support Python 2.7 or later.

PyS60 was a Python 2 interpreter for Series 60 mobile phones released by Nokia in 2005. It implemented many of the modules from the standard library and some additional modules for integrating with the Symbian operating system. The Nokia N900 also

the Symbian operating system. The Nokia N900 also supports Python with GTK widget libraries, enabling programs to be written and run on the target device.[160]

Cross-compilers to other languages[edit]
There are several compilers/transpilers to high-level object languages, with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language:

Brython,[161] Transcrypt[162][163] and Pyjs (latest release in 2012) compile Python to JavaScript.
Cython compiles (a superset of) Python to C. The resulting code is also usable with Python via direct C-level API calls into the Python interpreter.

PyJL compiles/transpiles a subset of Python to "human-readable, maintainable, and high-performance Julia source code".[88] Despite claiming high performance, no tool can claim to do that for arbitrary Python code; i.e. it's known not possible to

Python code; i.e. it's known not possible to compile to a faster language or machine code. Unless semantics of Python are changed, but in many cases speedup is possible with few or no changes in the Python code. The faster Julia source code can then

code. The faster Julia source code can then be used from Python, or compiled to machine code, and based that way.

Nuitka compiles Python into C.[164] It works with Python 3.4 to 3.12 (and 2.6 and 2.7), for Python's main supported platforms (and Windows 7 or even Windows XP) and for Android. It claims complete support for Python 3.10,  some support for 3.11 and

for Python 3.10,  some support for 3.11 and 3.12  and experimental support for Python 3.13. It supports macOS including Apple Silicon-based.  It's a free compiler, though it also has commercial add-ons (e.g. for hiding source code).

Numba is used from Python, as a tool (enabled by adding a decorator to relevant Python code), a JIT compiler that translates a subset of Python and NumPy code into fast machine code.
Pythran compiles a subset of Python 3 to C++ (C++11).[165]

RPython can be compiled to C, and is used to build the PyPy interpreter of Python.
The Python → 11l → C++ transpiler[166] compiles a subset of Python 3 to C++ (C++17).
Specialized:

Specialized:
MyHDL is a Python-based hardware description language (HDL), that converts MyHDL code to Verilog or VHDL code.
Older projects (or not to be used with Python 3.x and latest syntax):

Google's Grumpy (latest release in 2017) transpiles Python 2 to Go.[167][168][169]

IronPython allows running Python 2.7 programs (and an alpha, released in 2021, is also available for "Python 3.4, although features and behaviors from later versions may be included"[170]) on the .NET Common Language Runtime.[171]

Jython compiles Python 2.7 to Java bytecode, allowing the use of the Java libraries from a Python program.[172]
Pyrex (latest release in 2010) and Shed Skin (latest release in 2013) compile to C and C++ respectively.
Performance[edit]

Performance comparison of various Python implementations on a non-numerical (combinatorial) workload was presented at EuroSciPy '13.[173] Python's performance compared to other programming languages is also benchmarked by The Computer Language

is also benchmarked by The Computer Language Benchmarks Game.[174]

Development[edit]

Python's development is conducted largely through the Python Enhancement Proposal (PEP) process, the primary mechanism for proposing major new features, collecting community input on issues, and documenting Python design decisions.[175] Python

documenting Python design decisions.[175] Python coding style is covered in PEP 8.[176] Outstanding PEPs are reviewed and commented on by the Python community and the steering council.[175]

Enhancement of the language corresponds with the development of the CPython reference implementation. The mailing list python-dev is the primary forum for the language's development. Specific issues were originally discussed in the Roundup bug

were originally discussed in the Roundup bug tracker hosted at by the foundation.[177] In 2022, all issues and discussions were migrated to GitHub.[178] Development originally took place on a self-hosted source-code repository running Mercurial,

source-code repository running Mercurial, until Python moved to GitHub in January 2017.[179]

CPython's public releases come in three types, distinguished by which part of the version number is incremented:

Backward-incompatible versions, where code is expected to break and needs to be manually ported. The first part of the version number is incremented. These releases happen infrequently—version 3.0 was released 8 years after 2.0. According to Guido

released 8 years after 2.0. According to Guido van Rossum, a version 4.0 is very unlikely to ever happen.[180]

Major or "feature" releases are largely compatible with the previous version but introduce new features. The second part of the version number is incremented. Starting with Python 3.9, these releases are expected to happen annually.[181][182] Each

are expected to happen annually.[181][182] Each major version is supported by bug fixes for several years after its release.[183]

Bugfix releases,[184] which introduce no new features, occur about every 3 months and are made when a sufficient number of bugs have been fixed upstream since the last release. Security vulnerabilities are also patched in these releases. The third

are also patched in these releases. The third and final part of the version number is incremented.[184]

Many alpha, beta, and release-candidates are also released as previews and for testing before final releases. Although there is a rough schedule for each release, they are often delayed if the code is not ready. Python's development team monitors

is not ready. Python's development team monitors the state of the code by running the large unit test suite during development.[185]

The major academic conference on Python is PyCon. There are also special Python mentoring programs, such as PyLadies.

Python 3.12 removed wstr meaning Python extensions[186] need to be modified,[187] and 3.10 added pattern matching to the language.[188]

Python 3.12 dropped some outdated modules, and more will be dropped in the future, deprecated as of 3.13; already deprecated array 'u' format code will emit DeprecationWarning since 3.13 and will be removed in Python 3.16. The 'w' format code should

in Python 3.16. The 'w' format code should be used instead. Part of ctypes is also deprecated and http.server.CGIHTTPRequestHandler will emit a DeprecationWarning, and will be removed in 3.15. Using that code already has a high potential for both

that code already has a high potential for both security and functionality bugs. Parts of the typing module are deprecated, e.g. creating a typing.NamedTuple class using keyword arguments to denote the fields and such (and more) will be disallowed

the fields and such (and more) will be disallowed in Python 3.15.

API documentation generators[edit]
Tools that can generate documentation for Python API include pydoc (available as part of the standard library), Sphinx, Pdoc and its forks, Doxygen and Graphviz, among others.[189]
Naming[edit]

Python's name is derived from the British comedy group Monty Python, whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture;[190] for example, the

in Python code and culture;[190] for example, the metasyntactic variables often used in Python literature are spam and eggs instead of the traditional foo and bar.[190][191] The official Python documentation also contains various references to Monty

also contains various references to Monty Python routines.[192][193] Users of Python are sometimes referred to as "Pythonistas".[194]

The prefix Py- is used to show that something is related to Python. Examples of the use of this prefix in names of Python applications or libraries include Pygame, a binding of Simple DirectMedia Layer to Python (commonly used to create games); PyQt

to Python (commonly used to create games); PyQt and PyGTK, which bind Qt and GTK to Python respectively; and PyPy, a Python implementation originally written in Python.

Popularity[edit]

Since 2003, Python has consistently ranked in the top ten most popular programming languages in the TIOBE Programming Community Index where as of December 2022[update] it was the most popular language (ahead of C, C++, and Java).[39] It was selected

(ahead of C, C++, and Java).[39] It was selected as Programming Language of the Year (for "the highest rise in ratings in a year") in 2007, 2010, 2018, and 2020 (the only language to have done so four times as of 2020[update][195]).

Large organizations that use Python include Wikipedia, Google,[196] Yahoo!,[197] CERN,[198] NASA,[199] Facebook,[200] Amazon, Instagram,[201] Spotify,[202] and some smaller entities like Industrial Light & Magic[203] and ITA.[204] The social news

Light & Magic[203] and ITA.[204] The social news networking site Reddit was written mostly in Python.[205] Organizations that partially use Python include Discord[206] and Baidu.[207]

Uses[edit]
Main article: List of Python software
Python Powered

Python can serve as a scripting language for web applications, e.g. via mod_wsgi for the Apache webserver.[208] With Web Server Gateway Interface, a standard API has evolved to facilitate these applications. Web frameworks like Django, Pylons,

applications. Web frameworks like Django, Pylons, Pyramid, TurboGears, web2py, Tornado, Flask, Bottle, and Zope support developers in the design and maintenance of complex applications. Pyjs and IronPython can be used to develop the client-side of

can be used to develop the client-side of Ajax-based applications. SQLAlchemy can be used as a data mapper to a relational database. Twisted is a framework to program communications between computers, and is used (for example) by Dropbox.

Libraries such as NumPy, SciPy and Matplotlib allow the effective use of Python in scientific computing,[209][210] with specialized libraries such as Biopython and Astropy providing domain-specific functionality. SageMath is a computer algebra

functionality. SageMath is a computer algebra system with a notebook interface programmable in Python: its library covers many aspects of mathematics, including algebra, combinatorics, numerical mathematics, number theory, and calculus.[211] OpenCV

number theory, and calculus.[211] OpenCV has Python bindings with a rich set of features for computer vision and image processing.[212]

Python is commonly used in artificial intelligence projects and machine learning projects with the help of libraries like TensorFlow, Keras, Pytorch, scikit-learn and the Logic language ProbLog.[213][214][215][216][217] As a scripting language with

As a scripting language with a modular architecture, simple syntax, and rich text processing tools, Python is often used for natural language processing.[218]

The combination of Python and Prolog has proved to be particularly useful for AI applications, with Prolog providing knowledge representation and reasoning capabilities. The Janus system, in particular, exploits the similarities between these two

exploits the similarities between these two languages,

in part because of their use of dynamic typing, and the simple recursive nature of their
data structures. Typical applications of this combination include  natural language processing, visual query

answering, geospatial reasoning, and handling of semantic web data.[219][220]

The Natlog system, implemented in Python, uses Definite Clause Grammars (DCGs) as prompt generators for text-to-text generators like GPT3 and text-to-image generators like DALL-E or Stable Diffusion.[221]

Python can also be used for graphical user interface (GUI) by using libraries like Tkinter.[222][223]

Python has been successfully embedded in many software products as a scripting language, including in finite element method software such as Abaqus, 3D parametric modelers like FreeCAD, 3D animation packages such as 3ds Max, Blender, Cinema 4D,

packages such as 3ds Max, Blender, Cinema 4D, Lightwave, Houdini, Maya, modo, MotionBuilder, Softimage, the visual effects compositor Nuke, 2D imaging programs like GIMP,[224] Inkscape, Scribus and Paint Shop Pro,[225] and musical notation programs

Shop Pro,[225] and musical notation programs like scorewriter and capella. GNU Debugger uses Python as a pretty printer to show complex structures such as C++ containers. Esri promotes Python as the best choice for writing scripts in ArcGIS.[226] It

choice for writing scripts in ArcGIS.[226] It has also been used in several video games,[227][228] and has been adopted as first of the three available programming languages in Google App Engine, the other two being Java and Go.[229]

Many operating systems include Python as a standard component. It ships with most Linux distributions,[230] AmigaOS 4 (using Python 2.7), FreeBSD (as a package), NetBSD, and OpenBSD (as a package) and can be used from the command line (terminal).

and can be used from the command line (terminal). Many Linux distributions use installers written in Python: Ubuntu uses the Ubiquity installer, while Red Hat Linux and Fedora Linux use the Anaconda installer. Gentoo Linux uses Python in its package

Gentoo Linux uses Python in its package management system, Portage.

Python is used extensively in the information security industry, including in exploit development.[231][232]

Most of the Sugar software for the One Laptop per Child XO, developed at Sugar Labs as of 2008[update], is written in Python.[233] The Raspberry Pi single-board computer project has adopted Python as its main user-programming language.

LibreOffice includes Python and intends to replace Java with Python. Its Python Scripting Provider is a core feature[234] since Version 4.0 from 7 February 2013.
Languages influenced by Python[edit]

Languages influenced by Python[edit]
Python's design and philosophy have influenced many other programming languages:
Boo uses indentation, a similar syntax, and a similar object model.[235]

Cobra uses indentation and a similar syntax, and its Acknowledgements document lists Python first among languages that influenced it.[236]
CoffeeScript, a programming language that cross-compiles to JavaScript, has Python-inspired syntax.

ECMAScript–JavaScript borrowed iterators and generators from Python.[237]
GDScript, a scripting language very similar to Python, built-in to the Godot game engine.[238]

Go is designed for the "speed of working in a dynamic language like Python"[239] and shares the same syntax for slicing arrays.
Groovy was motivated by the desire to bring the Python design philosophy to Java.[240]

Julia was designed to be "as usable for general programming as Python".[27]
Mojo is a non-strict[28][241] superset of Python (e.g. still missing classes, and adding e.g. struct).[242]
Nim uses indentation and similar syntax.[243]

Nim uses indentation and similar syntax.[243]
Ruby's creator, Yukihiro Matsumoto, has said: "I wanted a scripting language that was more powerful than Perl, and more object-oriented than Python. That's why I decided to design my own language."[244]

Swift, a programming language developed by Apple, has some Python-inspired syntax.[245]
Kotlin blends Python and Java features, minimizing boilerplate code for enhanced developer efficiency.[246]

Python's development practices have also been emulated by other languages. For example, the practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python, a PEP) is also used in Tcl,[247]

(in Python, a PEP) is also used in Tcl,[247] Erlang,[248] and Swift.[249]

See also[edit]
Computer programming portalFree and open-source software portal
Python syntax and semantics
pip (package manager)
List of programming languages
History of programming languages
Comparison of programming languages
References[edit]

References[edit]
^ "General Python FAQ – Python 3 documentation". docs.python.org. Retrieved 7 July 2024.
^ "Python 0.9.1 part 01/21". alt.sources archives. Archived from the original on 11 August 2021. Retrieved 11 August 2021.

^ "Why is Python a dynamic language and also a strongly typed language". Python Wiki. Archived from the original on 14 March 2021. Retrieved 27 January 2021.

^ a b "PEP 483 – The Theory of Type Hints". Python.org. Archived from the original on 14 June 2020. Retrieved 14 June 2018.
^ "PEP 11 – CPython platform support | peps.python.org". Python Enhancement Proposals (PEPs). Retrieved 22 April 2024.

^ "PEP 738 – Adding Android as a supported platform | peps.python.org". Python Enhancement Proposals (PEPs). Retrieved 19 May 2024.

^ "Download Python for Other Platforms". Python.org. Archived from the original on 27 November 2020. Retrieved 18 August 2023.

^ "test – Regression tests package for Python – Python 3.7.13 documentation". docs.python.org. Archived from the original on 17 May 2022. Retrieved 17 May 2022.

^ "platform – Access to underlying platform's identifying data – Python 3.10.4 documentation". docs.python.org. Archived from the original on 17 May 2022. Retrieved 17 May 2022.

^ Holth, Moore (30 March 2014). "PEP 0441 – Improving Python ZIP Application Support". Archived from the original on 26 December 2018. Retrieved 12 November 2015.

^ "Starlark Language". Archived from the original on 15 June 2020. Retrieved 25 May 2019.

^ a b "Why was Python created in the first place?". General Python FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 22 March 2007. I had extensive experience with implementing an interpreted language in the

with implementing an interpreted language in the ABC group at CWI, and from working with this group I had learned a lot about language design. This is the origin of many Python features, including the use of indentation for statement grouping and

the use of indentation for statement grouping and the inclusion of very high-level data types (although the details are all different in Python).

^ "Ada 83 Reference Manual (raise statement)". Archived from the original on 22 October 2019. Retrieved 7 January 2020.

^ a b Kuchling, Andrew M. (22 December 2006). "Interview with Guido van Rossum (July 1998)". amk.ca. Archived from the original on 1 May 2007. Retrieved 12 March 2012. I'd spent a summer at DEC's Systems Research Center, which introduced me to

Systems Research Center, which introduced me to Modula-2+; the Modula-3 final report was being written there at about the same time. What I learned there later showed up in Python's exception handling, modules, and the fact that methods explicitly

modules, and the fact that methods explicitly contain 'self' in their parameter list. String slicing came from Algol-68 and Icon.

^ a b c "itertools – Functions creating iterators for efficient looping – Python 3.7.1 documentation". docs.python.org. Archived from the original on 14 June 2020. Retrieved 22 November 2016. This module implements a number of iterator building

module implements a number of iterator building blocks inspired by constructs from APL, Haskell, and SML.

^ van Rossum, Guido (1993). "An Introduction to Python for UNIX/C Programmers". Proceedings of the NLUUG Najaarsconferentie (Dutch UNIX Users Group). CiteSeerX 10.1.1.38.2023. even though the design of C is far from ideal, its influence on Python is

C is far from ideal, its influence on Python is considerable.

^ a b "Classes". The Python Tutorial. Python Software Foundation. Archived from the original on 23 October 2012. Retrieved 20 February 2012. It is a mixture of the class mechanisms found in C++ and Modula-3

^ Lundh, Fredrik. "Call By Object". effbot.org. Archived from the original on 23 November 2019. Retrieved 21 November 2017. replace "CLU" with "Python", "record" with "instance", and "procedure" with "function or method", and you get a pretty

with "function or method", and you get a pretty accurate description of Python's object model.

^ Simionato, Michele. "The Python 2.3 Method Resolution Order". Python Software Foundation. Archived from the original on 20 August 2020. Retrieved 29 July 2014. The C3 method itself has nothing to do with Python, since it was invented by people

do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers

^ Kuchling, A. M. "Functional Programming HOWTO". Python v2.7.2 documentation. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 9 February 2012. List comprehensions and generator expressions [...] are a concise

and generator expressions [...] are a concise notation for such operations, borrowed from the functional programming language Haskell.

^ Schemenauer, Neil; Peters, Tim; Hetland, Magnus Lie (18 May 2001). "PEP 255 – Simple Generators". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 9 February 2012.

^ "More Control Flow Tools". Python 3 documentation. Python Software Foundation. Archived from the original on 4 June 2016. Retrieved 24 July 2015. By popular demand, a few features commonly found in functional programming languages like Lisp have

functional programming languages like Lisp have been added to Python. With the lambda keyword, small anonymous functions can be created.

^ "re – Regular expression operations – Python 3.10.6 documentation". docs.python.org. Archived from the original on 18 July 2018. Retrieved 6 September 2022. This module provides regular expression matching operations similar to those found in

matching operations similar to those found in Perl.

^ "CoffeeScript". coffeescript.org. Archived from the original on 12 June 2020. Retrieved 3 July 2018.

^ "Perl and Python influences in JavaScript". www.2ality.com. 24 February 2013. Archived from the original on 26 December 2018. Retrieved 15 May 2015.

^ Rauschmayer, Axel. "Chapter 3: The Nature of JavaScript; Influences". O'Reilly, Speaking JavaScript. Archived from the original on 26 December 2018. Retrieved 15 May 2015.

^ a b "Why We Created Julia". Julia website. February 2012. Archived from the original on 2 May 2020. Retrieved 5 June 2014. We want something as usable for general programming as Python [...]

^ a b Krill, Paul (4 May 2023). "Mojo language marries Python and MLIR for AI development". InfoWorld. Archived from the original on 5 May 2023. Retrieved 5 May 2023.

^ Ring Team (4 December 2017). "Ring and other languages". ring-lang.net. ring-lang. Archived from the original on 25 December 2018. Retrieved 4 December 2017.

^ Bini, Ola (2007). Practical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform. Berkeley: APress. p. 3. ISBN 978-1-59059-881-8.

^ Lattner, Chris (3 June 2014). "Chris Lattner's Homepage". Chris Lattner. Archived from the original on 25 December 2018. Retrieved 3 June 2014. The Swift language is the product of tireless effort from a team of language experts, documentation

from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the

Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.

^ Kuhlman, Dave. "A Python Book: Beginning Python, Advanced Python, and Python Exercises". Section 1.1. Archived from the original (PDF) on 23 June 2012.

^ "About Python". Python Software Foundation. Archived from the original on 20 April 2012. Retrieved 24 April 2012., second section "Fans of Python use the phrase "batteries included" to describe the standard library, which covers everything from

standard library, which covers everything from asynchronous processing to zip files."

^ "PEP 206 – Python Advanced Library". Python.org. Archived from the original on 5 May 2021. Retrieved 11 October 2021.

^ Rossum, Guido Van (20 January 2009). "The History of Python: A Brief Timeline of Python". The History of Python. Archived from the original on 5 June 2020. Retrieved 5 March 2021.

^ Peterson, Benjamin (20 April 2020). "Python 2.7.18, the last release of Python 2". Python Insider. Archived from the original on 26 April 2020. Retrieved 27 April 2020.

^ "Stack Overflow Developer Survey 2022". Stack Overflow. Archived from the original on 27 June 2022. Retrieved 12 August 2022.

^ "The State of Developer Ecosystem in 2020 Infographic". JetBrains: Developer Tools for Professionals and Teams. Archived from the original on 1 March 2021. Retrieved 5 March 2021.

^ a b "TIOBE Index". TIOBE. Archived from the original on 25 February 2018. Retrieved 3 January 2023. The TIOBE Programming Community index is an indicator of the popularity of programming languages Updated as required.

^ "PYPL PopularitY of Programming Language index". pypl.github.io. Archived from the original on 14 March 2017. Retrieved 26 March 2021.

^ a b Venners, Bill (13 January 2003). "The Making of Python". Artima Developer. Artima. Archived from the original on 1 September 2016. Retrieved 22 March 2007.

^ van Rossum, Guido (29 August 2000). "SETL (was: Lukewarm about range literals)". Python-Dev (Mailing list). Archived from the original on 14 July 2018. Retrieved 13 March 2011.

^ van Rossum, Guido (20 January 2009). "A Brief Timeline of Python". The History of Python. Archived from the original on 5 June 2020. Retrieved 20 January 2009.

^ Fairchild, Carlie (12 July 2018). "Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life". Linux Journal. Archived from the original on 13 July 2018. Retrieved 13 July 2018.

^ "PEP 8100". Python Software Foundation. Archived from the original on 4 June 2020. Retrieved 4 May 2019.
^ "PEP 13 – Python Language Governance". Python.org. Archived from the original on 27 May 2021. Retrieved 25 August 2021.

^ Kuchling, A. M.; Zadka, Moshe (16 October 2000). "What's New in Python 2.0". Python Software Foundation. Archived from the original on 23 October 2012. Retrieved 11 February 2012.

^ van Rossum, Guido (5 April 2006). "PEP 3000 – Python 3000". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 3 March 2016. Retrieved 27 June 2009.

^ "2to3 – Automated Python 2 to 3 code translation". docs.python.org. Archived from the original on 4 June 2020. Retrieved 2 February 2021.

^ "PEP 373 – Python 2.7 Release Schedule". python.org. Archived from the original on 19 May 2020. Retrieved 9 January 2017.

^ "PEP 466 – Network Security Enhancements for Python 2.7.x". python.org. Archived from the original on 4 June 2020. Retrieved 9 January 2017.

^ "Sunsetting Python 2". Python.org. Archived from the original on 12 January 2020. Retrieved 22 September 2019.
^ "PEP 373 – Python 2.7 Release Schedule". Python.org. Archived from the original on 13 January 2020. Retrieved 22 September 2019.

^ "Python Release Python 3.7.17". Python.org. Archived from the original on 31 July 2023. Retrieved 18 August 2023.
^ mattip (25 December 2023). "PyPy v7.3.14 release". PyPy. Archived from the original on 5 January 2024. Retrieved 5 January 2024.

^ "CVE-2021-3177". Red Hat Customer Portal. Archived from the original on 6 March 2021. Retrieved 26 February 2021.
^ "CVE-2021-3177". CVE. Archived from the original on 27 February 2021. Retrieved 26 February 2021.

^ "CVE-2021-23336". CVE. Archived from the original on 24 February 2021. Retrieved 26 February 2021.

^ Langa, Łukasz (24 March 2022). "Python 3.10.4 and 3.9.12 are now available out of schedule". Python Insider. Archived from the original on 21 April 2022. Retrieved 19 April 2022.

^ Langa, Łukasz (16 March 2022). "Python 3.10.3, 3.9.11, 3.8.13, and 3.7.13 are now available with security content". Python Insider. Archived from the original on 17 April 2022. Retrieved 19 April 2022.

^ Langa, Łukasz (17 May 2022). "Python 3.9.13 is now available". Python Insider. Archived from the original on 17 May 2022. Retrieved 21 May 2022.

^ Langa, Łukasz (7 September 2022). "Python releases 3.10.7, 3.9.14, 3.8.14, and 3.7.14 are now available". Python Insider. Archived from the original on 13 September 2022. Retrieved 16 September 2022.

^ "CVE-2020-10735". CVE. Archived from the original on 20 September 2022. Retrieved 16 September 2022.
^ "Built-in Types".
^ corbet (24 October 2022). "Python 3.11 released [LWN.net]". lwn.net. Retrieved 15 November 2022.

^ "What's New In Python 3.13". Python documentation. Retrieved 30 April 2024.
^ "PEP 667 – Consistent views of namespaces | peps.python.org". Python Enhancement Proposals (PEPs). Retrieved 7 October 2024.

^ "Status of Python versions". Python Developer's Guide. Retrieved 7 October 2024.
^ Wouters, Thomas (9 April 2024). "Python Insider: Python 3.12.3 and 3.13.0a6 released". Python Insider. Retrieved 29 April 2024.

^ "PEP 594 – Removing dead batteries from the standard library". Python Enhancement Proposals. Python Softtware Foundation. 20 May 2019.

^ The Cain Gang Ltd. "Python Metaclasses: Who? Why? When?" (PDF). Archived from the original (PDF) on 30 May 2009. Retrieved 27 June 2009.

^ "3.3. Special method names". The Python Language Reference. Python Software Foundation. Archived from the original on 15 December 2018. Retrieved 27 June 2009.

^ "PyDBC: method preconditions, method postconditions and class invariants for Python". Archived from the original on 23 November 2019. Retrieved 24 September 2011.

^ "Contracts for Python". Archived from the original on 15 June 2020. Retrieved 24 September 2011.
^ "PyDatalog". Archived from the original on 13 June 2020. Retrieved 22 July 2012.

^ "Glue It All Together With Python". Python.org. Retrieved 30 September 2024.

^ "Extending and Embedding the Python Interpreter: Reference Counts". Docs.python.org. Archived from the original on 18 October 2012. Retrieved 5 June 2020. Since Python makes heavy use of malloc() and free(), it needs a strategy to avoid memory

and free(), it needs a strategy to avoid memory leaks as well as the use of freed memory. The chosen method is called reference counting.

^ a b Hettinger, Raymond (30 January 2002). "PEP 289 – Generator Expressions". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 14 June 2020. Retrieved 19 February 2012.

^ "6.5 itertools – Functions creating iterators for efficient looping". Docs.python.org. Archived from the original on 14 June 2020. Retrieved 22 November 2016.

^ a b Peters, Tim (19 August 2004). "PEP 20 – The Zen of Python". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 26 December 2018. Retrieved 24 November 2008.

^ Lutz, Mark (January 2022). "Python Changes 2014+". Learning Python. Archived from the original on 15 March 2024. Retrieved 25 February 2024.

^ "Confusion regarding a rule in The Zen of Python". Python Help - Discussions on Python.org. 3 May 2022. Archived from the original on 25 February 2024. Retrieved 25 February 2024.

^ Ambi, Chetan (4 July 2021). "The Most Controversial Python Walrus Operator". Python Simplified. Archived from the original on 27 August 2023. Retrieved 5 February 2024.

^ Grifski, Jeremy (24 May 2020). "The Controversy Behind The Walrus Operator in Python". The Renegade Coder. Archived from the original on 28 December 2023. Retrieved 25 February 2024.

^ Bader, Dan. "Python String Formatting Best Practices". Real Python. Archived from the original on 18 February 2024. Retrieved 25 February 2024.

^ Martelli, Alex; Ravenscroft, Anna; Ascher, David (2005). Python Cookbook, 2nd Edition. O'Reilly Media. p. 230. ISBN 978-0-596-00797-3. Archived from the original on 23 February 2020. Retrieved 14 November 2015.

^ "Python Culture". ebeab. 21 January 2014. Archived from the original on 30 January 2014.

^ a b "Transpiling Python to Julia using PyJL" (PDF). Archived (PDF) from the original on 19 November 2023. Retrieved 20 September 2023. After manually modifying one line of code by specifying the necessary type information, we obtained a speedup of

type information, we obtained a speedup of 52.6×, making the translated Julia code 19.5× faster than the original Python code.

^ "Why is it called Python?". General Python FAQ. Docs.python.org. Archived from the original on 24 October 2012. Retrieved 3 January 2023.

^ "15 Ways Python Is a Powerful Force on the Web". Archived from the original on 11 May 2019. Retrieved 3 July 2018.

^ "pprint – Data pretty printer – Python 3.11.0 documentation". docs.python.org. Archived from the original on 22 January 2021. Retrieved 5 November 2022. stuff=['spam', 'eggs', 'lumberjack', 'knights', 'ni']

^ "Code Style – The Hitchhiker's Guide to Python". docs.python-guide.org. Archived from the original on 27 January 2021. Retrieved 20 January 2021.

^ "Is Python a good language for beginning programmers?". General Python FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 21 March 2007.

^ "Myths about indentation in Python". Secnetix.de. Archived from the original on 18 February 2018. Retrieved 19 April 2011.

^ Guttag, John V. (12 August 2016). Introduction to Computation and Programming Using Python: With Application to Understanding Data. MIT Press. ISBN 978-0-262-52962-4.

^ "PEP 8 – Style Guide for Python Code". Python.org. Archived from the original on 17 April 2019. Retrieved 26 March 2019.

^ "8. Errors and Exceptions – Python 3.12.0a0 documentation". docs.python.org. Archived from the original on 9 May 2022. Retrieved 9 May 2022.

^ "Highlights: Python 2.5". Python.org. Archived from the original on 4 August 2019. Retrieved 20 March 2018.

^ van Rossum, Guido (22 April 2009). "Tail Recursion Elimination". Neopythonic.blogspot.be. Archived from the original on 19 May 2018. Retrieved 3 December 2012.

^ van Rossum, Guido (9 February 2006). "Language Design Is Not Just Solving Puzzles". Artima forums. Artima. Archived from the original on 17 January 2020. Retrieved 21 March 2007.

^ van Rossum, Guido; Eby, Phillip J. (10 May 2005). "PEP 342 – Coroutines via Enhanced Generators". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 29 May 2020. Retrieved 19 February 2012.

^ "PEP 380". Python.org. Archived from the original on 4 June 2020. Retrieved 3 December 2012.
^ "division". python.org. Archived from the original on 20 July 2006. Retrieved 30 July 2014.

^ "PEP 0465 – A dedicated infix operator for matrix multiplication". python.org. Archived from the original on 4 June 2020. Retrieved 1 January 2016.

^ "Python 3.5.1 Release and Changelog". python.org. Archived from the original on 14 May 2020. Retrieved 1 January 2016.
^ "What's New in Python 3.8". Archived from the original on 8 June 2020. Retrieved 14 October 2019.

^ van Rossum, Guido; Hettinger, Raymond (7 February 2003). "PEP 308 – Conditional Expressions". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 13 March 2016. Retrieved 13 July 2011.

^ "4. Built-in Types – Python 3.6.3rc1 documentation". python.org. Archived from the original on 14 June 2020. Retrieved 1 October 2017.

^ "5.3. Tuples and Sequences – Python 3.7.1rc2 documentation". python.org. Archived from the original on 10 June 2020. Retrieved 17 October 2018.

^ a b "PEP 498 – Literal String Interpolation". python.org. Archived from the original on 15 June 2020. Retrieved 8 March 2017.

^ "Why must 'self' be used explicitly in method definitions and calls?". Design and History FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 19 February 2012.

^ Sweigart, Al (2020). Beyond the Basic Stuff with Python: Best Practices for Writing Clean Code. No Starch Press. p. 322. ISBN 978-1-59327-966-0. Archived from the original on 13 August 2021. Retrieved 7 July 2021.

^ "The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1". Archived from the original on 26 October 2012. Retrieved 12 January 2011.

^ "PEP 484 – Type Hints | peps.python.org". peps.python.org. Archived from the original on 27 November 2023. Retrieved 29 November 2023.

^ "typing — Support for type hints". Python documentation. Python Software Foundation. Archived from the original on 21 February 2020. Retrieved 22 December 2023.

^ "mypy – Optional Static Typing for Python". Archived from the original on 6 June 2020. Retrieved 28 January 2017.
^ "Introduction". mypyc.readthedocs.io. Archived from the original on 22 December 2023. Retrieved 22 December 2023.

^ "15. Floating Point Arithmetic: Issues and Limitations – Python 3.8.3 documentation". docs.python.org. Archived from the original on 6 June 2020. Retrieved 6 June 2020. Almost all machines today (November 2000) use IEEE-754 floating point

today (November 2000) use IEEE-754 floating point arithmetic, and almost all platforms map Python floats to IEEE-754 "double precision".

^ Zadka, Moshe; van Rossum, Guido (11 March 2001). "PEP 237 – Unifying Long Integers and Integers". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 28 May 2020. Retrieved 24 September 2011.

^ "Built-in Types". Archived from the original on 14 June 2020. Retrieved 3 October 2019.
^ "PEP 465 – A dedicated infix operator for matrix multiplication". python.org. Archived from the original on 29 May 2020. Retrieved 3 July 2018.

^ a b Zadka, Moshe; van Rossum, Guido (11 March 2001). "PEP 238 – Changing the Division Operator". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 28 May 2020. Retrieved 23 October 2013.

^ "Why Python's Integer Division Floors". 24 August 2010. Archived from the original on 5 June 2020. Retrieved 25 August 2010.

^ "round", The Python standard library, release 3.2, §2: Built-in functions, archived from the original on 25 October 2012, retrieved 14 August 2011

^ "round", The Python standard library, release 2.7, §2: Built-in functions, archived from the original on 27 October 2012, retrieved 14 August 2011

^ Beazley, David M. (2009). Python Essential Reference (4th ed.). Addison-Wesley Professional. p. 66. ISBN 9780672329784.
^ Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language (2nd ed.). p. 206.

^ a b Batista, Facundo (17 October 2003). "PEP 327 – Decimal Data Type". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 4 June 2020. Retrieved 24 November 2008.

^ "What's New in Python 2.6". Python v2.6.9 documentation. 29 October 2013. Archived from the original on 23 December 2019. Retrieved 26 September 2015.

^ "10 Reasons Python Rocks for Research (And a Few Reasons it Doesn't) – Hoyt Koepke". University of Washington Department of Statistics. Archived from the original on 31 May 2020. Retrieved 3 February 2019.

^ Shell, Scott (17 June 2014). "An introduction to Python for scientific computing" (PDF). Archived (PDF) from the original on 4 February 2019. Retrieved 3 February 2019.

^ Piotrowski, Przemyslaw (July 2006). "Build a Rapid Web Development Environment for Python Server Pages and Oracle". Oracle Technology Network. Oracle. Archived from the original on 2 April 2019. Retrieved 12 March 2012.

^ Eby, Phillip J. (7 December 2003). "PEP 333 – Python Web Server Gateway Interface v1.0". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 14 June 2020. Retrieved 19 February 2012.

^ "PyPI". PyPI. 17 March 2024. Archived from the original on 17 March 2024.
^ Enthought, Canopy. "Canopy". www.enthought.com. Archived from the original on 15 July 2017. Retrieved 20 August 2016.

^ "PEP 7 – Style Guide for C Code | peps.python.org". peps.python.org. Archived from the original on 24 April 2022. Retrieved 28 April 2022.

^ "4. Building C and C++ Extensions – Python 3.9.2 documentation". docs.python.org. Archived from the original on 3 March 2021. Retrieved 1 March 2021.

^ van Rossum, Guido (5 June 2001). "PEP 7 – Style Guide for C Code". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 1 June 2020. Retrieved 24 November 2008.

^ "CPython byte code". Docs.python.org. Archived from the original on 5 June 2020. Retrieved 16 February 2016.
^ "Python 2.5 internals" (PDF). Archived (PDF) from the original on 6 August 2012. Retrieved 19 April 2011.

^ "Changelog – Python 3.9.0 documentation". docs.python.org. Archived from the original on 7 February 2021. Retrieved 8 February 2021.
^ "Download Python". Python.org. Archived from the original on 8 December 2020. Retrieved 13 December 2020.

^ "history [vmspython]". www.vmspython.org. Archived from the original on 2 December 2020. Retrieved 4 December 2020.
^ "An Interview with Guido van Rossum". Oreilly.com. Archived from the original on 16 July 2014. Retrieved 24 November 2008.

^ "Download Python for Other Platforms". Python.org. Archived from the original on 27 November 2020. Retrieved 4 December 2020.
^ "PyPy compatibility". Pypy.org. Archived from the original on 6 June 2020. Retrieved 3 December 2012.

^ Team, The PyPy (28 December 2019). "Download and Install". PyPy. Archived from the original on 8 January 2022. Retrieved 8 January 2022.

^ "speed comparison between CPython and Pypy". Speed.pypy.org. Archived from the original on 10 May 2021. Retrieved 3 December 2012.
^ "Codon: Differences with Python". Archived from the original on 25 May 2023. Retrieved 28 August 2023.

^ Lawson, Loraine (14 March 2023). "MIT-Created Compiler Speeds up Python Code". The New Stack. Archived from the original on 6 April 2023. Retrieved 28 August 2023.

^ "Application-level Stackless features – PyPy 2.0.2 documentation". Doc.pypy.org. Archived from the original on 4 June 2020. Retrieved 17 July 2013.

^ "Python-for-EV3". LEGO Education. Archived from the original on 7 June 2020. Retrieved 17 April 2019.

^ Yegulalp, Serdar (29 October 2020). "Pyston returns from the dead to speed Python". InfoWorld. Archived from the original on 27 January 2021. Retrieved 26 January 2021.

^ "cinder: Instagram's performance-oriented fork of CPython". GitHub. Archived from the original on 4 May 2021. Retrieved 4 May 2021.

^ Aroca, Rafael (7 August 2021). "Snek Lang: feels like Python on Arduinos". Yet Another Technology Blog. Archived from the original on 5 January 2024. Retrieved 4 January 2024.

^ Aufranc (CNXSoft), Jean-Luc (16 January 2020). "Snekboard Controls LEGO Power Functions with CircuitPython or Snek Programming Languages (Crowdfunding) – CNX Software". CNX Software – Embedded Systems News. Archived from the original on 5 January

News. Archived from the original on 5 January 2024. Retrieved 4 January 2024.

^ Kennedy (@mkennedy), Michael. "Ready to find out if you're git famous?". pythonbytes.fm. Archived from the original on 5 January 2024. Retrieved 4 January 2024.

^ Packard, Keith (20 December 2022). "The Snek Programming Language: A Python-inspired Embedded Computing Language" (PDF). Archived (PDF) from the original on 4 January 2024. Retrieved 4 January 2024.

^ "Plans for optimizing Python". Google Project Hosting. 15 December 2009. Archived from the original on 11 April 2016. Retrieved 24 September 2011.

^ "Python on the Nokia N900". Stochastic Geometry. 29 April 2010. Archived from the original on 20 June 2019. Retrieved 9 July 2015.
^ "Brython". brython.info. Archived from the original on 3 August 2018. Retrieved 21 January 2021.

^ "Transcrypt – Python in the browser". transcrypt.org. Archived from the original on 19 August 2018. Retrieved 22 December 2020.

^ "Transcrypt: Anatomy of a Python to JavaScript Compiler". InfoQ. Archived from the original on 5 December 2020. Retrieved 20 January 2021.

^ "Nuitka Home | Nuitka Home". nuitka.net. Archived from the original on 30 May 2020. Retrieved 18 August 2017.

^ Guelton, Serge; Brunet, Pierrick; Amini, Mehdi; Merlini, Adrien; Corbillon, Xavier; Raynaud, Alan (16 March 2015). "Pythran: enabling static optimization of scientific Python programs". Computational Science & Discovery. 8 (1). IOP Publishing:

Science & Discovery. 8 (1). IOP Publishing: 014001. Bibcode:2015CS&D....8a4001G. doi:10.1088/1749-4680/8/1/014001. ISSN 1749-4699.

^ "The Python → 11l → C++ transpiler". Archived from the original on 24 September 2022. Retrieved 17 July 2022.
^ "google/grumpy". 10 April 2020. Archived from the original on 15 April 2020. Retrieved 25 March 2020 – via GitHub.

^ "Projects". opensource.google. Archived from the original on 24 April 2020. Retrieved 25 March 2020.

^ Francisco, Thomas Claburn in San. "Google's Grumpy code makes Python Go". www.theregister.com. Archived from the original on 7 March 2021. Retrieved 20 January 2021.

^ "GitHub – IronLanguages/ironpython3: Implementation of Python 3.x for .NET Framework that is built on top of the Dynamic Language Runtime". GitHub. Archived from the original on 28 September 2021.

^ "IronPython.net /". ironpython.net. Archived from the original on 17 April 2021.
^ "Jython FAQ". www.jython.org. Archived from the original on 22 April 2021. Retrieved 22 April 2021.

^ Murri, Riccardo (2013). Performance of Python runtimes on a non-numeric scientific code. European Conference on Python in Science (EuroSciPy). arXiv:1404.6388. Bibcode:2014arXiv1404.6388M.

^ "The Computer Language Benchmarks Game". Archived from the original on 14 June 2020. Retrieved 30 April 2020.

^ a b Warsaw, Barry; Hylton, Jeremy; Goodger, David (13 June 2000). "PEP 1 – PEP Purpose and Guidelines". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 6 June 2020. Retrieved 19 April 2011.

^ "PEP 8 – Style Guide for Python Code". Python.org. Archived from the original on 17 April 2019. Retrieved 26 March 2019.

^ Cannon, Brett. "Guido, Some Guys, and a Mailing List: How Python is Developed". python.org. Python Software Foundation. Archived from the original on 1 June 2009. Retrieved 27 June 2009.

^ "Moving Python's bugs to GitHub [LWN.net]". Archived from the original on 2 October 2022. Retrieved 2 October 2022.

^ "Python Developer's Guide – Python Developer's Guide". devguide.python.org. Archived from the original on 9 November 2020. Retrieved 17 December 2019.

^ Hughes, Owen (24 May 2021). "Programming languages: Why Python 4.0 might never arrive, according to its creator". TechRepublic. Archived from the original on 14 July 2022. Retrieved 16 May 2022.

^ "PEP 602 – Annual Release Cycle for Python". Python.org. Archived from the original on 14 June 2020. Retrieved 6 November 2019.

^ "Changing the Python release cadence [LWN.net]". lwn.net. Archived from the original on 6 November 2019. Retrieved 6 November 2019.

^ Norwitz, Neal (8 April 2002). "[Python-Dev] Release Schedules (was Stability & change)". Archived from the original on 15 December 2018. Retrieved 27 June 2009.

^ a b Aahz; Baxter, Anthony (15 March 2001). "PEP 6 – Bug Fix Releases". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 27 June 2009.

^ "Python Buildbot". Python Developer's Guide. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 24 September 2011.

^ "1. Extending Python with C or C++ – Python 3.9.1 documentation". docs.python.org. Archived from the original on 23 June 2020. Retrieved 14 February 2021.

^ "PEP 623 – Remove wstr from Unicode". Python.org. Archived from the original on 5 March 2021. Retrieved 14 February 2021.

^ "PEP 634 – Structural Pattern Matching: Specification". Python.org. Archived from the original on 6 May 2021. Retrieved 14 February 2021.
^ "Documentation Tools". Python.org. Archived from the original on 11 November 2020. Retrieved 22 March 2021.

^ a b "Whetting Your Appetite". The Python Tutorial. Python Software Foundation. Archived from the original on 26 October 2012. Retrieved 20 February 2012.

^ "In Python, should I use else after a return in an if block?". Stack Overflow. Stack Exchange. 17 February 2011. Archived from the original on 20 June 2019. Retrieved 6 May 2011.

^ Lutz, Mark (2009). Learning Python: Powerful Object-Oriented Programming. O'Reilly Media, Inc. p. 17. ISBN 9781449379322. Archived from the original on 17 July 2017. Retrieved 9 May 2017.

^ Fehily, Chris (2002). Python. Peachpit Press. p. xv. ISBN 9780201748840. Archived from the original on 17 July 2017. Retrieved 9 May 2017.

^ Lubanovic, Bill (2014). Introducing Python. Sebastopol, CA : O'Reilly Media. p. 305. ISBN 978-1-4493-5936-2. Retrieved 31 July 2023.

^ Blake, Troy (18 January 2021). "TIOBE Index for January 2021". Technology News and Information by SeniorDBA. Archived from the original on 21 March 2021. Retrieved 26 February 2021.

^ "Quotes about Python". Python Software Foundation. Archived from the original on 3 June 2020. Retrieved 8 January 2012.

^ "Organizations Using Python". Python Software Foundation. Archived from the original on 21 August 2018. Retrieved 15 January 2009.

^ "Python : the holy grail of programming". CERN Bulletin (31/2006). CERN Publications. 31 July 2006. Archived from the original on 15 January 2013. Retrieved 11 February 2012.

^ Shafer, Daniel G. (17 January 2003). "Python Streamlines Space Shuttle Mission Design". Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 24 November 2008.

^ "Tornado: Facebook's Real-Time Web Framework for Python – Facebook for Developers". Facebook for Developers. Archived from the original on 19 February 2019. Retrieved 19 June 2018.

^ "What Powers Instagram: Hundreds of Instances, Dozens of Technologies". Instagram Engineering. 11 December 2016. Archived from the original on 15 June 2020. Retrieved 27 May 2019.

^ "How we use Python at Spotify". Spotify Labs. 20 March 2013. Archived from the original on 10 June 2020. Retrieved 25 July 2018.

^ Fortenberry, Tim (17 January 2003). "Industrial Light & Magic Runs on Python". Python Software Foundation. Archived from the original on 6 June 2020. Retrieved 11 February 2012.

^ Taft, Darryl K. (5 March 2007). "Python Slithers into Systems". eWeek.com. Ziff Davis Holdings. Archived from the original on 13 August 2021. Retrieved 24 September 2011.

^ GitHub – reddit-archive/reddit: historical code from reddit.com., The Reddit Archives, archived from the original on 1 June 2020, retrieved 20 March 2019
^ "Real time communication at scale with Elixir at Discord". 8 October 2020.

^ "What Programming Language is Baidu Built In?". 5 July 2018.
^ "Usage statistics and market share of Python for websites". 2012. Archived from the original on 13 August 2021. Retrieved 18 December 2012.

^ Oliphant, Travis (2007). "Python for Scientific Computing". Computing in Science and Engineering. 9 (3): 10–20. Bibcode:2007CSE.....9c..10O. CiteSeerX 10.1.1.474.6460. doi:10.1109/MCSE.2007.58. ISSN 1521-9615. S2CID 206457124. Archived from the

S2CID 206457124. Archived from the original on 15 June 2020. Retrieved 10 April 2015.

^ Millman, K. Jarrod; Aivazis, Michael (2011). "Python for Scientists and Engineers". Computing in Science and Engineering. 13 (2): 9–12. Bibcode:2011CSE....13b...9M. doi:10.1109/MCSE.2011.36. Archived from the original on 19 February 2019.

Archived from the original on 19 February 2019. Retrieved 7 July 2014.

^ Science education with SageMath, Innovative Computing in Science Education, archived from the original on 15 June 2020, retrieved 22 April 2019

^ "OpenCV: OpenCV-Python Tutorials". docs.opencv.org. Archived from the original on 23 September 2020. Retrieved 14 September 2020.

^ Dean, Jeff; Monga, Rajat; et al. (9 November 2015). "TensorFlow: Large-scale machine learning on heterogeneous systems" (PDF). TensorFlow.org. Google Research. Archived (PDF) from the original on 20 November 2015. Retrieved 10 November 2015.

^ Piatetsky, Gregory. "Python eats away at R: Top Software for Analytics, Data Science, Machine Learning in 2018: Trends and Analysis". KDnuggets. Archived from the original on 15 November 2019. Retrieved 30 May 2018.

^ "Who is using scikit-learn? – scikit-learn 0.20.1 documentation". scikit-learn.org. Archived from the original on 6 May 2020. Retrieved 30 November 2018.

^ Jouppi, Norm. "Google supercharges machine learning tasks with TPU custom chip". Google Cloud Platform Blog. Archived from the original on 18 May 2016. Retrieved 19 May 2016.

^ De Raedt, Luc; Kimmig, Angelika (2015). "Probabilistic (logic) programming concepts". Machine Learning. 100 (1): 5–47. doi:10.1007/s10994-015-5494-z. S2CID 3166992.

^ "Natural Language Toolkit – NLTK 3.5b1 documentation". www.nltk.org. Archived from the original on 13 June 2020. Retrieved 10 April 2020.

^ Andersen, C. and Swift, T., 2023. The Janus System: a bridge to new prolog applications. In Prolog: The Next 50 Years (pp. 93–104). Cham: Springer Nature Switzerland.

^ "SWI-Prolog Python interface". Archived from the original on 15 March 2024. Retrieved 15 March 2024.

^ Tarau, P., 2023. Reflections on automation, learnability and expressiveness in logic-based programming languages. In Prolog: The Next 50 Years (pp. 359–371). Cham: Springer Nature Switzerland.

^ "Tkinter — Python interface to TCL/Tk". Archived from the original on 18 October 2012. Retrieved 9 June 2023.
^ "Python Tkinter Tutorial". 3 June 2020. Archived from the original on 9 June 2023. Retrieved 9 June 2023.

^ "Installers for GIMP for Windows – Frequently Asked Questions". 26 July 2013. Archived from the original on 17 July 2013. Retrieved 26 July 2013.
^ "jasc psp9components". Archived from the original on 19 March 2008.

^ "About getting started with writing geoprocessing scripts". ArcGIS Desktop Help 9.2. Environmental Systems Research Institute. 17 November 2006. Archived from the original on 5 June 2020. Retrieved 11 February 2012.

^ CCP porkbelly (24 August 2010). "Stackless Python 2.7". EVE Community Dev Blogs. CCP Games. Archived from the original on 11 January 2014. Retrieved 11 January 2014. As you may know, EVE has at its core the programming language known as Stackless

core the programming language known as Stackless Python.

^ Caudill, Barry (20 September 2005). "Modding Sid Meier's Civilization IV". Sid Meier's Civilization IV Developer Blog. Firaxis Games. Archived from the original on 2 December 2010. we created three levels of tools ... The next level offers Python

levels of tools ... The next level offers Python and XML support, letting modders with more experience manipulate the game world and everything in it.

^ "Python Language Guide (v1.0)". Google Documents List Data API v1.0. Archived from the original on 15 July 2010.
^ "Python Setup and Usage". Python Software Foundation. Archived from the original on 17 June 2020. Retrieved 10 January 2020.

^ "Immunity: Knowing You're Secure". Archived from the original on 16 February 2009.
^ "Core Security". Core Security. Archived from the original on 9 June 2020. Retrieved 10 April 2020.

^ "What is Sugar?". Sugar Labs. Archived from the original on 9 January 2009. Retrieved 11 February 2012.

^ "4.0 New Features and Fixes". LibreOffice.org. The Document Foundation. 2013. Archived from the original on 9 February 2014. Retrieved 25 February 2013.

^ "Gotchas for Python Users". boo.codehaus.org. Codehaus Foundation. Archived from the original on 11 December 2008. Retrieved 24 November 2008.

^ Esterbrook, Charles. "Acknowledgements". cobra-language.com. Cobra Language. Archived from the original on 8 February 2008. Retrieved 7 April 2010.

^ "Proposals: iterators and generators [ES4 Wiki]". wiki.ecmascript.org. Archived from the original on 20 October 2007. Retrieved 24 November 2008.

^ "Frequently asked questions". Godot Engine documentation. Archived from the original on 28 April 2021. Retrieved 10 May 2021.

^ Kincaid, Jason (10 November 2009). "Google's Go: A New Programming Language That's Python Meets C++". TechCrunch. Archived from the original on 18 January 2010. Retrieved 29 January 2010.

^ Strachan, James (29 August 2003). "Groovy – the birth of a new dynamic language for the Java platform". Archived from the original on 5 April 2007. Retrieved 11 June 2007.

^ "Modular Docs – Why Mojo". docs.modular.com. Archived from the original on 5 May 2023. Retrieved 5 May 2023. Mojo as a member of the Python family [..] Embracing Python massively simplifies our design efforts, because most of the syntax is already

efforts, because most of the syntax is already specified.  [..] we decided that the right long-term goal for Mojo is to provide a superset of Python (i.e. be compatible with existing programs) and to embrace the CPython immediately for long-tail

to embrace the CPython immediately for long-tail ecosystem enablement. To a Python programmer, we expect and hope that Mojo will be immediately familiar, while also providing new tools for developing systems-level code that enable you to do things

systems-level code that enable you to do things that Python falls back to C and C++ for.

^ Spencer, Michael (4 May 2023). "What is Mojo Programming Language?". datasciencelearningcenter.substack.com. Archived from the original on 5 May 2023. Retrieved 5 May 2023.

^ Yegulalp, Serdar (16 January 2017). "Nim language draws from best of Python, Rust, Go, and Lisp". InfoWorld. Archived from the original on 13 October 2018. Retrieved 7 June 2020. Nim's syntax is strongly reminiscent of Python's, as it uses

is strongly reminiscent of Python's, as it uses indented code blocks and some of the same syntax (such as the way if/elif/then/else blocks are constructed).

^ "An Interview with the Creator of Ruby". Linuxdevcenter.com. Archived from the original on 28 April 2018. Retrieved 3 December 2012.

^ Lattner, Chris (3 June 2014). "Chris Lattner's Homepage". Chris Lattner. Archived from the original on 22 December 2015. Retrieved 3 June 2014. I started work on the Swift Programming Language in July of 2010. I implemented much of the basic

in July of 2010. I implemented much of the basic language structure, with only a few people knowing of its existence. A few other (amazing) people started contributing in earnest late in 2011, and it became a major focus for the Apple Developer

it became a major focus for the Apple Developer Tools group in July 2013 [...] drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.

^ Jalan, Nishant Aanjaney (10 November 2022). "Programming in Kotlin". CodeX. Retrieved 29 April 2024.

^ Kupries, Andreas; Fellows, Donal K. (14 September 2000). "TIP #3: TIP Format". tcl.tk. Tcl Developer Xchange. Archived from the original on 13 July 2017. Retrieved 24 November 2008.

^ Gustafsson, Per; Niskanen, Raimo (29 January 2007). "EEP 1: EEP Purpose and Guidelines". erlang.org. Archived from the original on 15 June 2020. Retrieved 19 April 2011.

^ "Swift Evolution Process". Swift Programming Language Evolution repository on GitHub. 18 February 2020. Archived from the original on 27 April 2020. Retrieved 27 April 2020.
Sources[edit]

Sources[edit]
"Python for Artificial Intelligence". Python Wiki. 19 July 2012. Archived from the original on 1 November 2012. Retrieved 3 December 2012.

Paine, Jocelyn, ed. (August 2005). "AI in Python". AI Expert Newsletter. Amzi!. Archived from the original on 26 March 2012. Retrieved 11 February 2012.
"PyAIML 0.8.5 : Python Package Index". Pypi.python.org. Retrieved 17 July 2013.

Russell, Stuart J. & Norvig, Peter (2009). Artificial Intelligence: A Modern Approach (3rd ed.). Upper Saddle River, NJ: Prentice Hall. ISBN 978-0-13-604259-4.
Further reading[edit]

Further reading[edit]
Downey, Allen B. (May 2012). Think Python: How to Think Like a Computer Scientist (version 1.6.6 ed.). Cambridge University Press. ISBN 978-0-521-72596-5.

Hamilton, Naomi (5 August 2008). "The A-Z of Programming Languages: Python". Computerworld. Archived from the original on 29 December 2008. Retrieved 31 March 2010.

Lutz, Mark (2013). Learning Python (5th ed.). O'Reilly Media. ISBN 978-0-596-15806-4.
Summerfield, Mark (2009). Programming in Python 3 (2nd ed.). Addison-Wesley Professional. ISBN 978-0-321-68056-3.

Ramalho, Luciano (May 2022). Fluent Python. O'Reilly Media. ISBN 978-1-4920-5632-4.
External links[edit]
Python  at Wikipedia's sister projects

Python  at Wikipedia's sister projects
Media from CommonsQuotations from WikiquoteTextbooks from WikibooksResources from WikiversityData from Wikidata
Official website
vtePythonImplementations
CircuitPython
CLPython
CPython
Cython
MicroPython
Numba

CLPython
CPython
Cython
MicroPython
Numba
IronPython
Jython
Psyco
PyPy
Python for S60
Shed Skin
Stackless Python
Unladen Swallow
more...
IDEs
eric
IDLE
Ninja-IDE
PyCharm
PyDev
Spyder
more...
Topics
WSGI
ASGI
Designer
Guido van Rossum
Software (list)

ASGI
Designer
Guido van Rossum
Software (list)
Python Software Foundation
Python Conference (PyCon)
vteProgramming languages
Comparison
Timeline
History
Ada
ALGOL
Simula
APL
Assembly
BASIC
Visual Basic
classic
.NET
C
C++
C#
COBOL
Erlang
Forth

classic
.NET
C
C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Julia
Kotlin
Lisp
Lua
MATLAB
ML
Pascal
Object Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Scratch
Shell
Smalltalk
Swift
more...
Lists: Alphabetical
Categorical

Swift
more...
Lists: Alphabetical
Categorical
Generational
Non-English-based
Category
vtePython web frameworks
Bottle
CherryPy
CubicWeb
Django
FastAPI
Flask
Grok
Nevow
Pylons
Pyramid
Quixote
TACTIC
Tornado
TurboGears
TwistedWeb
web2py
Zope 2
more...

TurboGears
TwistedWeb
web2py
Zope 2
more...
vteDifferentiable computingGeneral
Differentiable programming
Information geometry
Statistical manifold
Automatic differentiation
Neuromorphic engineering
Pattern recognition
Tensor calculus

Pattern recognition
Tensor calculus
Computational learning theory
Inductive bias
Concepts
Loss functions
Regression
Bias–variance tradeoff
Double descent
Overfitting
Clustering
Gradient descent
SGD
Quasi-Newton method
Conjugate gradient descent

Quasi-Newton method
Conjugate gradient descent
Backpropagation
Attention
Convolution
Normalization
Batchnorm
Activation
Softmax
Sigmoid
Rectifier
Gating
Weight initialization
Regularization
Datasets
Augmentation
Diffusion
Autoregression
Adversary

Augmentation
Diffusion
Autoregression
Adversary
Hallucination
Applications
Machine learning
In-context learning
Artificial neural network
Deep learning
Scientific computing
Artificial Intelligence
Language model
Large language model
NMT
Hardware
IPU

Large language model
NMT
Hardware
IPU
TPU
VPU
Memristor
SpiNNaker
Software libraries
TensorFlow
PyTorch
Keras
Theano
JAX
Flux.jl
MindSpore
ImplementationsAudio–visual
AlexNet
WaveNet
Human image synthesis
HWR
OCR
Speech synthesis
Speech recognition

HWR
OCR
Speech synthesis
Speech recognition
Facial recognition
AlphaFold
Text-to-image models
Latent diffusion model
DALL-E
Midjourney
Stable Diffusion
Text-to-video models
Sora
VideoPoet
Whisper
Text
Word2vec
Seq2seq
GloVe
BERT
T5
Llama

Whisper
Text
Word2vec
Seq2seq
GloVe
BERT
T5
Llama
Chinchilla AI
PaLM
GPT
1
J
2
3
ChatGPT
4
Claude
Gemini
LaMDA
Bard
BLOOM
Project Debater
IBM Watson
IBM Watsonx
Granite
PanGu-Σ
Decisional
AlphaGo
AlphaZero
Q-learning
SARSA
OpenAI Five

AlphaGo
AlphaZero
Q-learning
SARSA
OpenAI Five
Self-driving car
MuZero
Action selection
Auto-GPT
Robot control
People
Frank Rosenblatt
Bernard Widrow
Paul Werbos
Yoshua Bengio
Alex Graves
Ian Goodfellow
Stephen Grossberg
Demis Hassabis

Ian Goodfellow
Stephen Grossberg
Demis Hassabis
Geoffrey Hinton
Yann LeCun
Fei-Fei Li
Andrew Ng
Jürgen Schmidhuber
David Silver
Ilya Sutskever
Organizations
Anthropic
EleutherAI
Google DeepMind
Hugging Face
OpenAI
Meta AI
Mila
MIT CSAIL
Huawei

Hugging Face
OpenAI
Meta AI
Mila
MIT CSAIL
Huawei
Architectures
Neural Turing machine
Differentiable neural computer
Transformer
Vision transformer (ViT)
Recurrent neural network (RNN)
Long short-term memory (LSTM)
Gated recurrent unit (GRU)

Gated recurrent unit (GRU)
Echo state network
Multilayer perceptron (MLP)
Convolutional neural network (CNN)
Residual neural network (RNN)
Highway network
Mamba
Autoencoder
Variational autoencoder (VAE)
Generative adversarial network (GAN)

Generative adversarial network (GAN)
Graph neural network (GNN)
Portals
Computer programming
Technology
Categories
Artificial neural networks
Machine learning
vteFree and open-source softwareGeneral
Alternative terms for free software

Alternative terms for free software
Comparison of open-source and closed-source software
Comparison of source-code-hosting facilities
Free software
Free software project directories
Gratis versus libre
Long-term support
Open-source software

Long-term support
Open-source software
Open-source software development
Outline
Timeline
Softwarepackages
Audio
Bioinformatics
Codecs
Configuration management
Drivers
Graphics
Wireless
Health
Mathematics
Office suites
Operating systems
Routing

Office suites
Operating systems
Routing
Television
Video games
Web applications
E-commerce
Android apps
iOS apps
Commercial
Formerly proprietary
Formerly open-source
Community
Free software movement
History
Open-source-software movement
Events

History
Open-source-software movement
Events
Advocacy
Organisations
Free Software Movement of India
Free Software Foundation
Licenses
AFL
Apache
APSL
Artistic
Beerware
BSD
Creative Commons
CDDL
EPL
Free Software Foundation
GNU GPL
GNU AGPL
GNU LGPL

GNU GPL
GNU AGPL
GNU LGPL
ISC
MIT
MPL
Python
Python Software Foundation License
Shared Source Initiative
Sleepycat
Unlicense
WTFPL
zlib
Types and standards
Comparison of licenses
Contributor License Agreement
Copyleft
Debian Free Software Guidelines

Copyleft
Debian Free Software Guidelines
Definition of Free Cultural Works
Free license
The Free Software Definition
The Open Source Definition
Open-source license
Permissive software license
Public domain
Challenges
Digital rights management

Challenges
Digital rights management
License proliferation
Mozilla software rebranding
Proprietary device drivers
Proprietary firmware
Proprietary software
SCO/Linux controversies
Software patents
Software security
Tivoization
Trusted Computing

Software security
Tivoization
Trusted Computing
Related topics
Forking
GNU Manifesto
Microsoft Open Specification Promise
Open-core model
Open-source hardware
Shared Source Initiative
Source-available software
The Cathedral and the Bazaar

The Cathedral and the Bazaar
Revolution OS
Portal
Category
vteStatistical softwarePublic domain
Dataplot
Epi Info
CSPro
X-12-ARIMA
Open-source
ADMB
DAP
gretl
JASP
JAGS
JMulTi
Julia
Jupyter (Julia, Python, R)
GNU Octave
OpenBUGS
Orange
PSPP

GNU Octave
OpenBUGS
Orange
PSPP
Python (statsmodels, PyMC3, IPython, IDLE)
R (RStudio)
SageMath
SimFiT
SOFA Statistics
Stan
XLispStat
Freeware
BV4.1
CumFreq
SegReg
XploRe
WinBUGS
CommercialCross-platform
Data Desk
GAUSS
GraphPad InStat

Data Desk
GAUSS
GraphPad InStat
GraphPad Prism
IBM SPSS Statistics
IBM SPSS Modeler
JMP
Maple
Mathcad
Mathematica
MATLAB
OxMetrics
RATS
Revolution Analytics
SAS
SmartPLS
Stata
StatView
SUDAAN
S-PLUS
TSP
World Programming System (WPS)
Windows only

TSP
World Programming System (WPS)
Windows only
BMDP
EViews
GenStat
LIMDEP
LISREL
MedCalc
Microfit
Minitab
MLwiN
NCSS
SHAZAM
SigmaStat
Statistica
StatsDirect
StatXact
SYSTAT
The Unscrambler
UNISTAT
Excel add-ons
Analyse-it
UNISTAT for Excel
XLfit

Excel add-ons
Analyse-it
UNISTAT for Excel
XLfit
RExcel
Category
Comparison
vteNumerical-analysis softwareFree
Advanced Simulation Library
ADMB
Chapel
Euler
FreeFem++
FreeMat
Genius
Gmsh
GNU Octave
gretl
Julia
Jupyter (Julia, Python, R; IPython)

gretl
Julia
Jupyter (Julia, Python, R; IPython)
MFEM
OpenFOAM
Python
R
SageMath
Salome
ScicosLab
Scilab
X10
Weka
Discontinued
Fortress
Proprietary
DADiSP
FEATool Multiphysics
GAUSS
LabVIEW
Maple
Mathcad
Mathematica
MATLAB
Speakeasy
VisSim
Comparison

Mathematica
MATLAB
Speakeasy
VisSim
Comparison
Authority control databases InternationalFASTNationalGermanyUnited StatesFranceBnF dataCzech RepublicIsraelOtherIdRef

Retrieved from "https://en.wikipedia.org/w/index.php?title=Python_(programming_language)&oldid=1250803055"

Categories: Python (programming language)Class-based programming languagesNotebook interfaceComputer science in the NetherlandsConcurrent programming languagesCross-platform free softwareCross-platform softwareDutch inventionsDynamically typed

softwareDutch inventionsDynamically typed programming languagesEducational programming languagesHigh-level programming languagesInformation technology in the NetherlandsMulti-paradigm programming languagesObject-oriented programming languagesPattern

programming languagesPattern matching programming languagesProgramming languagesProgramming languages created in 1991Scripting languagesText-oriented programming languagesHidden categories: Articles with short descriptionShort description matches

with short descriptionShort description matches WikidataUse dmy dates from November 2021Articles containing potentially dated statements from October 2024All articles containing potentially dated statementsArticles containing potentially dated

statementsArticles containing potentially dated statements from March 2024Articles containing potentially dated statements from December 2022Articles containing potentially dated statements from 2020Articles containing potentially dated statements

containing potentially dated statements from 2008Pages using Sister project links with wikidata namespace mismatchPages using Sister project links with hidden wikidataArticles with example Python (programming language) code

This page was last edited on 12 October 2024, at 16:17 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License;

additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policy
About Wikipedia
Disclaimers

Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view

Java (Programmiersprache) – Wikipedia
Java (Programmiersprache)
aus Wikipedia, der freien Enzyklopädie
Zur Navigation springen
Zur Suche springen
Java
Logo
Logo der Programmiersprache Java
Basisdaten
Paradigmen:
Objektorientierte Programmiersprache

Paradigmen:
Objektorientierte Programmiersprache
Erscheinungsjahr:
1995
Designer:
James Gosling, Sun Microsystems
Entwickler:
Sun Microsystems, Oracle[1]
Aktuelle Version
Java SE 23 (17. September 2024)
Typisierung:
stark, statisch
Beeinflusst von:

C++, C, Ada, Simula-67, Smalltalk, Objective-C, Object Pascal, Oberon, Eiffel, Modula-3, Mesa (Programmiersprache), Simula, C#, UCSD Pascal, boxing, variadische Funktion, Annotation (Java), Niklaus Wirth, Patrick Naughton, Foreach-Schleife

Beeinflusste:
Groovy, Clojure, C#, Scala, Vala, ActionScript, Seed7, Kotlin, JavaScript
Betriebssystem:
plattformunabhängig
Lizenz:
GNU General Public License[2]
www.oracle.com/java/

Java ist eine objektorientierte Programmiersprache und eine eingetragene Marke des Unternehmens Sun Microsystems, welches 2010 von Oracle übernommen wurde. Die Programmiersprache ist ein Bestandteil der Java-Technologie – diese besteht grundsätzlich

Java-Technologie – diese besteht grundsätzlich aus dem Java-Entwicklungswerkzeug (JDK) zum Erstellen von Java-Programmen und der Java-Laufzeitumgebung (JRE) zu deren Ausführung. Die Laufzeitumgebung selbst umfasst die virtuelle Maschine (JVM) und

selbst umfasst die virtuelle Maschine (JVM) und die mitgelieferten Bibliotheken. Java als Programmiersprache sollte nicht mit der Java-Technologie gleichgesetzt werden; Java-Laufzeitumgebungen führen Bytecode aus, der sowohl aus der

führen Bytecode aus, der sowohl aus der Programmiersprache Java als auch aus anderen Programmiersprachen wie Groovy, Kotlin und Scala kompiliert werden kann. Im Prinzip könnte jede Programmiersprache als Grundlage für Java-Bytecode genutzt werden,

als Grundlage für Java-Bytecode genutzt werden, für die meisten existieren aber keine passenden Bytecode-Compiler.

Die Programmiersprache Java dient innerhalb der Java-Technologie vor allem zum Formulieren von Programmen. Diese liegen zunächst als reiner, menschenverständlicher Text vor, dem sogenannten Quellcode. Dieser Quellcode ist nicht direkt ausführbar;

Dieser Quellcode ist nicht direkt ausführbar; erst der Java-Compiler, der Teil des Entwicklungswerkzeugs ist, übersetzt ihn in den maschinenverständlichen Java-Bytecode. Die Maschine, die diesen Bytecode ausführt, ist jedoch typischerweise virtuell

ausführt, ist jedoch typischerweise virtuell – das heißt, der Code wird meist nicht direkt durch Hardware (etwa einen Mikroprozessor) ausgeführt, sondern durch entsprechende Software auf der Zielplattform.

Zweck dieser Virtualisierung ist Plattformunabhängigkeit: Das Programm soll ohne weitere Änderung auf jeder Rechnerarchitektur laufen können, wenn dort eine passende Laufzeitumgebung installiert ist. Oracle selbst bietet Laufzeitumgebungen für die

Oracle selbst bietet Laufzeitumgebungen für die Betriebssysteme Linux, macOS und Windows an. Andere Hersteller lassen eigene Java-Laufzeitumgebungen für ihre Plattform zertifizieren. Auch in Autos, HiFi-Anlagen und anderen elektronischen Geräten

HiFi-Anlagen und anderen elektronischen Geräten wird Java verwendet.

Um die Ausführungsgeschwindigkeit zu erhöhen, werden Konzepte wie die Just-in-time-Kompilierung und die Hotspot-Optimierung verwendet. In Bezug auf den eigentlichen Ausführungsvorgang kann die JVM den Bytecode also interpretieren, ihn bei Bedarf

den Bytecode also interpretieren, ihn bei Bedarf jedoch auch kompilieren und optimieren.

Java ist eine der populärsten Programmiersprachen. In dem seit 2001 veröffentlichten TIOBE-Index lag Java bis 2020, konkurrierend mit C, stets auf den ersten beiden, seit 2021 mit zusätzlicher Konkurrenz von Python, auf den ersten drei Plätzen des

von Python, auf den ersten drei Plätzen des Rankings.[3][4] Nach dem RedMonk-Programmiersprachenindex 2019 liegt Java zusammen mit Python auf dem zweiten Platz nach JavaScript.[5][6]

Inhaltsverzeichnis
1 Grundkonzepte
1.1 Objektorientierung
1.1.1 Beispiel
1.1.1.1 Source-Code
1.1.1.2 Konsolenausgabe
1.2 Reflexion
1.3 Annotationen
1.4 Modulare Ausführung auf fernen Computern
2 Merkmale
3 Syntax
4 Entstehung und Weiterentwicklung

3 Syntax
4 Entstehung und Weiterentwicklung
4.1 Entstehung
4.2 Oracle und JCP
4.3 Java als freie Software
5 Unterschiede zu ähnlichen Sprachen
5.1 JavaScript
5.2 Smalltalk
5.3 C++
5.4 C# (.NET)
5.5 Scala
5.6 Kotlin
6 Anwendungsarten

5.5 Scala
5.6 Kotlin
6 Anwendungsarten
6.1 Java-Webanwendungen
6.2 Java-Desktop-Anwendungen
6.3 Java-Applets
6.4 Apps
7 Entwicklungsumgebungen
8 Compiler
8.1 Bytecode-Compiler
8.2 Native Compiler
8.3 Wrapper
9 Java User Groups
10 Konferenzen

8.3 Wrapper
9 Java User Groups
10 Konferenzen
11 Siehe auch
12 Literatur
13 Weblinks
14 Einzelnachweise
Grundkonzepte[Bearbeiten | Quelltext bearbeiten]
Der Entwurf der Programmiersprache Java strebte hauptsächlich fünf Ziele an:[7]

Sie soll eine einfache, objektorientierte, verteilte und vertraute Programmiersprache sein.
Sie soll robust und sicher sein.
Sie soll architekturneutral und portabel sein.
Sie soll sehr leistungsfähig sein.

Sie soll sehr leistungsfähig sein.
Sie soll interpretierbar, parallelisierbar und dynamisch sein.
Einfachheit

Einfachheit
Java ist im Vergleich zu anderen objektorientierten Programmiersprachen wie C++ oder C# einfach, da es einen reduzierten Sprachumfang besitzt und beispielsweise Operatorüberladung und Mehrfachvererbung nicht unterstützt.

Objektorientierung
Java gehört zu den objektorientierten Programmiersprachen.
Verteilt

Eine Reihe einfacher Möglichkeiten für Netzwerkkommunikation, von TCP/IP-Protokollen über Remote Method Invocation bis zu Webservices werden vor allem über Javas Klassenbibliothek angeboten; die Sprache Java selbst beinhaltet keine direkte

die Sprache Java selbst beinhaltet keine direkte Unterstützung für verteilte Ausführung.

Vertrautheit

Wegen der syntaktischen Nähe zu C++, der ursprünglichen Ähnlichkeit der Klassenbibliothek zu Smalltalk-Klassenbibliotheken und der Verwendung von Entwurfsmustern in der Klassenbibliothek ist der Umstieg auf Java für erfahrene Programmierer

der Umstieg auf Java für erfahrene Programmierer vergleichsweise einfach.

Robustheit

Viele der Designentscheidungen bei der Definition von Java reduzieren die Wahrscheinlichkeit ungewollter Systemfehler; Beispiele dafür sind die starke Typisierung, Garbage Collection, Ausnahmebehandlung sowie Verzicht auf Zeigerarithmetik.

Sicherheit

Dafür stehen Konzepte wie der Class-Loader, der die sichere Zuführung von Klasseninformationen zur Java Virtual Machine steuert, und Security-Manager, die sicherstellen, dass nur Zugriff auf Programmobjekte erlaubt wird, für die entsprechende Rechte

erlaubt wird, für die entsprechende Rechte vorhanden sind.

Architekturneutralität
Java wurde so entwickelt, dass dieselbe Version eines Programms prinzipiell auf einer beliebigen Computerhardware läuft, unabhängig von ihrem Prozessor oder anderen Hardwarebestandteilen.
Portabilität

Zusätzlich zur Architekturneutralität ist Java portabel. Das heißt, dass elementare Datentypen sowohl in ihrer Größe und internen Darstellung als auch in ihrem arithmetischen Verhalten standardisiert sind. Beispielsweise ist ein float immer ein IEEE

sind. Beispielsweise ist ein float immer ein IEEE 754 Float von 32 Bit Länge. Dasselbe gilt beispielsweise auch für die Klassenbibliothek, mit deren Hilfe man eine vom Betriebssystem unabhängige GUI erzeugen kann.

Leistungsfähigkeit

Java hat aufgrund der Optimierungsmöglichkeit zur Laufzeit das Potenzial, eine bessere Performance als auf Compilezeit-Optimierungen begrenzte Sprachen (C++ etc.) zu erreichen. Dem entgegen steht der Overhead durch die Java-Laufzeitumgebung, sodass

Overhead durch die Java-Laufzeitumgebung, sodass die Leistungsfähigkeit von beispielsweise C++-Programmen in einigen Kontexten übertroffen,[8][9] in anderen aber nicht erreicht wird.[10] Um Leistungsfähigkeit zu gewährleisten, kann in der Java

zu gewährleisten, kann in der Java Virtual Machine (JVM) die Performance gemessen werden.[11]

Interpretierbarkeit

Java wird in maschinenunabhängigen Bytecode kompiliert, dieser wiederum kann auf der Zielplattform interpretiert werden. Die Java Virtual Machine interpretiert Java-Bytecode, bevor sie ihn aus Performancegründen kompiliert und optimiert.

Parallelisierbarkeit

Java unterstützt Multithreading, also den parallelen Ablauf von eigenständigen Programmabschnitten. Dazu bietet die Sprache selbst die Schlüsselwörter synchronized und volatile – Konstrukte, die das „Monitor & Condition Variable Paradigma“ von

das „Monitor & Condition Variable Paradigma“ von C. A. R. Hoare[12] unterstützen. Die Klassenbibliothek enthält weitere Unterstützungen für parallele Programmierung mit Threads. Moderne JVMs bilden einen Java-Thread auf Betriebssystem-Threads ab und

Java-Thread auf Betriebssystem-Threads ab und profitieren somit von Prozessoren mit mehreren Rechenkernen.

Dynamisch

Java ist so aufgebaut, dass es sich an dynamisch ändernde Rahmenbedingungen anpassen lässt. Da die Module erst zur Laufzeit gelinkt werden, können beispielsweise Teile der Software (etwa Bibliotheken) neu ausgeliefert werden, ohne die restlichen

neu ausgeliefert werden, ohne die restlichen Programmteile anpassen zu müssen. Interfaces können als Basis für die Kommunikation zwischen zwei Modulen eingesetzt werden; die eigentliche Implementierung kann aber dynamisch und beispielsweise auch

kann aber dynamisch und beispielsweise auch während der Laufzeit geändert werden.

Objektorientierung[Bearbeiten | Quelltext bearbeiten]
Abhängigkeitsgraph der Java-Core-Klassen (erstellt mit jdeps und Gephi). In der Mitte des Diagramms sind die am häufigsten verwendeten Klassen Object und String zu sehen.

Die Grundidee der objektorientierten Programmierung ist, Daten und zugehörige Funktionen möglichst eng in einem sogenannten Objekt zusammenzufassen und nach außen hin zu kapseln (Abstraktion). Die Absicht dahinter ist, große Softwareprojekte

Die Absicht dahinter ist, große Softwareprojekte einfacher zu verwalten und die Qualität der Software zu erhöhen. Ein weiteres Ziel der Objektorientierung ist ein hoher Grad der Wiederverwendbarkeit von Softwaremodulen.

Ein neuer Aspekt von Java gegenüber den objektorientierten Programmiersprachen C++ und Smalltalk ist die explizite Unterscheidung zwischen Schnittstellen und Klassen, die durch entsprechende Schlüsselwörter interface und class ausgedrückt wird. Java

interface und class ausgedrückt wird. Java unterstützt kein Erben von mehreren unabhängigen Basisklassen (sogenannte „Mehrfachvererbung“ wie in C++ oder Eiffel), wohl aber das Implementieren einer beliebigen Zahl von Schnittstellen, womit sich viele

Zahl von Schnittstellen, womit sich viele der entsprechenden Probleme ebenfalls lösen lassen. Dabei werden Methodensignaturen und Standardimplementierungen von Methoden an die abgeleiteten Klassen weitergegeben, jedoch keine Attribute.

Java ist nicht vollständig objektorientiert, da die Grunddatentypen (int, boolean usw.) keine Objekte sind (siehe auch unter Java-Syntax). Sie werden allerdings ab Java 5 bei Bedarf automatisch und für den Programmierer transparent mittels

und für den Programmierer transparent mittels Autoboxing in die entsprechenden Objekttypen und umgekehrt umgewandelt.[13]

Beispiel[Bearbeiten | Quelltext bearbeiten]
Source-Code[Bearbeiten | Quelltext bearbeiten]
/**
* Diese Klasse ist eine allgemeine Klasse für jedes beliebige Tier und bietet
* Methoden an, die alle Tiere gemeinsam haben.
*/
public class Tier {
/**

*/
public class Tier {
/**
* Diese Methode lässt das Tier kommunizieren. Die Unterklassen dieser
* Klasse können diese Methode überschreiben und eine passende
* Implementierung für das jeweilige Tier anbieten.
*/
public void kommuniziere() {

*/
public void kommuniziere() {
// Wird von allen Unterklassen verwendet, die diese Methode nicht überschreiben.
System.out.println("Tier sagt nichts.");
}
}
/**
* Deklariert die Klasse "Hund" als Unterklasse der Klasse "Tier".

* Die Klasse "Hund" erbt damit die Felder und Methoden der Klasse "Tier".
*/
class Hund extends Tier {
/**
* Diese Methode ist in der Oberklasse "Tier" implementiert. Sie wird
* in dieser Klasse überschrieben und für die Tierart "Hund" angepasst.
*/

*/
@Override
public void kommuniziere() {
// Ruft die Implementierung dieser Methode in der Oberklasse "Tier" auf.
super.kommuniziere();
// Gibt einen Text in der Konsole aus.
System.out.println("Hund sagt: 'Wuff Wuff'");
}
}
/**

}
}
/**
* Deklariert die Klasse "Katze" als Unterklasse der Klasse "Tier".
* Die Klasse "Katze" erbt damit die Felder und Methoden der Klasse "Tier".
*/
class Katze extends Tier {
/**

*/
class Katze extends Tier {
/**
* Diese Methode ist in der Oberklasse "Tier" implementiert. Sie wird
* in dieser Klasse überschrieben und für die Tierart "Katze" angepasst.
*/
@Override
public void kommuniziere() {

*/
@Override
public void kommuniziere() {
// Ruft die Implementierung dieser Methode in der Oberklasse "Tier" auf.
super.kommuniziere();
// Gibt einen Text auf der Konsole aus.
System.out.println("Katze sagt: 'Miau'");
}
}
class Main {
/**

}
}
class Main {
/**
* Methode, die beim Programmstart aufgerufen wird.
*/
public static void main(String[] args) {
// Deklariert eine Variable für Instanzen der Klassen "Hund" und "Katze"
Tier tier;

Tier tier;
// Erstellt eine Instanz der Klasse "Hund" und speichert die Instanz in
// der Variable "tier"
tier = new Hund();
// Ruft die Methode Hund.kommuniziere() auf
tier.kommuniziere();

tier.kommuniziere();
// Erstellt eine Instanz der Klasse "Katze" und speichert die Instanz in
// der Variable "tier"
tier = new Katze();
// Ruft die Methode Katze.kommuniziere() auf
tier.kommuniziere();
}
}

tier.kommuniziere();
}
}
Konsolenausgabe[Bearbeiten | Quelltext bearbeiten]
Tier sagt nichts.
Hund sagt: 'Wuff Wuff'
Tier sagt nichts.
Katze sagt: 'Miau'
Reflexion[Bearbeiten | Quelltext bearbeiten]

Java bietet eine Reflexion-API als Bestandteil der Laufzeitumgebung. Damit ist es möglich, zur Laufzeit auf Klassen und Methoden zuzugreifen, deren Existenz oder genaue Ausprägung zur Zeit der Programmerstellung nicht bekannt war. Häufig wird diese

nicht bekannt war. Häufig wird diese Technik im Zusammenhang mit dem Entwurfsmuster Fabrikmethode (Factory Method) angewandt.

Annotationen[Bearbeiten | Quelltext bearbeiten]

Mit Java 5 hat Sun die Programmiersprache um Annotationen erweitert. Annotationen erlauben die Notation von Metadaten und ermöglichen bis zu einem gewissen Grad benutzerdefinierte Spracherweiterungen. Sinn der Annotationen ist unter anderem die

Sinn der Annotationen ist unter anderem die automatische Erzeugung von Code und anderen in der Software-Entwicklung wichtigen Dokumenten für wiederkehrende Muster anhand möglichst kurzer Hinweise im Quelltext. Bislang wurden in Java dafür

im Quelltext. Bislang wurden in Java dafür ausschließlich Javadoc-Kommentare mit speziellen JavaDoc-Tags verwendet, die von Doclets wie zum Beispiel dem XDoclet ausgewertet wurden.

Annotationen können auch in den kompilierten Class-Dateien enthalten sein. Der Quelltext wird also für ihre Verwendung nicht benötigt. Insbesondere sind die Annotationen auch über die Reflection-API zugänglich. So können sie zum Beispiel zur

zugänglich. So können sie zum Beispiel zur Erweiterung des Bean-Konzeptes verwendet werden.

Modulare Ausführung auf fernen Computern[Bearbeiten | Quelltext bearbeiten]

Java bietet die Möglichkeit, Klassen zu schreiben, die in unterschiedlichen Ausführungsumgebungen ablaufen. Beispielsweise lassen sich Applets in Webbrowsern, die Java unterstützen, ausführen. Das Sicherheitskonzept von Java kann dazu eingesetzt

Sicherheitskonzept von Java kann dazu eingesetzt werden, dass unbekannte Klassen dabei keinen Schaden anrichten können, was vor allem bei Applets wichtig ist (siehe auch Sandbox). Beispiele für in entsprechenden Ausführungsumgebungen ausführbare

entsprechenden Ausführungsumgebungen ausführbare Java-Module sind Applets, Servlets, Portlets, MIDlets, Xlets, Translets, und Enterprise JavaBeans.

Merkmale[Bearbeiten | Quelltext bearbeiten]
Duke, das Java-Maskottchen

Der Objektzugriff in Java ist VM-intern über Referenzen implementiert, die den aus C oder C++ bekannten Zeigern ähneln.[14] Die Sprachdefinition (Java Language Specification) bezeichnet sie als „Reference Values“ um deutlich zu machen, dass sie im

Values“ um deutlich zu machen, dass sie im Quelltext des jeweiligen Programms als Call by value übergeben werden.[15] Aus Sicherheitsgründen erlauben diese nicht, die tatsächliche Speicheradresse zu erkennen oder zu modifizieren. Sogenannte

zu erkennen oder zu modifizieren. Sogenannte Zeigerarithmetik ist in Java somit ausgeschlossen. Per Design kann so ein häufiger Typ von Fehlern, die in anderen Programmiersprachen auftreten, von vornherein ausgeschlossen werden.

Zusammengehörige Klassen werden in Paketen (englisch packages) zusammengefasst. Diese Pakete ermöglichen die Einschränkung der Sichtbarkeit von Klassen, eine Strukturierung von größeren Projekten sowie eine Trennung des Namensraums für verschiedene

eine Trennung des Namensraums für verschiedene Entwickler. Die Paketnamen sind hierarchisch aufgebaut und beginnen meist mit dem (umgekehrten) Internet-Domainnamen des Entwicklers, also beispielsweise com.google bei Klassenbibliotheken, die Google

com.google bei Klassenbibliotheken, die Google zur Verfügung stellt. Klassennamen müssen nur innerhalb eines Paketes eindeutig sein. Hierdurch ist es möglich, Klassen von verschiedenen Entwicklern zu kombinieren, ohne dass es zu Namenskonflikten

zu kombinieren, ohne dass es zu Namenskonflikten kommt. Die Hierarchie der Paketnamen hat allerdings keine semantische Bedeutung. Bei der Sichtbarkeit zwischen den Klassen zweier Pakete spielt es keine Rolle, wo sich die Pakete in der

spielt es keine Rolle, wo sich die Pakete in der Namenshierarchie befinden. Klassen sind entweder nur für Klassen des eigenen Paketes sichtbar oder für alle Pakete.

Weiter unterstützt die Sprache Threads (nebenläufig ablaufende Programmteile) und Ausnahmen (englisch exception). Java beinhaltet auch eine automatische Speicherbereinigung (englisch garbage collector), die nicht (mehr) referenzierte Objekte aus dem

die nicht (mehr) referenzierte Objekte aus dem Speicher entfernt.

Java unterscheidet explizit zwischen Schnittstellen und Klassen. Eine Klasse kann beliebig viele Schnittstellen implementieren, hat aber stets genau eine Basisklasse. Java unterstützt kein direktes Erben von mehreren Klassen („Mehrfachvererbung“),

Erben von mehreren Klassen („Mehrfachvererbung“), jedoch die Vererbung über mehrere Hierarchie-Ebenen (Klasse Kind erbt von Klasse Vater, die ihrerseits von Klasse Großvater erbt usw.). Je nach Sichtbarkeit (public, protected,

usw.). Je nach Sichtbarkeit (public, protected, default/package-private, private) erbt die Klasse Methoden und Attribute (auch Felder genannt) von ihren Klassenvorfahren. Alle Klassen sind – direkt oder indirekt – von der Wurzelklasse Object

oder indirekt – von der Wurzelklasse Object abgeleitet.

Zu Java gehört eine umfangreiche Klassenbibliothek. Dem Programmierer wird damit eine einheitliche, vom zugrundeliegenden Betriebssystem unabhängige Schnittstelle (Application programming interface, API) angeboten.

Mit Java 2 wurden die Java Foundation Classes (JFC) eingeführt, die unter anderem Swing bereitstellen, das zur Erzeugung plattformunabhängiger grafischer Benutzerschnittstellen (GUI) dient und auf dem Abstract Window Toolkit basiert.

Syntax[Bearbeiten | Quelltext bearbeiten]
→ Hauptartikel: Java-Syntax

Syntax/Grammatik und Semantik von Java sind in der Java Language Specification (Java-Sprachspezifikation) von Sun Microsystems dokumentiert. Das folgende Beispielprogramm gibt die unter Programmierern klassische Meldung „Hallo Welt!“, gefolgt von

klassische Meldung „Hallo Welt!“, gefolgt von einem Zeilenumbruch, auf dem Ausgabemedium aus.

public class HalloWelt {
public static void main(String[] args) {
System.out.println("Hallo Welt!");
}
}
Entstehung und Weiterentwicklung[Bearbeiten | Quelltext bearbeiten]
Entstehung[Bearbeiten | Quelltext bearbeiten]

Entstehung[Bearbeiten | Quelltext bearbeiten]
Herkunft und Entwicklung der Programmiersprache Java sowie mit ihr verwandter Technik sind im Artikel Java-Technologie beschrieben sowie wann welche Version veröffentlicht wurde.

Oracle und JCP[Bearbeiten | Quelltext bearbeiten]

Neben Oracle kümmert sich eine Vielzahl von Einzelpersonen, kleiner und großer Unternehmen, wie Apple, IBM, Hewlett-Packard und Siemens beim Java Community Process (JCP) unter anderem um die Weiterentwicklung der Java-Sprachspezifikation. Der JCP

der Java-Sprachspezifikation. Der JCP wurde 1998 von Sun Microsystems ins Leben gerufen.

Java als freie Software[Bearbeiten | Quelltext bearbeiten]

Sun hatte zugesichert, sein JDK unter der GNU General Public License zu veröffentlichen; mit der Übernahme durch Oracle wurde auch die offene Lizenzierung übernommen. Am 13. November 2006 wurden bereits mit dem Compiler javac und der Hotspot Virtual

mit dem Compiler javac und der Hotspot Virtual Machine erste Teile als Open Source veröffentlicht. Zudem wurde mit OpenJDK eine Community-Seite eröffnet, mit deren Hilfe die Entwicklung koordiniert werden soll.[16] Am 8. Mai 2007 folgten dann große

soll.[16] Am 8. Mai 2007 folgten dann große Teile des „Java-SE“-Quellcodes zum Erstellen eines JDK. Eine Ausnahme stellte solcher Code dar, für den Sun nicht die nötigen Rechte besaß, um ihn freizugeben. Dieser liegt somit nur in kompilierter Form

Dieser liegt somit nur in kompilierter Form vor.[17] Ebenfalls kündigte Sun an, dass Entwicklungen auf Grundlage des OpenJDK das „Java Compatible“-Logo führen dürfen, wenn sie nach dem „Java Compatibility Kit“ (JCK) zertifiziert sind.

Zuvor wurde der Quelltext von Java unter anderem bei jedem JDK mitgeliefert und ermöglichte so zwar Einsicht, er durfte aber nicht beliebig modifiziert werden. Deswegen gibt es neben den offiziellen JCP auch diverse unabhängige Vereinigungen, die es

auch diverse unabhängige Vereinigungen, die es sich zum Ziel gesetzt haben, ein unter eine freie Open-Source-Lizenz gestelltes Java bereitzustellen. Die bekanntesten dieser Projekte waren Apache Harmony, Kaffe und das GNU-Classpath-Projekt.

Harmony, Kaffe und das GNU-Classpath-Projekt. Gegenwärtig gibt es neben OpenJDK noch eine weitere große Implementierung, die aktuelle Java Releases veröffentlicht, Eclipse OpenJ9. Diese JVM-Implementierung wurde von IBM an die Eclipse Foundation

wurde von IBM an die Eclipse Foundation übergeben.[18] OpenJ9 steht mehrfachlizenziert unter EPL 2.0, Apache 2.0 und GNU 2.0 with Classpath Exception.[19]

Unterschiede zu ähnlichen Sprachen[Bearbeiten | Quelltext bearbeiten]

Darüber hinaus bietet Java die Möglichkeit, aus Java-Code heraus verschiedene Skriptsprachen auszuführen. Ebenfalls gibt es eine Reihe an Programmiersprachen, die nach Java-Bytecode kompiliert werden. Damit lassen sich Programmteile auch in anderen

Damit lassen sich Programmteile auch in anderen Programmiersprachen umsetzen.

Mit JDK Version 7, das am 28. Juli 2011 erschienen ist,[20] wurde auch die Unterstützung für dynamische „Fremdsprachen“ durch die Virtual Machine verbessert.[21]
JavaScript[Bearbeiten | Quelltext bearbeiten]

Java darf nicht mit der Skriptsprache JavaScript verwechselt werden. JavaScript wurde von Netscape Communications entwickelt, hieß früher LiveScript und wurde im Zuge einer Kooperation zwischen Netscape und Sun Microsystems in JavaScript

Netscape und Sun Microsystems in JavaScript umbenannt.[22]

JavaScript ist eine dynamisch typisierte, objektbasierte, aber, bis ECMAScript 2015, klassenlose Skriptsprache mit einer ähnlichen Syntax wie C, Perl oder Java, unterscheidet sich jedoch in vielerlei Hinsicht von Java. Trotz der Ähnlichkeit der

Hinsicht von Java. Trotz der Ähnlichkeit der Namen der beiden Programmiersprachen unterscheidet sich Java stärker von JavaScript als zum Beispiel von C++ oder C#. JavaScript wurde ursprünglich vornehmlich in HTML-Seiten zur eingebetteten

vornehmlich in HTML-Seiten zur eingebetteten Programmierung verwendet, um interaktive Webapplikationen zu ermöglichen. Mittlerweile wird JavaScript auf der Laufzeitumgebung Node.js zunehmend auch für Server-Applikationen genutzt.

Smalltalk[Bearbeiten | Quelltext bearbeiten]

Smalltalk ist eine der ältesten objektorientierten Programmiersprachen überhaupt. Java erbt von Smalltalk die grundsätzliche Konzeption eines Klassenbaumes, in den alle Klassen eingehängt werden. Dabei stammen alle Klassen entweder direkt oder

Dabei stammen alle Klassen entweder direkt oder indirekt von der Klasse java.lang.Object ab. Außerdem wurden die Konzepte der automatischen Speicherbereinigung (garbage collector) und der virtuellen Maschine übernommen sowie eine Vielzahl weiterer

Maschine übernommen sowie eine Vielzahl weiterer Merkmale der Sprache Smalltalk.

Smalltalk kennt jedoch keine primitiven Datentypen wie zum Beispiel int – selbst eine einfache Zahl ist ein Objekt. Dieses Konzept wurde nicht nach Java übernommen, primitive Datentypen werden aber ab Java 5 mittels Autoboxing bei Bedarf in die

ab Java 5 mittels Autoboxing bei Bedarf in die entsprechenden Objekttypen und umgekehrt umgewandelt.[13]

C++[Bearbeiten | Quelltext bearbeiten]

Java lehnt seine Syntax an die der Programmiersprache C++ an. Im Gegensatz zu C++ fanden jedoch Mehrfachvererbung oder Zeigerarithmetik keinen Einzug. Klassen können nur eine Superklasse haben (Einfachvererbung), aber eine beliebige Anzahl von

aber eine beliebige Anzahl von Interfaces implementieren. Interfaces entsprechen abstrakten Klassen in C++, die keine Attribute oder konkrete Methoden besitzen, werden allerdings konzeptionell anders als die auch in Java möglichen abstrakten Klassen

als die auch in Java möglichen abstrakten Klassen verwendet. Die interne Speicherverwaltung wird dem Java-Entwickler weitgehend abgenommen; dies erledigt die automatische Speicherbereinigung. Allerdings garantiert auch dieser Mechanismus nicht den

garantiert auch dieser Mechanismus nicht den vollständigen Ausschluss von Speicherlecks. Letztlich muss der Programmierer dafür sorgen, dass nicht mehr verwendete Objekte von keinem laufenden Thread mehr referenziert werden. Einander referenzierende

referenziert werden. Einander referenzierende Objekte, die von keinem Thread aus mehr über Referenzen erreichbar sind, werden ebenfalls freigegeben, wobei es dem Garbage Collector (GC) obliegt, wann und ob überhaupt diese Objekte freigegeben werden.

ob überhaupt diese Objekte freigegeben werden. Jede Objektklasse besitzt zusätzlich eine Methode namens finalize(), die vom Garbage Collector aufgerufen werden kann, um zusätzliche „Aufräumarbeiten“ durchzuführen. Es gibt jedoch keine Garantie, wann

Es gibt jedoch keine Garantie, wann und ob dies geschieht. Sie ist daher nicht mit einem Destruktor aus C++ vergleichbar.

Neben Mehrfachvererbung und Speicherarithmetik wurden bei der Entwicklung von Java noch weitere Konstrukte der Sprache C++ bewusst weggelassen:

Im Gegensatz zu C++ ist es in Java nicht möglich, Operatoren (zum Beispiel arithmetische Operatoren wie + und -, logische Operatoren wie && und ||, oder den Index-Operator []) zu überladen, das heißt in einem bestimmten Kontext mit neuer Bedeutung

in einem bestimmten Kontext mit neuer Bedeutung zu versehen. Dies sorgt einerseits für eine Vereinfachung der Sprache an sich und verhindert, dass Quellcodes mit Operatoren, die mit schwer nachvollziehbarer Semantik überladen werden, unleserlich

Semantik überladen werden, unleserlich gemacht werden. Andererseits würden benutzerdefinierte Typen mit überladenen Operatoren in C++ eher wie eingebaute Typen erscheinen können – vor allem numerischer Code wäre so mitunter einfacher

allem numerischer Code wäre so mitunter einfacher nachzuvollziehen. Die Sprachdefinition von Java definiert jedoch typabhängiges Verhalten der Operatoren + (Addition bei arithmetischen Operanden, andernfalls zur Verkettung von Zeichenketten „string

zur Verkettung von Zeichenketten „string concatenation“) sowie &, | und ^ (logisch für boolean und bitweise für arithmetische Operanden). Das lässt diese Operatoren zumindest wie teilweise überladene Operatoren erscheinen.

Das C++-Konstrukt der Templates, die es erlauben, Algorithmen oder sogar ganze Klassen unabhängig von den darin verwendeten Datentypen zu definieren, wurde in Java nicht übernommen. Ab Version 5 unterstützt Java aber sogenannte Generics, die zwar

Java aber sogenannte Generics, die zwar keinerlei Metaprogrammierung erlauben, aber ähnlich wie C++-Templates typsichere Container und ähnliches ermöglichen.

In Java wurde das Schlüsselwort const reserviert, hat aber keine Funktion. Die Alternative zu const (und Präprozessor-Direktiven) ist final. Im Gegensatz zu const wird final in einer Methodensignatur nicht vererbt und hat somit nur im aktuellen

nicht vererbt und hat somit nur im aktuellen Scope Gültigkeit. Den final-Modifikator kann eine Klasse (die dadurch nicht mehr abgeleitet werden kann), ein Attribut (dessen Wert so nur einmal gesetzt werden kann) oder eine Methode (die dadurch

werden kann) oder eine Methode (die dadurch unüberschreibbar wird) besitzen.

C# (.NET)[Bearbeiten | Quelltext bearbeiten]

Die .NET-Plattform von Microsoft kann als Konkurrenzprodukt zu Java gesehen werden. Mit der Spezifikation von C# hat Microsoft im Rahmen seiner .NET-Strategie versucht, den Spagat zwischen der Schaffung einer neuen Sprache und der leichten

Schaffung einer neuen Sprache und der leichten Integration bestehender Komponenten zu schaffen.

Konzeptionelle Unterschiede zu Java bestehen insbesondere in der Umsetzung von Callback-Mechanismen. In .NET ist hierzu die Unterstützung von Delegaten (englisch delegates) implementiert, einem Konzept, das mit Funktionszeigern vergleichbar ist. In

das mit Funktionszeigern vergleichbar ist. In Java kann dies über Methodenreferenzen oder Lambdaausdrücke erreicht werden.

Des Weiteren unterstützen .NET-Sprachen sogenannte Attribute (attributes), die es erlauben, die Funktionalität der Sprache über Metadaten im Code zu erweitern (eine ähnliche Funktionalität wurde in Form der oben beschriebenen Annotations in Java 5.0

der oben beschriebenen Annotations in Java 5.0 übernommen).

C# enthält auch Bestandteile der Sprache Visual Basic, zum Beispiel Eigenschaften (properties), sowie Konzepte aus C++.

In .NET ist es ebenso wie in Java möglich, Ausnahmen (exceptions) zu einer Methode zu deklarieren. In Java können Ausnahmen so deklariert werden, dass sie auch verarbeitet werden müssen (Checked Exception).

Windows Systembefehle (Win-ABI-Aufrufe) können in .NET über platform invoke oder mittels C++/CLI aufgerufen werden. Das ist in Java nicht möglich, es besteht mit dem Java Native Interface aber die Möglichkeit, C- und C++-Code per DLL direkt zu

Möglichkeit, C- und C++-Code per DLL direkt zu referenzieren und außerhalb der Java Virtual Machine ausführen zu lassen.

Scala[Bearbeiten | Quelltext bearbeiten]
Scala ist eine Programmiersprache, die objektorientierte und funktionale Paradigmen vereint und wie Java auf der Java Virtual Machine ausgeführt werden kann.

Im Gegensatz zu Java, und ähnlich wie C#, ist das Typsystem vereinheitlicht und umfasst Referenz- und Werttypen. Benutzer können weitere Typen definieren – in Java sind die verfügbaren Werttypen auf die fest vordefinierten primitiven Typen (int,

die fest vordefinierten primitiven Typen (int, long, …) beschränkt.

Scala verwendet statt Schnittstellen (interface) sogenannte Traits (traits), die wiederverwendbare Methodenimplementierungen enthalten können.

Weitere Funktionalität, die nicht in Java enthalten ist, umfasst unter anderem Typen und Funktionen höherer Ordnung, Pattern Matching und frei wählbare Methoden- und Klassennamen.

Wie in C# gibt es keine checked exceptions. Allerdings können Methoden mit einer @throws-Annotation versehen werden. Scala entfernt unter anderem das Konzept statischer Methoden und Klassen (ersetzt durch companion objects), Raw Types, die

(ersetzt durch companion objects), Raw Types, die Notwendigkeit von Getter- und Settermethoden und die unsichere Varianz von Arrays.

Die Varianz generischer Typen muss nicht wie in Java bei der Nutzung erfolgen (use-site variance), sondern kann direkt bei der Deklaration angegeben werden (declaration-site variance).
Kotlin[Bearbeiten | Quelltext bearbeiten]

Kotlin ist eine plattformübergreifende, statisch typisierte Programmiersprache, die in Bytecode für die Java Virtual Machine (JVM) übersetzt wird, aber auch in JavaScript-Quellcode oder (mittels LLVM) in Maschinencode umgewandelt werden kann.

Anders als in Java wird bei Kotlin der Datentyp einer Variable nicht vor dem Variablennamen, sondern danach, abgetrennt durch einen Doppelpunkt, notiert. Allerdings unterstützt Kotlin auch Typinferenz, sodass der Typ oft auch weggelassen werden

sodass der Typ oft auch weggelassen werden kann, wenn er aus dem Zusammenhang klar ist. Als Anweisungsende genügt der Zeilenumbruch, optional kann jedoch auch ein Semikolon verwendet werden.[23] Zusätzlich zu Klassen und Methoden (in Kotlin: member

zu Klassen und Methoden (in Kotlin: member functions) aus der objektorientierten Programmierung unterstützt Kotlin prozedurale Programmierung unter Verwendung von Funktionen sowie bestimmte Aspekte der funktionalen Programmierung.[24] Als

Aspekte der funktionalen Programmierung.[24] Als Einstiegspunkt dient wie bei C u. ä. eine main-Funktion.

Kotlin lässt sich außerdem zur Entwicklung von Android-Apps verwenden und wird dafür seit 2017 offiziell von Google unterstützt.[25] Seit Mai 2019 ist Kotlin die von Google bevorzugte Sprache für Android-Appentwicklung.[26]

Anwendungsarten[Bearbeiten | Quelltext bearbeiten]
→ Hauptartikel: Java-Anwendung
Mit Java können zahlreiche verschiedene Arten von Anwendungen erstellt werden.
Java-Webanwendungen[Bearbeiten | Quelltext bearbeiten]

Java-Webanwendungen sind Java-Programme, die auf einem Webserver geladen und gestartet werden und beim Benutzer in einem Webbrowser ablaufen bzw. dargestellt werden. Üblicherweise läuft ein Teil der Webanwendung auf dem Server (die Geschäftslogik

Webanwendung auf dem Server (die Geschäftslogik und Persistenz) und ein anderer Teil am Webbrowser (die Logik der grafischen Benutzeroberfläche). Der Serverteil wird üblicherweise vollständig in Java geschrieben, der Browserteil üblicherweise in

geschrieben, der Browserteil üblicherweise in HTML und JavaScript. Es ist jedoch auch möglich, Java-Webanwendungen inklusive GUI-Logik vollständig in Java zu schreiben (siehe z. B. Google Web Toolkit oder die Remote Application Platform). Bekannte

oder die Remote Application Platform). Bekannte Beispiele für Java-Webanwendungen sind Twitter,[27] Jira, Jenkins oder Gmail (das nicht vollständig, aber zu großen Teilen in Java geschrieben ist).

Java-Desktop-Anwendungen[Bearbeiten | Quelltext bearbeiten]

Unter Desktop-Anwendungen oder Applikationen werden normale Desktop-Programme zusammengefasst. Sowohl Internet-Kommunikationsprogramme als auch Spiele oder Office-Anwendungen, die auf einem normalen PC laufen, werden so genannt. Bekannte Beispiele

PC laufen, werden so genannt. Bekannte Beispiele für Java-Desktop-Anwendungen sind die integrierte Entwicklungsumgebung Eclipse, das Filesharing-Programm Vuze oder das Computerspiel Minecraft.

Java-Applets[Bearbeiten | Quelltext bearbeiten]

Java-Applets sind Java-Anwendungen, die normalerweise in einem Webbrowser ausgeführt werden. Sie sind üblicherweise auf einen durch ein spezielles HTML-Tag definierten Bereich einer Webseite beschränkt. Voraussetzung für die Ausführung von

beschränkt. Voraussetzung für die Ausführung von Java-Applets ist ein Java-fähiger Browser. Diese Anwendungsform wird seit Java 11 nicht mehr unterstützt, nachdem sie bereits in Java 9 als „veraltet“ gekennzeichnet wurde.[28][29][30][31]

Apps[Bearbeiten | Quelltext bearbeiten]

Apps sind kleinere Applikationen für mobile Geräte wie Handys, Smartphones, PDAs oder Tablets. Sie laufen üblicherweise auf speziellen, für die Ausführung von Java-Anwendungen auf mobilen Geräten optimierten Java-Plattformen wie Java ME.

Apps für das Android-Betriebssystem von Google werden in der hier beschriebenen Sprache Java programmiert, basieren aber auf einer abweichenden Klassenbibliotheks-API.
Entwicklungsumgebungen[Bearbeiten | Quelltext bearbeiten]

Es gibt eine große Vielfalt von Entwicklungsumgebungen für Java, sowohl proprietäre als auch freie (Open Source). Die meisten Entwicklungsumgebungen für Java sind selbst ebenfalls in Java geschrieben.

Die bekanntesten Open-Source-Umgebungen sind das von der Eclipse Foundation bereitgestellte Eclipse und das von Sun entwickelte NetBeans.

Unter den kommerziellen Entwicklungsumgebungen sind IntelliJ IDEA von JetBrains (welches in der Community Edition[32] jedoch Freie Software ist), JBuilder von Borland sowie JCreator und das auf NetBeans basierende Sun ONE Studio von Sun, am

NetBeans basierende Sun ONE Studio von Sun, am verbreitetsten. Außerdem gibt es noch eine um einige hundert Plugins erweiterte Version von Eclipse, die von IBM unter dem Namen WebSphere Studio Application Developer („WSAD“) vertrieben wurde und ab

Developer („WSAD“) vertrieben wurde und ab Version 6.0 Rational Application Developer („RAD“) heißt.

Apple liefert mit macOS ab Version 10.3 die Entwicklungsumgebung Xcode aus, die verschiedene Programmiersprachen unterstützt, allerdings einen Schwerpunkt auf C, C++, Objective-C und Swift setzt.[33][34]

Für das Programmieren von Android-Apps mit Java empfiehlt sich Android Studio.

Für Einsteiger und Ausbildungszwecke konzipiert ist die IDE BlueJ, wo unter anderem die Beziehungen zwischen den verschiedenen Klassen grafisch in Form von Klassendiagrammen dargestellt werden.

Sehr viele Texteditoren bieten Unterstützung für Java, darunter Emacs, jEdit, Atom, Visual Studio Code, Vim, Geany, Jed, Notepad++ und TextPad.
Compiler[Bearbeiten | Quelltext bearbeiten]

Ein Java-Compiler übersetzt Java-Quellcode (Dateiendung „.java“) in einen ausführbaren Code. Grundsätzlich unterscheidet man zwischen Bytecode- und Nativecode-Compilern. Einige Java-Laufzeitumgebungen verwenden einen JIT-Compiler, um zur Laufzeit

verwenden einen JIT-Compiler, um zur Laufzeit den Bytecode häufig genutzter Programmteile in nativen Maschinencode zu übersetzen.

Bytecode-Compiler[Bearbeiten | Quelltext bearbeiten]

Im Normalfall übersetzt der Java-Compiler die Programme in einen nicht direkt ausführbaren Bytecode (Dateiendung „.class“), den die Java Runtime Environment (JRE) später ausführt. Die aktuelle HotSpot-Technologie kompiliert den Bytecode zur Laufzeit

kompiliert den Bytecode zur Laufzeit in nativen Prozessorcode und optimiert diesen abhängig von der verwendeten Plattform. Diese Optimierung findet dabei nach und nach statt, sodass der Effekt auftritt, dass Programmteile nach mehrmaliger

auftritt, dass Programmteile nach mehrmaliger Abarbeitung schneller werden. Andererseits führt diese Technik, die ein Nachfolger der Just-in-time-Kompilierung ist, dazu, dass Java-Bytecode theoretisch genauso schnell wie native, kompilierte

genauso schnell wie native, kompilierte Programme ausgeführt werden könnte.

Die HotSpot-Technik ist seit der JRE Version 1.3 verfügbar und wurde seitdem stetig weiter verbessert.
Beispiele für Bytecode-Compiler sind javac (Teil des JDK) und war Jikes (eingestellt, Funktionsumfang bis Java SE 5) von IBM.

Native Compiler[Bearbeiten | Quelltext bearbeiten]

Es existieren auch Compiler für Java, die Java-Quelltexte oder Java-Bytecode in „normalen“ Maschinencode übersetzen können, sogenannte Ahead-of-time-Compiler. Nativ kompilierte Programme haben den Vorteil, keine JavaVM mehr zu benötigen, aber auch

keine JavaVM mehr zu benötigen, aber auch den Nachteil, nicht mehr plattformunabhängig zu sein.

Beispiele für native Java Compiler waren Excelsior JET (eingestellt, bis Java SE 7), sowie GNU Compiler for Java (GCJ, eingestellt, bis J2SE 5.0) wie MinGW, Cygwin oder JavaNativeCompiler (JNC).
Wrapper[Bearbeiten | Quelltext bearbeiten]

Wrapper[Bearbeiten | Quelltext bearbeiten]
→ Hauptartikel: Wrapper (Software)

Als weitere Möglichkeit kann das Java-Programm in ein anderes Programm „eingepackt“ (englisch to wrap) werden; diese äußere Hülle dient dann als Ersatz für ein Java-Archiv. Sie sucht selbständig nach einer installierten Java-Laufzeitumgebung, um das

einer installierten Java-Laufzeitumgebung, um das eigentliche Programm zu starten, und informiert den Benutzer darüber, wo er eine Laufzeitumgebung herunterladen kann, sofern noch keine installiert ist. Es ist also immer noch eine Laufzeitumgebung

ist. Es ist also immer noch eine Laufzeitumgebung nötig, um das Programm starten zu können, aber der Anwender erhält eine verständliche Fehlermeldung, die ihm weiterhilft.

Java Web Start ist ein etwas eleganterer und standardisierter Ansatz für diese Lösung – er ermöglicht die einfache Aktivierung von Anwendungen mit einem einzigen Mausklick und garantiert, dass immer die neueste Version der Anwendung ausgeführt wird.

neueste Version der Anwendung ausgeführt wird. Dadurch werden komplizierte Installations- oder Aktualisierungsprozeduren automatisiert.

Beispiele für Java-Wrapper sind JSmooth oder Launch4J. JBuilder von Borland und NSIS sind ebenfalls in der Lage, einen Wrapper für Windows zu erstellen.
Java User Groups[Bearbeiten | Quelltext bearbeiten]

Sowohl international als auch in Deutschland gibt es Java User Groups (JUG). Der Zweck dieser Vereinigungen an Java-Anwendern ist freier Informationsaustausch.
Konferenzen[Bearbeiten | Quelltext bearbeiten]

Konferenzen[Bearbeiten | Quelltext bearbeiten]
Wichtige deutschsprachige Konferenzen rund um Java sind:
JAX
Java-Tage
JavaLand
Internationale Konferenzen mit dem Schwerpunkt Java:
JavaOne
Siehe auch[Bearbeiten | Quelltext bearbeiten]
Visual J++

Visual J++
Literatur[Bearbeiten | Quelltext bearbeiten]
Christian Ullenboom: Java ist auch eine Insel. Galileo Computing, 13. Auflage 2017, ISBN 978-3-8362-4119-9.

Guido Krüger, Heiko Hansen: Java-Programmierung. Das Handbuch zu Java 8. O’Reilly, 8. Auflage 2014, ISBN 978-3-95561-514-7.
Christian Ullenboom: Java 7 – Mehr als eine Insel. Galileo Computing, 1. Auflage 2011, ISBN 978-3-8362-1507-7.

Florian Siebler: Einführung in Java mit BlueJ. Galileo Computing, 1. Auflage 2011, ISBN 978-3-8362-1630-2.
Dirk Louis, Peter Müller: Java 7 – Das Handbuch, Markt & Technik, 1. Auflage 2011, ISBN 978-3-8272-4353-9.

James Gosling, Bill Joy, Guy Steele, Gilad Bracha: The Java Language Specification, Addison-Wesley, 3. Auflage 2005, ISBN 0-321-24678-0, (Online).

Michael Bonacina: Java Programmieren für Einsteiger, BMU Verlag, 2. Auflage 2018, ISBN 978-3-96645-003-4.
Weblinks[Bearbeiten | Quelltext bearbeiten]
Wikiversity: Java (Programmiersprache) – Kursmaterialien

Commons: Java (programming language) – Sammlung von Bildern, Videos und Audiodateien
Java-Homepage bei Oracle (englisch)
Einzelnachweise[Bearbeiten | Quelltext bearbeiten]
↑ www.oracle.com.
↑ www.lemondeinformatique.fr.

↑ Robert McMillan: Is Java Losing Its Mojo? wired.com, 1. August 2013, abgerufen am 29. September 2018 (englisch): „Java is on the wane, at least according to one outfit that keeps on eye on the ever-changing world of computer programming languages.

world of computer programming languages. For more than a decade, it has dominated the Tiobe Programming Community Index – a snapshot of software developer enthusiasm that looks at things like internet search results to measure how much buzz

internet search results to measure how much buzz different languages have. But lately, Java has been slipping.“

↑ TIOBE Programming Community Index. tiobe.com, 2015, abgerufen am 3. April 2015 (englisch).

↑ Stephen O’Grady: The RedMonk Programming Language Rankings: January 2020. In: tecosystems. RedMonk, 28. Februar 2020, abgerufen am 5. März 2020 (amerikanisches Englisch).

↑ Silke Hahn: Python schreibt Geschichte: Platz 2 im Programmiersprachen-Ranking. heise online, 3. März 2020, abgerufen am 5. März 2020.
↑ The Java Language: An Overview. 1995 Sun Whitepaper
↑

↑
Hajo Schulz: Daniel Düsentrieb, C#, Java, C++ und Delphi im Effizienztest. Teil 1. In: c’t. Nr. 19. Heise Zeitschriften Verlag, Hannover 2003, S. 204–207 (heise.de [abgerufen am 21. Oktober 2010]).

Hajo Schulz: Daniel Düsentrieb, C#, Java, C++ und Delphi im Effizienztest. Teil 2. In: c’t. Nr. 21. Heise Zeitschriften Verlag, Hannover 2003, S. 222–227 (heise.de [abgerufen am 21. Oktober 2010]).

↑ J.P.Lewis, Ulrich Neumann: Java pulling ahead? Performance of Java versus C++. Computer Graphics and Immersive Technology Lab, University of Southern California, Januar 2003, abgerufen am 21. Oktober 2010 (englisch): „This article surveys a number

2010 (englisch): „This article surveys a number of benchmarks and finds that Java performance on numerical code is comparable to that of C++, with hints that Java’s relative performance is continuing to improve.“

↑ Robert Hundt: Loop Recognition in C++/Java/Go/Scala. Hrsg.: Scala Days 2011. Stanford CA 27. April 2011 (englisch, scala-lang.org [PDF; 318 kB; abgerufen am 17. November 2012]): We find that in regards to performance, C++ wins out by a large

regards to performance, C++ wins out by a large margin. […] The Java version was probably the simplest to implement, but the hardest to analyze for performance. Specifically the effects around garbage collection were complicated and very hard to

collection were complicated and very hard to tune

↑ David Georg Reichelt: Java pulling ahead? JVM Performance-Regressionen frühzeitig erkennen und vermeiden. Informatik Aktuell, Alkmene Verlag, 4. Februar 2022, abgerufen am 6. Februar 2022: „Im JVM-Umfeld ist vor allem JMH zur Definition von

JVM-Umfeld ist vor allem JMH zur Definition von Benchmarks verbreitet. Die regelmäßige Ausführung von JMH-Benchmarks wird aus Ressourcengründen aber nur selten durchgeführt. Statt immer alle Regressions-Benchmarks oder -Tests auszuführen, ist es

oder -Tests auszuführen, ist es viel schneller, nur diejenigen auszuführen, bei denen eine Regression möglich ist. Daher ermöglicht das Jenkins-Plugin Peass-CI die Automatisierung der Regressions-Testselektion für JMH, so dass in der aktuellen

für JMH, so dass in der aktuellen Version nur noch für diese Version relevante Workloads getestet werden.“

↑ C. A. R. Hoare: Monitors: an operating system structuring concept. (PDF) In: Communications of the ACM, 17, Nr. 10, 1974, S. 549–557 doi:10.1145/355620.361161
↑ a b Autoboxing in Java (englisch)

↑ a b Autoboxing in Java (englisch)
↑ Scott Stanchfield: Java is Pass-by-Value, Dammit! JavaDude.com, archiviert vom Original (nicht mehr online verfügbar) am 15. Mai 2008; abgerufen am 5. November 2010 (englisch).

↑ 4.1. The Kinds of Types and Values. In: Java Language Specification. Oracle Inc., abgerufen am 24. September 2016 (englisch).
↑ Community-Seite zur Entwicklung des Open-Source-JDKs von Sun

↑ Sun Microsystems Presseankündigung vom 8. Mai 2007 (Memento vom 11. Mai 2008 im Internet Archive) (englisch)
↑ Java: IBM überträgt die JVM J9 an die Eclipse Foundation. In: heise online. Abgerufen am 24. September 2019.

↑ eclipse openj9 license. Eclipse Foundation, 1. August 2018, abgerufen am 24. September 2019.
↑ Roadmap JDK 7 (englisch)
↑ JDK 7 Features – JSR 292: VM support for non-Java languages (InvokeDynamic) (englisch)

↑ Brendan Eich: JavaScript at Ten Years (Memento vom 28. Mai 2007 im Internet Archive) (MS PowerPoint; 576 kB).
↑ Semicolons. jetbrains.com, abgerufen am 8. Februar 2014.
↑ functions. jetbrains.com, abgerufen am 8. Februar 2014.

↑ Maxim Shafirov: Kotlin on Android. Now official. In: Kotlin Blog. 17. Mai 2017, abgerufen am 18. Juni 2019 (amerikanisches Englisch).
↑ Google I/O: Googles Bekenntnis zu Kotlin. In: heise online. Abgerufen am 18. Juni 2019.
↑ developer.ibm.com

↑ developer.ibm.com
↑ Deprecated APIs, Features, and Options. Abgerufen am 14. September 2019.
↑ JEP 289: Deprecate the Applet API. Abgerufen am 14. September 2019.
↑ Dalibor Topic: Moving to a Plugin-Free Web. Abgerufen am 14. September 2019.

↑ Aurelio Garcia-Ribeyro: Further Updates to 'Moving to a Plugin-Free Web'. Abgerufen am 14. September 2019.
↑ JetBrains Community Edition auf GitHub
↑ Apple Xcode Features
↑ Swift for XCode
Dieser Artikel ist als Audiodatei verfügbar:
|
Speichern |

|
Speichern |
24:49 min |
28 MB |
Text der gesprochenen Version (14. Januar 2011)
Mehr Informationen zur gesprochenen Wikipedia
Normdaten (Sachbegriff): GND: 4401313-9 (lobid, OGND, AKS)

Abgerufen von „https://de.wikipedia.org/w/index.php?title=Java_(Programmiersprache)&oldid=246266715“

Kategorien: Wikipedia:Gesprochener ArtikelImperative ProgrammierspracheJava (Programmiersprache)Programmiersprache für die Java Virtual MachineFreies ProgrammierwerkzeugObjektorientierte ProgrammierspracheVersteckte Kategorie:

ProgrammierspracheVersteckte Kategorie: Wikipedia:Vorlagenfehler/Vorlage:Cite web/temporär

Navigationsmenü
Meine Werkzeuge
Nicht angemeldetDiskussionsseiteBeiträgeBenutzerkonto erstellenAnmelden
Namensräume
ArtikelDiskussion
Deutsch
Ansichten
LesenBearbeitenQuelltext bearbeitenVersionsgeschichte
Weitere
Suche
Navigation

Weitere
Suche
Navigation
HauptseiteThemenportaleZufälliger Artikel
Mitmachen
Artikel verbessernNeuen Artikel anlegenAutorenportalHilfeLetzte ÄnderungenKontaktSpenden
Werkzeuge

Werkzeuge
Links auf diese SeiteÄnderungen an verlinkten SeitenSpezialseitenPermanenter LinkSeiten­­informationenArtikel zitierenKurzlinkQR-Code herunterladenWikidata-Datenobjekt
Drucken/​exportieren
Als PDF herunterladenDruckversion

Als PDF herunterladenDruckversion
In anderen Projekten
CommonsWikibooksWikiversity
In anderen Sprachen

AcèhAfrikaansአማርኛAragonésالعربيةالدارجةمصرىঅসমীয়াAsturianuAzərbaycancaتۆرکجهŽemaitėškaБеларускаяБеларуская (тарашкевіца)БългарскиবাংলাBosanskiBasa UgiCatalà閩東語 /

UgiCatalà閩東語 / Mìng-dĕ̤ng-ngṳ̄کوردیCorsuČeštinaЧӑвашлаCymraegDanskΕλληνικάEnglishEsperantoEspañolEestiEuskaraEstremeñuفارسیSuomiNa Vosa VakavitiFrançaisGaeilgeGalegoગુજરાતીHausa客家語 / Hak-kâ-ngîעבריתहिन्दीHrvatskiKreyòl

/ Hak-kâ-ngîעבריתहिन्दीHrvatskiKreyòl ayisyenMagyarՀայերենInterlinguaBahasa IndonesiaIdoÍslenskaItaliano日本語ქართულიQaraqalpaqshaTaqbaylitҚазақшаಕನ್ನಡ한국어KurdîКыргызчаLatinaLigureLombardLietuviųLatviešuMinangkabauМакедонскиമലയാളംМонголमराठीBahasa

Melayuမြန်မာဘာသာनेपालीNederlandsNorsk nynorskNorsk bokmålOccitanଓଡ଼ିଆਪੰਜਾਬੀPolskiپنجابیPortuguêsRuna SimiRomânăРусскийसंस्कृतम्Саха тылаسنڌيSrpskohrvatski / српскохрватскиසිංහලSimple EnglishSlovenčinaSlovenščinaSoomaaligaShqipСрпски /

/ srpskiSvenskaKiswahiliதமிழ்తెలుగుไทยTagalogTürkçeТатарча / tatarçaУкраїнськаاردوOʻzbekcha / ўзбекчаVènetoTiếng ViệtWinaray吴语中文文言閩南語 / Bân-lâm-gú粵語

Links bearbeiten
Diese Seite wurde zuletzt am 27. Juni 2024 um 22:12 Uhr bearbeitet.
Abrufstatistik · Autoren

Der Text ist unter der Lizenz „Creative-Commons Namensnennung – Weitergabe unter gleichen Bedingungen“ verfügbar; Informationen zu den Urhebern und zum Lizenzstatus eingebundener Mediendateien (etwa Bilder oder Videos) können im Regelfall durch

Bilder oder Videos) können im Regelfall durch Anklicken dieser abgerufen werden. Möglicherweise unterliegen die Inhalte jeweils zusätzlichen Bedingungen. Durch die Nutzung dieser Website erklären Sie sich mit den Nutzungsbedingungen und der

Sie sich mit den Nutzungsbedingungen und der Datenschutzrichtlinie einverstanden.

Wikipedia® ist eine eingetragene Marke der Wikimedia Foundation Inc.
Datenschutz
Über Wikipedia
Impressum
Verhaltenskodex
Entwickler
Statistiken
Stellungnahme zu Cookies
Mobile Ansicht

C Sharp (programming language) - Wikipedia
Jump to content
Main menu
Main menu
move to sidebar
hide
Navigation
Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us
Contribute

Contribute
HelpLearn to editCommunity portalRecent changesUpload file
Search
Search
Donate
Appearance
Create account
Log in
Personal tools
Create account Log in
Pages for logged out editors learn more
ContributionsTalk
Contents
move to sidebar
hide

ContributionsTalk
Contents
move to sidebar
hide
(Top)
1
Design goals
2
History
Toggle History subsection
2.1
Name
2.2
Versions
3
Syntax
4
Distinguishing features
Toggle Distinguishing features subsection
4.1
Portability
4.2
Typing
4.3

4.1
Portability
4.2
Typing
4.3
Metaprogramming
4.4
Methods and functions
4.5
Property
4.6
Namespace
4.7
Memory access
4.8
Exceptions
4.9
Polymorphism
4.10
Language Integrated Query (LINQ)
4.11
Functional programming
5
Common type system

4.11
Functional programming
5
Common type system
Toggle Common type system subsection
5.1
Categories of data types
5.2
Boxing and unboxing
6
Libraries
7
Examples
Toggle Examples subsection
7.1
Hello World
7.2
Generics
8
Standardization and licensing

7.2
Generics
8
Standardization and licensing
9
Implementations
10
See also
11
Notes
12
References
Toggle References subsection
12.1
Citations
12.2
Sources
13
Further reading
14
External links
Toggle the table of contents

14
External links
Toggle the table of contents
C Sharp (programming language)
81 languages

العربيةAzərbaycancaবাংলা閩南語 / Bân-lâm-gúБеларускаяБеларуская (тарашкевіца)БългарскиBosanskiCatalàČeštinaDanskDeutschEestiΕλληνικάEspañolEsperantoEuskaraفارسیFrançaisGalegoગુજરાતી客家語 / Hak-kâ-ngî한국어HausaՀայերենहिन्दीHrvatskiIdoBahasa

Hak-kâ-ngî한국어HausaՀայերենहिन्दीHrvatskiIdoBahasa IndonesiaÍslenskaItalianoעבריתქართულიҚазақшаKiswahiliКыргызчаLatviešuLietuviųMagyarМакедонскиമലയാളംمصرىBahasa Melayu閩東語 / Mìng-dĕ̤ng-ngṳ̄မြန်မာဘာသာNederlandsनेपाल भाषा日本語Norsk bokmålNorsk

भाषा日本語Norsk bokmålNorsk nynorskOʻzbekcha / ўзбекчаپنجابیភាសាខ្មែរPlattdüütschPolskiPortuguêsRomânăРусскийСаха тылаShqipSimple EnglishSlovenčinaSlovenščinaکوردیСрпски / srpskiSrpskohrvatski /

/ srpskiSrpskohrvatski / српскохрватскиSuomiSvenskaதமிழ்TaqbaylitไทยТоҷикӣTürkçeУкраїнськаاردوTiếng ViệtWinaray吴语Yorùbá粵語中文

Edit links
ArticleTalk
English
ReadEditView history
Tools
Tools
move to sidebar
hide
Actions
ReadEditView history
General

hide
Actions
ReadEditView history
General
What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata item
Print/export
Download as PDFPrintable version

Print/export
Download as PDFPrintable version
In other projects
Wikimedia CommonsWikibooksWikiversity
Appearance
move to sidebar
hide
From Wikipedia, the free encyclopedia
Programming language

Programming language
The correct title of this article is C#. The substitution of the # is due to technical restrictions.

C#ParadigmMulti-paradigm: structured, imperative, object-oriented, event-driven, task-driven, functional, generic, reflective, concurrentFamilyCDesigned byAnders Hejlsberg (Microsoft)DeveloperMads Torgersen (Microsoft)First appeared2000; 24 years

Torgersen (Microsoft)First appeared2000; 24 years ago (2000)[1]Stable release12.0[2]

/ 14 November 2023; 10 months ago (14 November 2023)
Typing disciplineStatic, dynamic,[3] strong, safe, nominative, partly inferredMemory managementautomatic memory managementPlatformCommon Language InfrastructureLicense
Roslyn compiler: MIT/X11[4]

Roslyn compiler: MIT/X11[4]
.NET Core CLR: MIT/X11[5]
Mono compiler: dual GPLv3 and MIT/X11
DotGNU: dual GPL and LGPL

Filename extensions.cs, .csxWebsitelearn.microsoft.com/en-us/dotnet/csharp/Major implementationsVisual C#, .NET, Mono, Universal Windows PlatformDiscontinued: .NET Framework, DotGNUDialectsCω, Polyphonic C#, Enhanced C#Influenced byC++,[6] Cω,

C#, Enhanced C#Influenced byC++,[6] Cω, Eiffel, F#,[a] Haskell, Scala, Icon, J#, J++, Java,[6] ML, Modula-3, Object Pascal,[7] VBInfluencedChapel,[8] Clojure,[9] Crystal,[10] D, J#, Dart,[11] F#, Hack, Java,[12][13] Kotlin, Nemerle, Oxygene,

F#, Hack, Java,[12][13] Kotlin, Nemerle, Oxygene, Rust,[14] Swift,[15] Vala, TypeScript

C Sharp Programming at Wikibooks

C# (/ˌsiː ˈʃɑːrp/ see SHARP)[b] is a general-purpose high-level programming language supporting multiple paradigms. C# encompasses static typing,[16]: 4  strong typing, lexically scoped, imperative, declarative, functional, generic,[16]: 22

declarative, functional, generic,[16]: 22  object-oriented (class-based), and component-oriented programming disciplines.[17]

The principal inventors of the C# programming language were Anders Hejlsberg, Scott Wiltamuth, and Peter Golde from Microsoft.[17] It was first widely distributed in July 2000[17] and was later approved as an international standard by Ecma

approved as an international standard by Ecma (ECMA-334) in 2002 and ISO/IEC (ISO/IEC 23270 and 20619[c]) in 2003. Microsoft introduced C# along with .NET Framework and Visual Studio, both of which were closed-source. At the time, Microsoft had no

were closed-source. At the time, Microsoft had no open-source products. Four years later, in 2004, a free and open-source project called Mono began, providing a cross-platform compiler and runtime environment for the C# programming language. A

environment for the C# programming language. A decade later, Microsoft released Visual Studio Code (code editor), Roslyn (compiler), and the unified .NET platform (software framework), all of which support C# and are free, open-source, and

which support C# and are free, open-source, and cross-platform. Mono also joined Microsoft but was not merged into .NET.

As of November 2023,[update] the most recent stable version of the language is C# 12.0, which was released in 2023 in .NET 8.0.[18][19]
Design goals[edit]
The Ecma standard lists these design goals for C#:[17]

The language is intended to be a simple, modern, general-purpose, object-oriented programming language.

The language, and implementations thereof, should provide support for software engineering principles such as strong type checking, array bounds checking,[20]: 58–59  detection of attempts to use uninitialized variables, and automatic garbage

uninitialized variables, and automatic garbage collection.[20]: 563  Software robustness, durability, and programmer productivity are important.

The language is intended for use in developing software components suitable for deployment in distributed environments.
Portability is very important for source code and programmers, especially those already familiar with C and C++.

Support for internationalization[20]: 314  is very important.

C# is intended to be suitable for writing applications for both hosted and embedded systems, ranging from the very large that use sophisticated operating systems, down to the very small having dedicated functions.

Although C# applications are intended to be economical with regard to memory and processing power requirements, the language was not intended to compete directly on performance and size with C or assembly language.[21]
History[edit]

During the development of the .NET Framework, the class libraries were originally written using a managed code compiler system named Simple Managed C (SMC).[22][23] In January 1999, Anders Hejlsberg formed a team to build a new language at the time

formed a team to build a new language at the time called Cool, which stood for "C-like Object Oriented Language".[24] Microsoft had considered keeping the name "Cool" as the final name of the language, but chose not to do so for trademark reasons.

but chose not to do so for trademark reasons. By the time the .NET project was publicly announced at the July 2000 Professional Developers Conference, the language had been renamed C#, and the class libraries and ASP.NET runtime had been ported to

libraries and ASP.NET runtime had been ported to C#.

Hejlsberg is C#'s principal designer and lead architect at Microsoft, and was previously involved with the design of Turbo Pascal, Embarcadero Delphi (formerly CodeGear Delphi, Inprise Delphi and Borland Delphi), and Visual J++. In interviews and

Delphi), and Visual J++. In interviews and technical papers, he has stated that flaws[25] in most major programming languages (e.g. C++, Java, Delphi, and Smalltalk) drove the fundamentals of the Common Language Runtime (CLR), which, in turn, drove

Language Runtime (CLR), which, in turn, drove the design of the C# language.

James Gosling, who created the Java programming language in 1994, and Bill Joy, a co-founder of Sun Microsystems, the originator of Java, called C# an "imitation" of Java; Gosling further said that "[C# is] sort of Java with reliability,

said that "[C# is] sort of Java with reliability, productivity and security deleted."[26][27]

In July 2000, Hejlsberg said that C# is "not a Java clone" and is "much closer to C++" in its design.[28]

Since the release of C# 2.0 in November 2005, the C# and Java languages have evolved on increasingly divergent trajectories, becoming two quite different languages. One of the first major departures came with the addition of generics to both

came with the addition of generics to both languages, with vastly different implementations. C# makes use of reification to provide "first-class" generic objects that can be used like any other class, with code generation performed at class-load

with code generation performed at class-load time.[29]

Furthermore, C# has added several major features to accommodate functional-style programming, culminating in the LINQ extensions released with C# 3.0 and its supporting framework of lambda expressions, extension methods, and anonymous types.[30]

extension methods, and anonymous types.[30]  These features enable C# programmers to use functional programming techniques, such as closures, when it is advantageous to their application. The LINQ extensions and the functional imports help

LINQ extensions and the functional imports help developers reduce the amount of boilerplate code that is included in common tasks like querying a database, parsing an xml file, or searching through a data structure, shifting the emphasis onto the

a data structure, shifting the emphasis onto the actual program logic to help improve readability and maintainability.[31]

C# used to have a mascot called Andy (named after Anders Hejlsberg). It was retired on January 29, 2004.[32]

C# was originally submitted to the ISO/IEC JTC 1 subcommittee SC 22 for review,[33] under ISO/IEC 23270:2003,[34] was withdrawn and was then approved under ISO/IEC 23270:2006.[35] The 23270:2006 is withdrawn under 23270:2018 and approved with this

withdrawn under 23270:2018 and approved with this version.[36]

Name[edit]
Microsoft first used the name C# in 1988 for a variant of the C language designed for incremental compilation.[37] That project was not completed, and the name was later reused.
C-sharp musical note

C-sharp musical note
The name "C sharp" was inspired by the musical notation whereby a sharp symbol indicates that the written note should be made a semitone higher in pitch.[38]

This is similar to the language name of C++, where "++" indicates that a variable should be incremented by 1 after being evaluated. The sharp symbol also resembles a ligature of four "+" symbols (in a two-by-two grid), further implying that the

(in a two-by-two grid), further implying that the language is an increment of C++.[39]

Due to technical limits of display (standard fonts, browsers, etc.), and most keyboard layouts lacking a sharp symbol (U+266F ♯ MUSIC SHARP SIGN (&sharp;)), the number sign (U+0023 # NUMBER SIGN (&num;)) was chosen to approximate the sharp symbol in

was chosen to approximate the sharp symbol in the written name of the programming language.[40]

This convention is reflected in the ECMA-334 C# Language Specification.[17]

The "sharp" suffix has been used by a number of other .NET languages that are variants of existing languages, including J# (a .NET language also designed by Microsoft that is derived from Java 1.1), A# (from Ada), and the functional programming

A# (from Ada), and the functional programming language F#.[41] The original implementation of Eiffel for .NET was called Eiffel#,[42] a name retired since the full Eiffel language is now supported. The suffix has also been used for libraries, such

The suffix has also been used for libraries, such as Gtk# (a .NET wrapper for GTK and other GNOME libraries) and Cocoa# (a wrapper for Cocoa).

Versions[edit]
C#version
Language specification
Date
.NET
Visual Studio
Ecma
ISO/IEC
Microsoft
1.0
ECMA-334:2003, December 2002
ISO/IEC 23270:2003, April 2003
January 2002
January 2002
.NET Framework 1.0
Visual Studio .NET 2002
1.11.2
October 2003

Visual Studio .NET 2002
1.11.2
October 2003
April 2003
.NET Framework 1.1
Visual Studio .NET 2003
2.0[43]
ECMA-334:2006, June 2006
ISO/IEC 23270:2006, September 2006
September 2005[d]
November 2005
.NET Framework 2.0.NET Framework 3.0

.NET Framework 2.0.NET Framework 3.0
Visual Studio 2005Visual Studio 2008
3.0[44]
None
August 2007
November 2007
.NET Framework 2.0 (Except LINQ)[45].NET Framework 3.0 (Except LINQ)[45].NET Framework 3.5
Visual Studio 2008
4.0[46]
April 2010

Visual Studio 2008
4.0[46]
April 2010
April 2010
.NET Framework 4
Visual Studio 2010
5.0[47]
ECMA-334:2017, December 2017
ISO/IEC 23270:2018, December 2018
June 2013
August 2012
.NET Framework 4.5
Visual Studio 2012Visual Studio 2013
6.0[48]

Visual Studio 2012Visual Studio 2013
6.0[48]
ECMA-334:2022, June 2022
None
Draft
July 2015
.NET Framework 4.6.NET Core 1.0.NET Core 1.1
Visual Studio 2015
7.0[49][50]
ECMA-334:2023, December 2023
ISO/IEC 20619:2023, September 2023

ISO/IEC 20619:2023, September 2023
Specification proposal
March 2017
.NET Framework 4.7
Visual Studio 2017 version 15.0[51]
7.1[52]
Specification proposal
August 2017
.NET Core 2.0
Visual Studio 2017 version 15.3[53]
7.2[54]
Specification proposal

7.2[54]
Specification proposal
November 2017
Visual Studio 2017 version 15.5[55]
7.3[56]
Specification proposal Archived March 7, 2021, at the Wayback Machine
May 2018
.NET Core 2.1.NET Core 2.2.NET Framework 4.8
Visual Studio 2017 version 15.7[57]

Visual Studio 2017 version 15.7[57]
8.0[58]
None
Specification proposal
September 2019
.NET Core 3.0.NET Core 3.1
Visual Studio 2019 version 16.3[59]
9.0[60]
Specification proposal
November 2020
.NET 5.0
Visual Studio 2019 version 16.8[61]
10.0[62]

Visual Studio 2019 version 16.8[61]
10.0[62]
Specification proposal
November 2021
.NET 6.0
Visual Studio 2022 version 17.0[63]
11.0[64]
Specification proposal
November 2022
.NET 7.0
Visual Studio 2022 version 17.4[65]
12.0[66]
Specification proposal

12.0[66]
Specification proposal
November 2023
.NET 8.0
Visual Studio 2022 version 17.8[67]
Syntax[edit]
Main article: C# syntax
See also: Syntax (programming languages)

See also: Syntax (programming languages)
The core syntax of the C# language is similar to that of other C-style languages such as C, C++ and Java, particularly:
Semicolons are used to denote the end of a statement.

Curly brackets are used to group statements. Statements are commonly grouped into methods (functions), methods into classes, and classes into namespaces.
Variables are assigned using an equals sign, but compared using two consecutive equals signs.

Square brackets are used with arrays, both to declare them and to get a value at a given index in one of them.
Distinguishing features[edit]
See also: Comparison of C# and Java

See also: Comparison of C# and Java
Some notable features of C# that distinguish it from C, C++, and Java where noted, are:
Portability[edit]

By design, C# is the programming language that most directly reflects the underlying Common Language Infrastructure (CLI).[68]  Most of its intrinsic types correspond to value-types implemented by the CLI framework. However, the language

by the CLI framework. However, the language specification does not state the code generation requirements of the compiler: that is, it does not state that a C# compiler must target a Common Language Runtime, or generate Common Intermediate Language

Runtime, or generate Common Intermediate Language (CIL), or generate any other specific format. Some C# compilers can also generate machine code like traditional compilers of C++ or Fortran.[69][70]

Typing[edit]
C# supports strongly, implicitly typed variable declarations with the keyword var,[16]: 470  and implicitly typed arrays with the keyword new[] followed by a collection initializer.[16]: 80 [20]: 58

Its type system is split into two families: Value types, like the built-in numeric types and user-defined structs, which are automatically handed over as copies when used as parameters, and reference types, including arrays, instances of classes,

types, including arrays, instances of classes, and strings, which only hand over a pointer to the respective object. Due to their special handling of the equality operator, strings will nevertheless behave as if they were values, for all practical

behave as if they were values, for all practical purposes. You can even use them as case labels. Where necessary, value types will be boxed automatically.[71]

C# supports a strict Boolean data type, bool. Statements that take conditions, such as while and if, require an expression of a type that implements the true operator, such as the Boolean type. While C++ also has a Boolean type, it can be freely

C++ also has a Boolean type, it can be freely converted to and from integers, and expressions such as if (a) require only that a is convertible to bool, allowing a to be an int, or a pointer. C# disallows this "integer meaning true or false"

C# disallows this "integer meaning true or false" approach, on the grounds that forcing programmers to use expressions that return exactly bool can prevent certain types of programming mistakes such as if (a = b) (use of assignment = instead of

as if (a = b) (use of assignment = instead of equality ==).

C# is more type safe than C++. The only implicit conversions by default are those that are considered safe, such as widening of integers. This is enforced at compile-time, during JIT, and, in some cases, at runtime. No implicit conversions occur

cases, at runtime. No implicit conversions occur between Booleans and integers, nor between enumeration members and integers (except for literal 0, which can be implicitly converted to any enumerated type). Any user-defined conversion must be

type). Any user-defined conversion must be explicitly marked as explicit or implicit, unlike C++ copy constructors and conversion operators, which are both implicit by default.

C# has explicit support for covariance and contravariance in generic types,[16]: 144 [20]: 23  unlike C++ which has some degree of support for contravariance simply through the semantics of return types on virtual methods.

Enumeration members are placed in their own scope.

The C# language does not allow for global variables or functions. All methods and members must be declared within classes. Static members of public classes can substitute for global variables and functions.

Local variables cannot shadow variables of the enclosing block, unlike C and C++.
Metaprogramming[edit]
Metaprogramming can be achieved in several ways:

Metaprogramming can be achieved in several ways:
Reflection is supported through .NET APIs, which enable scenarios such as type metadata inspection and dynamic method invocation.

Expression trees[72] represent code as an abstract syntax tree, where each node is an expression that can be inspected or executed. This enables dynamic modification of executable code at runtime. Expression trees introduce some homoiconicity to the

trees introduce some homoiconicity to the language.

Attributes are metadata that can be attached to types, members, or entire assemblies, equivalent to annotations in Java. Attributes are accessible both to the compiler and to code through reflection. Many of native attributes duplicate the

Many of native attributes duplicate the functionality of GCC's and VisualC++'s platform-dependent preprocessor directives.[citation needed]

System.Reflection.Emit namespace,[73] which contains classes that emit metadata and CIL (types, assemblies, etc.) at runtime.

The .NET Compiler Platform (Roslyn) provides API access to language compilation services, allowing for the compilation of C# code from within .NET applications. It exposes APIs for syntactic (lexical) analysis of code, semantic analysis, dynamic

analysis of code, semantic analysis, dynamic compilation to CIL, and code emission.[74]

Source generators,[75] a feature of the Roslyn C# compiler, enable compile time metaprogramming. During the compilation process, developers can inspect the code being compiled with the compiler's API and pass additional generated C# source code to

and pass additional generated C# source code to be compiled.

Methods and functions[edit]

A method in C# is a member of a class that can be invoked as a function (a sequence of instructions), rather than the mere value-holding capability of a field (i.e. class or instance variable).[76] As in other syntactically similar languages, such

As in other syntactically similar languages, such as C++ and ANSI C, the signature of a method is a declaration comprising in order: any optional accessibility keywords (such as private), the explicit specification of its return type (such as int,

specification of its return type (such as int, or the keyword void if no value is returned), the name of the method, and finally, a parenthesized sequence of comma-separated parameter specifications, each consisting of a parameter's type, its formal

each consisting of a parameter's type, its formal name and optionally, a default value to be used whenever none is provided. Different from most other languages, call-by-reference parameters have to be marked both at the function definition and at

be marked both at the function definition and at the calling site, and you can choose between ref and out, the latter allowing handing over an uninitialized variable which will have a definite value on return.[77] Additionally, you can specify a

on return.[77] Additionally, you can specify a variable-sized argument list by applying the params keyword to the last parameter.[78] Certain specific kinds of methods, such as those that simply get or set a field's value by returning or assigning

or set a field's value by returning or assigning it, do not require an explicitly stated full signature, but in the general case, the definition of a class includes the full signature declaration of its methods.[79]

Like C++, and unlike Java, C# programmers must use the scope modifier keyword virtual to allow methods to be overridden by subclasses. Unlike C++, you have to explicitly specify the keyword override when doing so.[80] This is supposed to avoid

when doing so.[80] This is supposed to avoid confusion between overriding and newly overloading a function (i.e. hiding the former implementation). To do the latter, you have to specify the new keyword.[81]

Extension methods in C# allow programmers to use static methods as if they were methods from a class's method table, allowing programmers to virtually add instance methods to a class that they feel should exist on that kind of objects (and instances

exist on that kind of objects (and instances of the respective derived classes).[16]: 103–105 [20]: 202–203

The type dynamic allows for run-time method binding, allowing for JavaScript-like method calls and run-time object composition.[16]: 114–118

C# has support for strongly-typed function pointers via the keyword delegate. Like the Qt framework's pseudo-C++ signal and slot, C# has semantics specifically surrounding publish-subscribe style events, though C# uses delegates to do so.

C# offers Java-like synchronized method calls, via the attribute [MethodImpl(MethodImplOptions.Synchronized)], and has support for mutually-exclusive locks via the keyword lock.
Property[edit]

C# supports classes with properties. The properties can be simple accessor functions with a backing field, or implement arbitrary getter and setter functions. A property is read-only if there's no setter. Like with fields, there can be class and

setter. Like with fields, there can be class and instance properties. The underlying methods can be virtual or abstract like any other method.[79]

Since C# 3.0 the syntactic sugar of auto-implemented properties is available,[82] where the accessor (getter) and mutator (setter) encapsulate operations on a single attribute of a class.
Namespace[edit]

Namespace[edit]
A C# namespace provides the same level of code isolation as a Java package or a C++ namespace, with very similar rules and features to a package. Namespaces can be imported with the "using" syntax.[83]
Memory access[edit]

In C#, memory address pointers can only be used within blocks specifically marked as unsafe,[84] and programs with unsafe code need appropriate permissions to run. Most object access is done through safe object references, which always either point

safe object references, which always either point to a "live" object or have the well-defined null value; it is impossible to obtain a reference to a "dead" object (one that has been garbage collected), or to a random block of memory. An unsafe

or to a random block of memory. An unsafe pointer can point to an instance of an unmanaged value type that does not contain any references to objects subject to garbage collections such as class instances, arrays or strings. Code that is not marked

arrays or strings. Code that is not marked as unsafe can still store and manipulate pointers through the System.IntPtr type, but it cannot dereference them.

Managed memory cannot be explicitly freed; instead, it is automatically garbage collected. Garbage collection addresses the problem of memory leaks by freeing the programmer of responsibility for releasing memory that is no longer needed in most

releasing memory that is no longer needed in most cases. Code that retains references to objects longer than is required can still experience higher memory usage than necessary, however once the final reference to an object is released the memory is

reference to an object is released the memory is available for garbage collection.

Exceptions[edit]

A range of standard exceptions are available to programmers. Methods in standard libraries regularly throw system exceptions in some circumstances and the range of exceptions thrown is normally documented. Custom exception classes can be defined for

Custom exception classes can be defined for classes allowing handling to be put in place for particular circumstances as needed.[85]

The syntax for handling exceptions is try { something } catch (Exception ex) { handle ex } finally { do something whether or not an exception occurred }. Depending on your plans, the "catch" or the "finally" part can be left out, and there can be

"finally" part can be left out, and there can be several "catch" parts handling different kinds of exceptions.

[86]
Checked exceptions are not present in C# (in contrast to Java). This has been a conscious decision based on the issues of scalability and versionability.[87]
Polymorphism[edit]

Unlike C++, C# does not support multiple inheritance, although a class can implement any number of "interfaces" (fully abstract classes). This was a design decision by the language's lead architect to avoid complications and to simplify

architect to avoid complications and to simplify architectural requirements throughout CLI.

When implementing multiple interfaces that contain a method with the same name and taking parameters of the same type in the same order (i.e. the same signature), similar to Java, C# allows both a single method to cover all interfaces and if

a single method to cover all interfaces and if necessary specific methods for each interface.

However, unlike Java, C# supports operator overloading.[88]
C# also offers function overloading (a.k.a. ad-hoc-polymorphism).[89]

Since version 2.0, C# offers parametric polymorphism, i.e. classes with arbitrary or constrained type parameters, e.g. List<T>, a variable-sized array which only can contain elements of type T. There are certain kinds of constraints you can specify

are certain kinds of constraints you can specify for the type parameters: Has to be type X (or one derived from it), has to implement a certain interface, has to be a reference type, has to be a value type, has to implement a public parameterless

type, has to implement a public parameterless constructor. Most of them can be combined, and you can specify any number of interfaces.[90][91]

Language Integrated Query (LINQ)[edit]

C# has the ability to utilize LINQ through the .NET Framework. A developer can query a variety of data sources, provided the IEnumerable<T> interface is implemented on the object. This includes XML documents, an ADO.NET dataset, and SQL

XML documents, an ADO.NET dataset, and SQL databases.[92]

+ Using LINQ in C# brings advantages like IntelliSense support, strong filtering capabilities, type safety with compile error checking ability, and consistency for querying data over a variety of sources.[93]  There are several different language

There are several different language structures that can be utilized with C# and LINQ and they are query expressions, lambda expressions, anonymous types, implicitly typed variables, extension methods, and object initializers.[94]

LINQ has two syntaxes: query syntax and method syntax. However, the compiler always converts the query syntax to method syntax at compile time.[95]
using System.Linq;
var numbers = new int[] { 5, 10, 8, 3, 6, 12 };

var numbers = new int[] { 5, 10, 8, 3, 6, 12 };
// Query syntax (SELECT num FROM numbers WHERE num % 2 = 0 ORDER BY num)
var numQuery1 =
from num in numbers
where num % 2 == 0
orderby num
select num;
// Method syntax
var numQuery2 =
numbers

// Method syntax
var numQuery2 =
numbers
.Where(num => num % 2 == 0)
.OrderBy(n => n);
Functional programming[edit]
Though primarily an imperative language, C# always adds functional features over time,[96][97] for example:

Functions as first-class citizen – C# 1.0 delegates[98]
Higher-order functions – C# 1.0 together with delegates
Anonymous functions – C# 2 anonymous delegates and C# 3 lambdas expressions[99]

Closures – C# 2 together with anonymous delegates and C# 3 together with lambdas expressions[99]
Type inference – C# 3 with implicitly typed local variables var and C# 9 target-typed new expressions new()
List comprehension – C# 3 LINQ

List comprehension – C# 3 LINQ
Tuples – .NET Framework 4.0 but it becomes popular when C# 7.0 introduced a new tuple type with language support[100]
Nested functions – C# 7.0[100]
Pattern matching – C# 7.0[100]

Pattern matching – C# 7.0[100]
Immutability – C# 7.2 readonly struct C# 9 record types[101] and Init only setters[102]
Type classes – C# 12 roles/extensions (in development[103])
Common type system[edit]

Common type system[edit]
C# has a unified type system. This unified type system is called Common Type System (CTS).[104]: Part 2, Chapter 4: The Type System

A unified type system implies that all types, including primitives such as integers, are subclasses of the System.Object class. For example, every type inherits a ToString() method.
Categories of data types[edit]

Categories of data types[edit]
CTS separates data types into two categories:[104]
Reference types
Value types

Instances of value types neither have referential identity nor referential comparison semantics. Equality and inequality comparisons for value types compare the actual data values within the instances, unless the corresponding operators are

instances, unless the corresponding operators are overloaded. Value types are derived from System.ValueType, always have a default value, and can always be created and copied. Some other limitations on value types are that they cannot derive from

on value types are that they cannot derive from each other (but can implement interfaces) and cannot have an explicit default (parameterless) constructor because they already have an implicit one which initializes all contained data to the

one which initializes all contained data to the type-dependent default value (0, null, or alike). Examples of value types are all primitive types, such as int (a signed 32-bit integer), float (a 32-bit IEEE floating-point number), char (a 16-bit

IEEE floating-point number), char (a 16-bit Unicode code unit), decimal (fixed-point numbers useful for handling currency amounts), and System.DateTime (identifies a specific point in time with nanosecond precision). Other examples are enum

nanosecond precision). Other examples are enum (enumerations) and struct (user defined structures).

In contrast, reference types have the notion of referential identity, meaning that each instance of a reference type is inherently distinct from every other instance, even if the data within both instances is the same. This is reflected in default

is the same. This is reflected in default equality and inequality comparisons for reference types, which test for referential rather than structural equality, unless the corresponding operators are overloaded (such as the case for System.String).

overloaded (such as the case for System.String). Some operations are not always possible, such as creating an instance of a reference type, copying an existing instance, or performing a value comparison on two existing instances. Nevertheless,

on two existing instances. Nevertheless, specific reference types can provide such services by exposing a public constructor or implementing a corresponding interface (such as ICloneable or IComparable). Examples of reference types are object (the

Examples of reference types are object (the ultimate base class for all other C# classes), System.String (a string of Unicode characters), and System.Array (a base class for all C# arrays).

Both type categories are extensible with user-defined types.
Boxing and unboxing[edit]
Boxing is the operation of converting a value-type object into a value of a corresponding reference type.[104] Boxing in C# is implicit.

Unboxing is the operation of converting a value of a reference type (previously boxed) into a value of a value type.[104] Unboxing in C# requires an explicit type cast. A boxed object of type T can only be unboxed to a T (or a nullable T).[105]

Example:
int foo = 42;         // Value type.
object bar = foo;     // foo is boxed to bar.
int foo2 = (int)bar;  // Unboxed back to value type.
Libraries[edit]

The C# specification details a minimum set of types and class libraries that the compiler expects to have available. In practice, C# is most often used with some implementation of the Common Language Infrastructure (CLI), which is standardized as

Infrastructure (CLI), which is standardized as ECMA-335 Common Language Infrastructure (CLI).

In addition to the standard CLI specifications, there are many commercial and community class libraries that build on top of the .NET framework libraries to provide additional functionality.[106]

C# can make calls to any library included in the List of .NET libraries and frameworks.
Examples[edit]
Hello World[edit]

Examples[edit]
Hello World[edit]
The following is a very simple C# program, a version of the classic "Hello world" example using the top-level statements feature introduced in C# 9:[107]
using System;
Console.WriteLine("Hello, world!");

using System;
Console.WriteLine("Hello, world!");
For code written as C# 8 or lower, the entry point logic of a program must be written in a Main method inside a type:
using System;
class Program
{
static void Main()
{

class Program
{
static void Main()
{
Console.WriteLine("Hello, world!");
}
}
This code will display this text in the console window:
Hello, world!
Each line has a purpose:
using System;

The above line imports all types in the System namespace. For example, the Console class used later in the source code is defined in the System namespace, meaning it can be used without supplying the full name of the type (which includes the

the full name of the type (which includes the namespace).

// A version of the classic "Hello World" program
This line is a comment; it describes and documents the code for the programmer(s).class Program

Above is a class definition for the Program class. Everything that follows between the pair of braces describes that class.{
...
}

...
}
The curly brackets demarcate the boundaries of a code block. In this first instance, they are marking the start and end of the Program class.static void Main()

This declares the class member method where the program begins execution. The .NET runtime calls the Main method. Unlike in Java, the Main method does not need the public keyword, which tells the compiler that the method can be called from anywhere

that the method can be called from anywhere by any class.[108] Writing static void Main(string[] args) is equivalent to writing private static void Main(string[] args). The static keyword makes the method accessible without an instance of Program.

method accessible without an instance of Program. Each console application's Main entry point must be declared static otherwise the program would require an instance of Program, but any instance would require a program. To avoid that irresolvable

require a program. To avoid that irresolvable circular dependency, C# compilers processing console applications (like that above) report an error if there is no static Main method. The void keyword declares that Main has no return value. (Note,

declares that Main has no return value. (Note, however, that short programs can be written using Top Level Statements introduced in C# 9, as mentioned earlier.)

Console.WriteLine("Hello, world!");

This line writes the output. Console is a static class in the System namespace. It provides an interface to the standard input/output, and error streams for console applications. The program calls the Console method WriteLine, which displays on the

Console method WriteLine, which displays on the console a line with the argument, the string "Hello, world!".

Generics[edit]
Further information: Generic programming

With .NET 2.0 and C# 2.0, the community got more flexible collections than those in .NET 1.x. In the absence of generics, developers had to use collections such as ArrayList to store elements as objects of unspecified kind, which incurred

as objects of unspecified kind, which incurred performance overhead when boxing/unboxing/type-checking the contained items.

Generics introduced a massive new feature in .NET that allowed developers to create type-safe data structures. This shift is particularly important in the context of converting legacy systems, where updating to generics can significantly enhance

updating to generics can significantly enhance performance and maintainability by replacing outdated data structures with more efficient, type-safe alternatives.[109]

Example
public class DataStore<T>
{
private T[] items = new T[10];
private int count = 0;
public void Add(T item)
{
items[count++] = item;
}
public T Get(int index)
{
return items[index];
}
}
Standardization and licensing[edit]

In August 2001, Microsoft, Hewlett-Packard and Intel co-sponsored the submission of specifications for C# as well as the Common Language Infrastructure (CLI) to the standards organization Ecma International. In December 2001, ECMA released ECMA-334

In December 2001, ECMA released ECMA-334 C# Language Specification. C# became an ISO/IEC standard in 2003 (ISO/IEC 23270:2003 - Information technology — Programming languages — C#). ECMA had previously adopted equivalent specifications as the 2nd

adopted equivalent specifications as the 2nd edition of C#, in December 2002. In June 2005, ECMA approved edition 3 of the C# specification, and updated ECMA-334. Additions included partial classes, anonymous methods, nullable types, and generics

anonymous methods, nullable types, and generics (somewhat similar to C++ templates). In July 2005, ECMA submitted to ISO/IEC JTC 1/SC 22, via the latter's Fast-Track process, the standards and related TRs. This process usually takes 6–9 months.

The C# language definition and the CLI are standardized under ISO/IEC and Ecma standards that provide reasonable and non-discriminatory licensing protection from patent claims.

Microsoft initially agreed not to sue open-source developers for violating patents in non-profit projects for the part of the framework that is covered by the Open Specification Promise.[110] Microsoft has also agreed not to enforce patents relating

has also agreed not to enforce patents relating to Novell products against Novell's paying customers[111] with the exception of a list of products that do not explicitly mention C#, .NET or Novell's implementation of .NET (The Mono Project).[112]

implementation of .NET (The Mono Project).[112] However, Novell maintained that Mono does not infringe any Microsoft patents.[113] Microsoft also made a specific agreement not to enforce patent rights related to the Moonlight browser plugin, which

related to the Moonlight browser plugin, which depends on Mono, provided it is obtained through Novell.[114]

A decade later, Microsoft began developing free, open-source, and cross-platform tooling for C#, namely Visual Studio Code, .NET Core, and Roslyn. Mono joined Microsoft as a project of Xamarin, a Microsoft subsidiary.
Implementations[edit]

Microsoft is leading the development of the open-source reference C# compilers and set of tools. The first compiler, Roslyn, compiles into intermediate language (IL), and the second one, RyuJIT,[115] is a JIT (just-in-time) compiler, which is

is a JIT (just-in-time) compiler, which is dynamic and does on-the-fly optimization and compiles the IL into native code for the front-end of the CPU.[116] RyuJIT is open source and written in C++.[117] Roslyn is entirely written in managed code

Roslyn is entirely written in managed code (C#), has been opened up and functionality surfaced as APIs.  It is thus enabling developers to create refactoring and diagnostics tools.[4][118] Two branches of official implementation are .NET Framework

of official implementation are .NET Framework (closed-source, Windows-only) and .NET Core (open-source, cross-platform); they eventually converged into one open-source implementation: .NET 5.0.[119] At .NET Framework 4.6, a new JIT compiler replaced

.NET Framework 4.6, a new JIT compiler replaced the former.[115][120]

Other C# compilers (some of which include an implementation of the Common Language Infrastructure and .NET class libraries):

Mono, a Microsoft-sponsored project provides an open-source C# compiler, a complete open-source implementation of the CLI (including the required framework libraries as they appear in the ECMA specification,) and a nearly complete implementation of

and a nearly complete implementation of the NET class libraries up to .NET Framework 3.5.

The Elements tool chain from RemObjects includes RemObjects C#, which compiles C# code to .NET's Common Intermediate Language, Java bytecode, Cocoa, Android bytecode, WebAssembly, and native machine code for Windows, macOS, and Linux.

The DotGNU project (now discontinued) also provided an open-source C# compiler, a nearly complete implementation of the Common Language Infrastructure including the required framework libraries as they appear in the ECMA specification, and subset of

appear in the ECMA specification, and subset of some of the remaining Microsoft proprietary .NET class libraries up to .NET 2.0 (those not documented or included in the ECMA specification, but included in Microsoft's standard .NET Framework

included in Microsoft's standard .NET Framework distribution).

The Unity game engine uses C# as its primary scripting language. The Godot game engine has implemented an optional C# module thanks to a donation of $24,000 from Microsoft.[121]
See also[edit]
Computer programming portal
C# topics
C# syntax

Computer programming portal
C# topics
C# syntax
Comparison of C# and Java
Comparison of C# and Visual Basic .NET
.NET standard libraries
IDEs
Visual Studio
Visual Studio Code
Rider
LINQPad
MonoDevelop
Morfik
SharpDevelop
Turbo C#

LINQPad
MonoDevelop
Morfik
SharpDevelop
Turbo C#
Microsoft Visual Studio Express
Xamarin Studio
Notes[edit]
^ for async

^ By convention, a number sign is used for the second character in normal text; in artistic representations, sometimes a true sharp sign is used: C♯. However the ECMA 334 standard states: "The name C# is written as the LATIN CAPITAL LETTER C

name C# is written as the LATIN CAPITAL LETTER C (U+0043) followed by the NUMBER SIGN # (U+0023)."

^ Language versions 1.0, 2.0, and 5.0 are available as ISO/IEC 23270. Beginning with version 7.0, the specification is available as ISO/IEC 20619

^ The Microsoft C# 2.0 specification document only contains the new 2.0 features. For older features, use the 1.2 specification above.
References[edit]
Citations[edit]

References[edit]
Citations[edit]
^ "InfoQ eMag: A Preview of C# 7". Archived from the original on April 24, 2023. Retrieved November 11, 2016.
^ "Announcing C# 12". Retrieved November 18, 2023.

^ Torgersen, Mads (October 27, 2008). "New features in C# 4.0". Microsoft. Archived from the original on January 3, 2012. Retrieved October 28, 2008.

^ a b "The Roslyn .NET compiler provides C# and Visual Basic languages with rich code analysis APIs.: dotnet/roslyn". November 13, 2019. Archived from the original on February 22, 2021. Retrieved February 13, 2015 – via GitHub.

^ "CoreCLR is the runtime for .NET Core. It includes the garbage collector, JIT compiler, primitive data types and low-level classes.: dotnet/coreclr". November 13, 2019. Archived from the original on October 14, 2019. Retrieved March 8, 2017 – via

October 14, 2019. Retrieved March 8, 2017 – via GitHub.

^ a b Naugler, David (May 2007). "C# 2.0 for C++ and Java programmer: conference workshop". Journal of Computing Sciences in Colleges. 22 (5). Although C# has been strongly influenced by Java it has also been strongly influenced by C++ and is best

also been strongly influenced by C++ and is best viewed as a descendant of both C++ and Java.

^ Hamilton, Naomi (October 1, 2008). "The A-Z of Programming Languages: C#". Computerworld. Archived from the original on March 24, 2010. Retrieved February 12, 2010. We all stand on the shoulders of giants here and every language builds on what

of giants here and every language builds on what went before it so we owe a lot to C, C++, Java, Delphi, all of these other things that came before us. (Anders Hejlsberg)

^ "Chapel spec (Acknowledgments)" (PDF). Cray Inc. October 1, 2015. Archived from the original (PDF) on February 5, 2016. Retrieved January 14, 2016.

^ "Rich Hickey Q&A by Michael Fogus". Archived from the original on January 11, 2017. Retrieved January 11, 2017.

^ Borenszweig, Ary (June 14, 2016). "Crystal 0.18.0 released!". Archived from the original on December 25, 2018. Retrieved August 7, 2017. It's heavily inspired by Ruby, and other languages (like C#, Go and Python).

^ "Web Languages and VMs: Fast Code is Always in Fashion. (V8, Dart) - Google I/O 2013". YouTube. Archived from the original on December 21, 2021. Retrieved December 22, 2013.

^ Java 5.0 added several new language features (the enhanced for loop, autoboxing, varargs and annotations), after they were introduced in the similar (and competing) C# language [1] Archived March 19, 2011, at the Wayback Machine [2] Archived

19, 2011, at the Wayback Machine [2] Archived January 7, 2006, at the Wayback Machine

^ Cornelius, Barry (December 1, 2005). "Java 5 catches up with C#". University of Oxford Computing Services. Archived from the original on March 6, 2023. Retrieved June 18, 2014. In my opinion, it is C# that has caused these radical changes to the

C# that has caused these radical changes to the Java language. (Barry Cornelius)

^ "Influences - The Rust Reference". The Rust Reference. Archived from the original on January 26, 2019. Retrieved April 18, 2023.

^ Lattner, Chris (June 3, 2014). "Chris Lattner's Homepage". Chris Lattner. Archived from the original on December 25, 2018. Retrieved May 12, 2020. The Swift language is the product of tireless effort from a team of language experts, documentation

from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the

Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.

^ a b c d e f g Skeet 2019.
^ a b c d e C# Language Specification (PDF) (4th ed.). Ecma International. June 2006. Archived (PDF) from the original on April 21, 2021. Retrieved January 26, 2012.

^ Dollard, Kathleen (November 14, 2023). "Announcing C# 12". .NET Blog. Archived from the original on November 18, 2023. Retrieved November 18, 2023.

^ Seth, Gaurav (November 14, 2023). "Announcing .NET 8". .NET Blog. Archived from the original on November 19, 2023. Retrieved November 18, 2023.
^ a b c d e f Albahari 2022.

^ a b c d e f Albahari 2022.
^ "Design Goals of C#". www.java-samples.com. Archived from the original on October 6, 2021. Retrieved October 6, 2021.

^ Zander, Jason (November 22, 2007). "Couple of Historical Facts". Archived from the original on July 29, 2020. Retrieved February 23, 2009.

^ "What language was ASP.Net originally written in?". November 28, 2006. Archived from the original on June 24, 2016. Retrieved February 21, 2008.

^ Hamilton, Naomi (October 1, 2008). "The A-Z of Programming Languages: C#". Computerworld. Archived from the original on May 18, 2019. Retrieved October 1, 2008.

^ "Details". nilsnaegele.com. Archived from the original on April 7, 2019. Retrieved April 7, 2019.
^ "Why Microsoft's C# isn't". CNET: CBS Interactive. 2002. Archived from the original on August 14, 2023. Retrieved September 18, 2023.

^ Bill Joy (February 7, 2002). "Microsoft's blind spot". cnet.com. Archived from the original on August 14, 2023. Retrieved September 18, 2023.

^ Osborn, John (August 1, 2000). "Deep Inside C#: An Interview with Microsoft Chief Architect Anders Hejlsberg". O'Reilly Media. Archived from the original on January 9, 2010. Retrieved November 14, 2009.

^ "Generics (C# Programming Guide)". Microsoft. Archived from the original on August 26, 2011. Retrieved March 21, 2011.

^ Don Box and Anders Hejlsberg (February 2007). "LINQ: .NET Language-Integrated Query". Microsoft. Archived from the original on August 24, 2011. Retrieved March 21, 2011.

^ Mercer, Ian (April 15, 2010). "Why functional programming and LINQ is often better than procedural code". abodit.com. Archived from the original on July 11, 2011. Retrieved March 21, 2011.

^ "Andy Retires". Dan Fernandez's Blog. Blogs.msdn.com. January 29, 2004. Archived from the original on January 19, 2016. Retrieved October 4, 2012.

^ "Technical committees - JTC 1/SC 22 - Programming languages, their environments and system software interfaces". ISO. Archived from the original on September 27, 2012. Retrieved October 4, 2012.

^ "ISO/IEC 23270:2003 - Information technology - C# Language Specification". Iso.org. August 23, 2006. Archived from the original on May 8, 2012. Retrieved October 4, 2012.

^ "ISO/IEC 23270:2006 - Information technology - Programming languages - C#". Iso.org. January 26, 2012. Archived from the original on December 6, 2010. Retrieved October 4, 2012.

^ "SO/IEC 23270:2018 Information technology — Programming languages — C#". ISO. Retrieved November 26, 2020.

^ Mariani, Rico (October 5, 2009). "My History of Visual Studio (Part 1) – Rico Mariani's Performance Tidbits". Rico Mariani's Performance Tidbits. Archived from the original on May 27, 2018. Retrieved May 26, 2018.

^ Kovacs, James (September 7, 2007). "C#/.NET History Lesson". Archived from the original on March 6, 2009. Retrieved June 18, 2009.

^ Hejlsberg, Anders (October 1, 2008). "The A-Z of Programming Languages: C#". Computerworld. Archived from the original on April 2, 2015. Retrieved June 22, 2014.

^ "Microsoft C# FAQ". Microsoft. Archived from the original on February 14, 2006. Retrieved March 25, 2008.
^ "F# FAQ". Microsoft Research. Archived from the original on February 18, 2009. Retrieved June 18, 2009.

^ Simon, Raphael; Stapf, Emmanuel; Meyer, Bertrand (June 2002). "Full Eiffel on the .NET Framework". Microsoft. Archived from the original on July 21, 2009. Retrieved June 18, 2009.

^ "What's new in the C# 2.0 Language and Compiler". Microsoft. Archived from the original on December 18, 2010. Retrieved June 11, 2014.

^ Hejlsberg, Anders; Torgersen, Mads (April 30, 2007). "Overview of C# 3.0". Microsoft Developer Network. Microsoft. Archived from the original on June 25, 2014. Retrieved June 11, 2014.

^ a b "Using C# 3.0 from .NET 2.0". Danielmoth.com. May 13, 2007. Archived from the original on September 29, 2012. Retrieved October 4, 2012.

^ Hejlsberg, Anders (September 15, 2011). "Future directions for C# and Visual Basic". Channel 9. BUILD2011. Microsoft. Archived from the original on September 23, 2011. Retrieved September 21, 2011.

^ "An Introduction to New Features in C# 5.0". The Microsoft MVP Award Program Blog. Microsoft. March 26, 2012. Archived from the original on June 4, 2014. Retrieved June 11, 2014.

^ "Languages features in C# 6 and VB 14". GitHub. dotnet/roslyn. Archived from the original on January 12, 2016. Retrieved February 13, 2015.
^ "What's new in C# 7". Microsoft Docs. December 21, 2016. Archived from the original on November 1, 2017.

^ Torgersen, Mads (March 9, 2017). "New Features in C# 7.0". .NET Blog. Microsoft. Archived from the original on April 11, 2017. Retrieved June 9, 2017.

^ "Visual Studio 2017 version 15.0 Release Notes". Microsoft Learn. April 11, 2023. Archived from the original on April 20, 2023. Retrieved April 19, 2023.

^ "What's new in C# 7.1". Microsoft Docs. Archived from the original on October 10, 2017. Retrieved October 9, 2017.

^ "Visual Studio 2017 version 15.3 Release Notes". Microsoft Learn. April 11, 2023. Archived from the original on March 21, 2023. Retrieved April 19, 2023.

^ "What's new in C# 7.2". Microsoft Docs. Archived from the original on December 1, 2017. Retrieved November 26, 2017.

^ "Visual Studio 2017 version 15.5 Release Notes". Microsoft Learn. April 11, 2023. Archived from the original on April 20, 2023. Retrieved April 19, 2023.

^ "What's new in C# 7.3". Microsoft Docs. Archived from the original on June 23, 2018. Retrieved June 23, 2018.

^ "Visual Studio 2017 version 15.7 Release Notes". Microsoft Learn. July 13, 2022. Archived from the original on April 20, 2023. Retrieved April 19, 2023.

^ "What's new in C# 8.0". Microsoft Docs. March 9, 2023. Archived from the original on September 6, 2020. Retrieved April 14, 2019.

^ "Visual Studio 2019 version 16.3 Release Notes". Microsoft Learn. April 11, 2023. Archived from the original on April 20, 2023. Retrieved April 19, 2023.

^ BillWagner. "What's new in C# 9.0 - C# Guide". Microsoft Learn. Archived from the original on September 5, 2020. Retrieved October 15, 2020.

^ "Visual Studio 2019 version 16.8 Release Notes". Microsoft Learn. April 11, 2023. Archived from the original on April 20, 2023. Retrieved April 19, 2023.

^ "What's new in C# 10". Microsoft Learn. Archived from the original on February 8, 2022. Retrieved November 10, 2021.

^ "Visual Studio 2022 version 17.0 Release Notes". Microsoft Learn. Archived from the original on July 16, 2023. Retrieved April 19, 2023.

^ "What's new in C# 11". Microsoft Learn. Archived from the original on August 15, 2022. Retrieved August 8, 2022.

^ "Visual Studio 2022 version 17.4 Release Notes". Microsoft Learn. Archived from the original on August 6, 2023. Retrieved April 19, 2023.

^ "What's new in C# 12". Microsoft Learn. Archived from the original on July 20, 2023. Retrieved June 29, 2023.

^ "Visual Studio 2022 version 17.6 Release Notes". Microsoft Learn. Archived from the original on August 6, 2023. Retrieved June 29, 2023.
^ Novák et al. 2010.

^ Novák et al. 2010.
^ stevewhims; mattwojo (October 20, 2022). "Compiling Apps with .NET Native - UWP applications". learn.microsoft.com. Archived from the original on October 27, 2023. Retrieved October 27, 2023.

^ LakshanF; agocke; Rick-Anderson; et al. (September 12, 2023). "Native AOT deployment overview - .NET". learn.microsoft.com. Archived from the original on November 11, 2023. Retrieved October 27, 2023.{{cite web}}:  CS1 maint: numeric names:

27, 2023.{{cite web}}:  CS1 maint: numeric names: authors list (link)

^ "Types/General, part of the official C# documentation". Microsoft. Archived from the original on March 29, 2024. Retrieved April 6, 2024.

^ BillWagner. "Expression Trees (C#)". Microsoft Learn. Archived from the original on May 15, 2021. Retrieved May 14, 2021.

^ dotnet-bot. "System.Reflection.Emit Namespace". learn.microsoft.com. Archived from the original on April 28, 2023. Retrieved April 28, 2023.

^ McAllister, Neil (October 20, 2011). "Microsoft's Roslyn: Reinventing the compiler as we know it". InfoWorld. Archived from the original on March 5, 2022. Retrieved March 5, 2022.

^ "Introducing C# Source Generators". .NET Blog. April 29, 2020. Archived from the original on May 7, 2021. Retrieved May 14, 2021.
^ "Classes/fields, part of the official C# documentation".
^ "out (C# Reference)".

^ "out (C# Reference)".
^ "Method parameters/params modifier, part of the official C# documentation".
^ a b "Classes/properties, part of the official C# documentation".

^ "virtual (C# Reference)". Microsoft Learn. September 15, 2021. Archived from the original on August 30, 2018. Retrieved April 4, 2018.
^ "new modifier, part of the official C# documentation".

^ "Auto-Implemented Properties (C# Programming Guide)". Archived from the original on October 29, 2020. Retrieved September 12, 2020.

^ "using directive - C# Reference". Microsoft Docs. Archived from the original on April 14, 2019. Retrieved April 14, 2019.

^ BillWagner. "Unsafe code, pointers to data, and function pointers". Microsoft Learn. Archived from the original on July 4, 2021. Retrieved June 20, 2021.

^ "How to create user-defined exceptions". Archived from the original on January 26, 2021. Retrieved September 12, 2020.
^ "Exception-handling statements, part of the official C# documentation". Microsoft Learn. Retrieved June 26, 2024.

^ Venners, Bill; Eckel, Bruce (August 18, 2003). "The Trouble with Checked Exceptions". Archived from the original on February 18, 2015. Retrieved March 30, 2010.

^ BillWagner. "Operator overloading - C# reference". Microsoft Learn. Archived from the original on June 24, 2021. Retrieved June 20, 2021.

^ "Expressions/Overload resolution, part of the official C# documentation". Microsoft Learn. Retrieved April 7, 2024.
^ "Types/Constructed Types, part of the official C# documentation". Microsoft Learn. Retrieved April 7, 2024.

^ "Classes/Type Parameter constraints, part of the official C# documentation". Microsoft Learn. Retrieved April 7, 2024.

^ Zhang, Xue Dong; Teng, Zi Mu; Zhao, Dong Wang (September 2014). "Research of the Database Access Technology Under.NET Framework". Applied Mechanics and Materials. 644–650: 3077–3080. doi:10.4028/www.scientific.net/AMM.644-650.3077. S2CID 62201466.

S2CID 62201466. ProQuest 1565579768.

^ Otey, Michael (February 2006). "LINQ to the Future". SQL Server Magazine. Vol. 8, no. 2. pp. 17–21. ProQuest 214859896.

^ Sheldon, William (November 2010). "New Features in LINQ". SQL Server Magazine. Vol. 12, no. 11. pp. 37–40. ProQuest 770609095.

^ BillWagner (September 15, 2021). "Query Syntax and Method Syntax in LINQ (C#)". learn.microsoft.com. Archived from the original on May 23, 2023. Retrieved May 23, 2023.

^ erikdietrich (March 9, 2023). "The history of C# - C# Guide". learn.microsoft.com. Archived from the original on April 28, 2023. Retrieved April 28, 2023.

^ The functional journey of C# - Mads Torgersen - NDC Copenhagen 2022, archived from the original on May 15, 2023, retrieved May 15, 2023

^ "The Beauty of Closures". csharpindepth.com. Archived from the original on May 19, 2023. Retrieved April 28, 2023.

^ a b BillWagner. "Anonymous functions - C# Programming Guide". Microsoft Learn. Archived from the original on April 15, 2021. Retrieved May 15, 2021.

^ a b c "What's New in C# 7.0". Microsoft Docs. Archived from the original on August 6, 2020. Retrieved April 14, 2019.
^ "C# 9.0 on the record". .NET Blog. November 10, 2020. Archived from the original on May 15, 2021. Retrieved May 15, 2021.

^ BillWagner (June 30, 2022). "init keyword - C# Reference". learn.microsoft.com. Archived from the original on May 19, 2023. Retrieved May 19, 2023.

^ The .NET Compiler Platform, .NET Platform, April 28, 2023, archived from the original on April 28, 2023, retrieved April 28, 2023
^ a b c d Archer 2001.

^ a b c d Archer 2001.
^ Lippert, Eric (March 19, 2009). "Representation and Identity". Fabulous Adventures In Coding. Blogs.msdn.com. Archived from the original on July 12, 2011. Retrieved October 4, 2012.

^ "Framework Libraries". Microsoft Learn. April 19, 2023. Archived from the original on July 14, 2019. Retrieved July 14, 2019.

^ BillWagner. "What's new in C# 9.0 - C# Guide". Microsoft Learn. Archived from the original on September 5, 2020. Retrieved May 14, 2021.

^ BillWagner. "Main() and command-line arguments". Microsoft Learn. Archived from the original on August 5, 2021. Retrieved August 5, 2021.
^ "Unlocking the Power of C# Generics: A Comprehensive Guide". April 24, 2024.

^ "Patent Pledge for Open Source Developers". March 16, 2023. Archived from the original on December 7, 2017. Retrieved October 28, 2017.

^ "Patent Cooperation Agreement - Microsoft & Novell Interoperability Collaboration". Microsoft. November 2, 2006. Archived from the original on May 17, 2009. Retrieved July 5, 2009. Microsoft, on behalf of itself and its Subsidiaries (collectively

of itself and its Subsidiaries (collectively "Microsoft"), hereby covenants not to sue Novell's Customers and Novell's Subsidiaries' Customers for infringement under Covered Patents of Microsoft on account of such a Customer's use of specific copies

of such a Customer's use of specific copies of a Covered Product as distributed by Novell or its Subsidiaries (collectively "Novell") for which Novell has received Revenue (directly or indirectly) for such specific copies; provided the foregoing

for such specific copies; provided the foregoing covenant is limited to use by such Customer (i) of such specific copies that are authorized by Novell in consideration for such Revenue, and (ii) within the scope authorized by Novell in consideration

the scope authorized by Novell in consideration for such Revenue.

^ "Definitions". Microsoft. November 2, 2006. Archived from the original on November 4, 2012. Retrieved July 5, 2009.

^ Steinman, Justin (November 7, 2006). "Novell Answers Questions from the Community". Archived from the original on July 16, 2013. Retrieved July 5, 2009. We maintain that Mono does not infringe any Microsoft patents.

^ "Covenant to Downstream Recipients of Moonlight - Microsoft & Novell Interoperability Collaboration". Microsoft. September 28, 2007. Archived from the original on September 23, 2010. Retrieved March 8, 2008. "Downstream Recipient" means an entity

8, 2008. "Downstream Recipient" means an entity or individual that uses for its intended purpose a Moonlight Implementation obtained directly from Novell or through an Intermediate Recipient... Microsoft reserves the right to update (including

Microsoft reserves the right to update (including discontinue) the foregoing covenant... "Moonlight Implementation" means only those specific portions of Moonlight 1.0 or Moonlight 1.1 that run only as a plug-in to a browser on a Personal Computer

as a plug-in to a browser on a Personal Computer and are not licensed under GPLv3 or a Similar License.

^ a b "The RyuJIT transition is complete!". microsoft.com. June 19, 2018. Archived from the original on July 19, 2019. Retrieved July 20, 2021.

^ "Managed Execution Process". microsoft.com. Archived from the original on December 23, 2017. Retrieved July 20, 2021.
^ "coreclr/src/jit/". github.com. Archived from the original on January 9, 2019. Retrieved July 20, 2021.

^ "C# Guide". Microsoft Learn. Archived from the original on August 13, 2022. Retrieved July 28, 2017.
^ "5.0.8". microsoft.com. Archived from the original on April 23, 2020. Retrieved July 20, 2021.

^ "Mitigation: New 64-bit JIT Compiler". microsoft.com. Archived from the original on April 5, 2018. Retrieved July 20, 2021.

^ Etcheverry, Ignacio (October 21, 2017). "Introducing C# in Godot". Godot Engine. Archived from the original on October 26, 2018. Retrieved October 26, 2018.
Sources[edit]

Sources[edit]
Albahari, Joseph (2022). C# 10 in a Nutshell (First ed.). O'Reilly. ISBN 978-1-098-12195-2.
Archer, Tom (2001). "Part 2, Chapter 4: The Type System". Inside C#. Redmond, Washington: Microsoft Press. ISBN 0-7356-1288-9.

Novák, István; Velvart, Andras; Granicz, Adam; Balássy, György; Hajdrik, Attila; Sellers, Mitchel; Hillar, Gastón C.; Molnár, Ágnes; Kanjilal, Joydip (2010). Visual Studio 2010 and .NET 4 Six-in-One. Wrox Press. ISBN 978-0470499481.

Skeet, Jon (2019). C# in Depth (Fourth ed.). Manning. ISBN 978-1617294532.
Further reading[edit]
Drayton, Peter; Albahari, Ben; Neward, Ted (2002). C# Language Pocket Reference. O'Reilly. ISBN 0-596-00429-X.

Petzold, Charles (2002). Programming Microsoft Windows with C#. Microsoft Press. ISBN 0-7356-1370-2.
External links[edit]
C# Language Specification
C# Programming Guide
ISO C# Language Specification
C# Compiler Platform ("Roslyn") source code

C# Compiler Platform ("Roslyn") source code
vteCommon Language InfrastructureArchitecture
Application domain
Code Access Security
Common Intermediate Language
instructions
Common Type System
Platform Invocation Services
Virtual Execution System

Virtual Execution System
Components
Assembly
Delegate
Global Assembly Cache
Manifest
Metadata
Standard Libraries
ImplementationsMicrosoft
.NET
.NET Framework
.NET Compact Framework
.NET Micro Framework
Other
Mono
DotGNU
LanguagesMajor languages
C#

Other
Mono
DotGNU
LanguagesMajor languages
C#
Visual Basic
F#
PowerShell
Other
Axum
A#
Boo
Cobra
C++/CLI
IronScheme
IronPython
IronRuby
JScript .NET
J#
Nemerle
Oxygene
Phalanger
Q#
Scala
Small Basic
Comparison
C# and Java
C# and Visual Basic .NET

Comparison
C# and Java
C# and Visual Basic .NET
Visual Basic and Visual Basic .NET
vteMicrosoft free and open-source software (FOSS)Overview
Microsoft and open source
Shared Source Initiative
SoftwareApplications
3D Movie Maker
Atom
Conference XP

3D Movie Maker
Atom
Conference XP
Family.Show
File Manager
Open Live Writer
Microsoft PowerToys
Terminal
Windows Calculator
Windows Console
Windows Package Manager
WorldWide Telescope
XML Notepad
Video games
Allegiance
Programminglanguages
Bosque
C#

Allegiance
Programminglanguages
Bosque
C#
Dafny
F#
F*
GW-BASIC
IronPython
IronRuby
Lean
P
Power Fx
PowerShell
Project Verona
Q#
Small Basic Online
TypeScript
Visual Basic
Frameworks,development tools
.NET
.NET Framework
.NET Gadgeteer
.NET MAUI

.NET
.NET Framework
.NET Gadgeteer
.NET MAUI
.NET Micro Framework
AirSim
ASP.NET
ASP.NET AJAX
ASP.NET Core
ASP.NET MVC
ASP.NET Razor
ASP.NET Web Forms
Avalonia
Babylon.js
BitFunnel
Blazor
C++/WinRT
CCF
ChakraCore
CLR Profiler
Dapr
DeepSpeed
DiskSpd

ChakraCore
CLR Profiler
Dapr
DeepSpeed
DiskSpd
Dryad
Dynamic Language Runtime
eBPF on Windows
Electron
Entity Framework
Fluent Design System
Fluid Framework
Infer.NET
LightGBM
Managed Extensibility Framework
Microsoft Automatic Graph Layout

Microsoft Automatic Graph Layout
Microsoft C++ Standard Library
Microsoft Cognitive Toolkit
Microsoft Design Language
Microsoft Detours
Microsoft Enterprise Library
Microsoft SEAL
mimalloc
Mixed Reality Toolkit
ML.NET
mod_mono
Mono
MonoDevelop

ML.NET
mod_mono
Mono
MonoDevelop
MSBuild
MsQuic
Neural Network Intelligence
npm
NuGet
OneFuzz
Open Management Infrastructure
Open Neural Network Exchange
Open Service Mesh
Open XML SDK
Orleans
Playwright
ProcDump
ProcMon

Open XML SDK
Orleans
Playwright
ProcDump
ProcMon
Python Tools for Visual Studio
R Tools for Visual Studio
RecursiveExtractor
Roslyn
Sandcastle
SignalR
StyleCop
SVNBridge
T2 Temporal Prover
Text Template Transformation Toolkit
TLA+ Toolbox
U-Prove

TLA+ Toolbox
U-Prove
vcpkg
Virtual File System for Git
Voldemort
VoTT
Vowpal Wabbit
Windows App SDK
Windows Communication Foundation
Windows Driver Frameworks
KMDF
UMDF
Windows Forms
Windows Presentation Foundation
Windows Template Library

Windows Template Library
Windows UI Library
WinJS
WinObjC
WiX
XDP for Windows
XSP
xUnit.net
Z3 Theorem Prover
Operating systems
MS-DOS (v1.25, v2.0 & v4.0)
Barrelfish
SONiC
Azure Linux
Other
ChronoZoom
Extensible Storage Engine
FlexWiki
FourQ
Gollum

Extensible Storage Engine
FlexWiki
FourQ
Gollum
Project Mu
ReactiveX
SILK
TLAPS
TPM 2.0 Reference Implementation
WikiBhasha
Licenses
Microsoft Public License
Microsoft Reciprocal License
Forges
CodePlex
GitHub
Related
.NET Foundation

Forges
CodePlex
GitHub
Related
.NET Foundation
F# Software Foundation
Microsoft Open Specification Promise
Open Letter to Hobbyists
Open Source Security Foundation
Outercurve Foundation
Category

Outercurve Foundation
Category
vteStandards of Ecma InternationalApplication interfaces
ANSI escape code
APIW
Common Language Infrastructure
Office Open XML
OpenXPS
File systems (tape)
Advanced Intelligent Tape
DDS
DLT
Super DLT

Advanced Intelligent Tape
DDS
DLT
Super DLT
Linear Tape-Open (Ultrium-1)
VXA
File systems (disk)
CD-ROM
CD File System (CDFS)
FAT
FAT12
FAT16
FAT16B
FD
UDF
Ultra Density Optical
Universal Media Disc
Holographic Versatile Disc
Graphics
Universal 3D

Holographic Versatile Disc
Graphics
Universal 3D
Programming languages
C++/CLI
C#
Eiffel
JavaScript (E4X, ECMAScript)
Dart
Minimal BASIC
Full BASIC
Radio link interfaces
NFC
UWB
Other
ECMA-35
JSON
List of Ecma standards (1961 – present)

JSON
List of Ecma standards (1961 – present)
vteISO standards by standard numberList of ISO standards – ISO romanizations – IEC standards1–9999
1
2
3
4
6
7
9
16
17
31
-0
-1
-3
-4
-5
-6
-7
-8
-9
-10
-11
-12
-13
68-1
128
216
217
226
228
233
259
261

-11
-12
-13
68-1
128
216
217
226
228
233
259
261
262
302
306
361
500
518
519
639
-1
-2
-3
-5
-6
646
657
668
690
704
732
764
838
843
860
898
965
999
1000
1004
1007
1073-1
1073-2
1155
1413
1538
1629
1745
1989
2014
2015
2022
2033
2047
2108
2145
2146

1745
1989
2014
2015
2022
2033
2047
2108
2145
2146
2240
2281
2533
2709
2711
2720
2788
2848
2852
2921
3029
3103
3166
-1
-2
-3
3297
3307
3601
3602
3864
3901
3950
3977
4031
4157
4165
4217
4909
5218
5426
5427
5428
5725
5775
5776
5800
5807
5964
6166
6344

5427
5428
5725
5775
5776
5800
5807
5964
6166
6344
6346
6373
6385
6425
6429
6438
6523
6709
6943
7001
7002
7010
7027
7064
7098
7185
7200
7498
-1
7637
7736
7810
7811
7812
7813
7816
7942
8000
8093
8178
8217
8373
8501-1
8571
8583
8601
8613
8632
8651
8652

8373
8501-1
8571
8583
8601
8613
8632
8651
8652
8691
8805/8806
8807
8820-5
8859
-1
-2
-3
-4
-5
-6
-7
-8
-8-I
-9
-10
-11
-12
-13
-14
-15
-16
8879
9000/9001
9036
9075
9126
9141
9227
9241
9293
9314
9362
9407
9496
9506
9529
9564
9592/9593
9594
9660

9362
9407
9496
9506
9529
9564
9592/9593
9594
9660
9797-1
9897
9899
9945
9984
9985
9995
10000–19999
10006
10007
10116
10118-3
10160
10161
10165
10179
10206
10218
10279
10303
-11
-21
-22
-28
-238
10383
10585
10589
10628
10646
10664
10746
10861
10957

10585
10589
10628
10646
10664
10746
10861
10957
10962
10967
11073
11170
11172
11179
11404
11544
11783
11784
11785
11801
11889
11898
11940 (-2)
11941
11941 (TR)
11992
12006
12052
12182
12207
12234-2
12620
13211
-1
-2
13216
13250
13399
13406-2
13450

12620
13211
-1
-2
13216
13250
13399
13406-2
13450
13485
13490
13567
13568
13584
13616
13816
13818
14000
14031
14224
14289
14396
14443
14496
-2
-3
-6
-10
-11
-12
-14
-17
-20
14617
14644
14649
14651
14698
14764
14882
14971
15022
15189
15288
15291

14698
14764
14882
14971
15022
15189
15288
15291
15398
15408
15444
-3
-9
15445
15438
15504
15511
15686
15693
15706
-2
15707
15897
15919
15924
15926
15926 WIP
15930
15938
16023
16262
16355-1
16485
16612-2
16750
16949 (TS)
17024
17025
17100
17203
17369

16750
16949 (TS)
17024
17025
17100
17203
17369
17442
17506
17799
18004
18014
18181
18245
18629
18916
19005
19011
19092
-1
-2
19114
19115
19125
19136
19407
19439
19500
19501
19502
19503
19505
19506
19507
19508
19509
19510
19600
19752
19757
19770

19507
19508
19509
19510
19600
19752
19757
19770
19775-1
19794-5
19831
20000–29999
20000
20022
20121
20400
20802
20830
21000
21001
21047
21122
21500
21827
22000
22275
22300
22301
22395
22537
23000
23003
23008
23009
23090-3
23092
23094-1
23094-2
23270

23008
23009
23090-3
23092
23094-1
23094-2
23270
23271
23360
23941
24517
24613
24617
24707
24728
25178
25964
26000
26262
26300
26324
27000 series
27000
27001
27002
27005
27006
27729
28000
29110
29148
29199-2
29500
30000+
30170
31000
32000
37001
38500

29500
30000+
30170
31000
32000
37001
38500
39075
40500
42010
45001
50001
55000
56000
80000
Category
vteProgramming languages
Comparison
Timeline
History
Ada
ALGOL
Simula
APL
Assembly
BASIC
Visual Basic
classic
.NET
C
C++
C#
COBOL
Erlang
Forth

classic
.NET
C
C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Julia
Kotlin
Lisp
Lua
MATLAB
ML
Pascal
Object Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Scratch
Shell
Smalltalk
Swift
more...
Lists: Alphabetical
Categorical

Swift
more...
Lists: Alphabetical
Categorical
Generational
Non-English-based
Category
vteIEC standardsIEC
60027
60034
60038
60062
60063
60068
60112
60228
60269
60297
60309
60320
60364
60446
60559
60601
60870
60870-5
60870-6
60906-1
60908
60929
60958

60870
60870-5
60870-6
60906-1
60908
60929
60958
61030
61131
61131-3
61131-9
61158
61162
61334
61355
61360
61400
61499
61508
61511
61784
61850
61851
61883
61960
61968
61970
62014-4
62026
62056
62061
62196
62262
62264
62304
62325
62351
62365
62366

62196
62262
62264
62304
62325
62351
62365
62366
62379
62386
62455
62680
62682
62700
63110
63119
63382
ISO/IEC
646
1989
2022
4909
5218
6429
6523
7810
7811
7812
7813
7816
7942
8613
8632
8652
8859
9126
9293
9496
9529
9592
9593
9899
9945
9995
10021

9293
9496
9529
9592
9593
9899
9945
9995
10021
10116
10165
10179
10279
10646
10967
11172
11179
11404
11544
11801
12207
13250
13346
13522-5
13568
13816
13818
14443
14496
14651
14882
15288
15291
15408
15444
15445
15504
15511
15693
15897
15938
16262

15444
15445
15504
15511
15693
15897
15938
16262
16485
17024
17025
18004
18014
18181
19752
19757
19770
19788
20000
20802
21000
21827
22275
22537
23000
23003
23008
23270
23360
24707
24727
24744
24752
26300
27000
27000-series
27002
27040
29110
29119

26300
27000
27000-series
27002
27040
29110
29119
33001
38500
39075
42010
80000
81346
Related
International Electrotechnical Commission
Authority control databases NationalGermanyUnited StatesFranceBnF dataCzech RepublicIsraelOtherELMCIP

Retrieved from "https://en.wikipedia.org/w/index.php?title=C_Sharp_(programming_language)&oldid=1249480984"

Categories: C Sharp programming language family2000 softwareAmerican inventionsProgramming languagesHigh-level programming languages.NET programming languagesClass-based programming languagesEcma standardsFunctional languagesIEC standardsISO

standardsFunctional languagesIEC standardsISO standardsMicrosoft programming languagesMulti-paradigm programming languagesProgramming languages created in 2000Programming languages with an ISO standardStatically typed programming languagesCompiled

typed programming languagesCompiled programming languagesHidden categories: Webarchive template wayback linksCS1 maint: numeric names: authors listCS1: long volume valueArticles with short descriptionShort description is different from

descriptionShort description is different from WikidataRestricted titles (non-leading number sign)Use mdy dates from April 2020Articles containing potentially dated statements from November 2023All articles containing potentially dated statementsAll

containing potentially dated statementsAll articles with unsourced statementsArticles with unsourced statements from March 2022Articles with example C++ codeArticles with example C Sharp code

This page was last edited on 5 October 2024, at 04:23 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License;

additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policy
About Wikipedia
Disclaimers

Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view

C (programming language) - Wikipedia
Jump to content
Main menu
Main menu
move to sidebar
hide
Navigation
Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us
Contribute
HelpLearn to editCommunity portalRecent changesUpload file

Search
Search
Donate
Appearance
Create account
Log in
Personal tools
Create account Log in
Pages for logged out editors learn more
ContributionsTalk
Contents
move to sidebar
hide
(Top)
1
Overview
Toggle Overview subsection
1.1

(Top)
1
Overview
Toggle Overview subsection
1.1
Relations to other languages
2
History
Toggle History subsection
2.1
Early developments
2.1.1
B
2.1.2
New B and first C release
2.1.3
Structures and Unix kernel re-write
2.2
K&R C
2.3
ANSI C and ISO C

2.2
K&R C
2.3
ANSI C and ISO C
2.4
C99
2.5
C11
2.6
C17
2.7
C23
2.8
C2Y
2.9
Embedded C
3
Syntax
Toggle Syntax subsection
3.1
Character set
3.2
Reserved words
3.3
Operators
4
"Hello, world" example
5
Data types
Toggle Data types subsection
5.1

5
Data types
Toggle Data types subsection
5.1
Pointers
5.2
Arrays
5.3
Array–pointer interchangeability
6
Memory management
7
Libraries
Toggle Libraries subsection
7.1
File handling and streams
8
Language tools
9
Uses
Toggle Uses subsection
9.1

Language tools
9
Uses
Toggle Uses subsection
9.1
Rationale for use in systems programming
9.2
Used for computationally-intensive libraries
9.3
C as an intermediate language
9.4
Other languages written in C
9.5
Once used for web development
9.6

9.5
Once used for web development
9.6
Web servers
9.7
End-user applications
10
Limitations
11
Related languages
12
See also
13
Notes
14
References
15
Sources
16
Further reading
17
External links
Toggle the table of contents
C (programming language)

C (programming language)
123 languages

AfrikaansAlemannischአማርኛالعربيةAragonésঅসমীয়াAsturianuAzərbaycancaتۆرکجهবাংলা閩南語 / Bân-lâm-gúБеларускаяБеларуская

/ Bân-lâm-gúБеларускаяБеларуская (тарашкевіца)भोजपुरीБългарскиBosanskiBrezhonegCatalàЧӑвашлаČeštinaCorsuCymraegDanskالدارجةDeutschEestiΕλληνικάEspañolEsperantoEuskaraفارسیFrançaisGaeilgeGalegoગુજરાતી客家語 /

/ Hak-kâ-ngî한국어HausaՀայերենहिन्दीHrvatskiIdoBahasa IndonesiaInterlinguaIsiXhosaÍslenskaItalianoעבריתJawaಕನ್ನಡქართულიҚазақшаKiswahiliKurdîКыргызчаລາວLatinaLatviešuLietuviųLombardMagyarमैथिलीМакедонскиMalagasyമലയാളംमराठीBahasa Melayuꯃꯤꯇꯩ ꯂꯣꯟ閩東語 /

Melayuꯃꯤꯇꯩ ꯂꯣꯟ閩東語 / Mìng-dĕ̤ng-ngṳ̄Монголမြန်မာဘာသာNederlandsनेपाली日本語Norsk bokmålNorsk nynorskOccitanଓଡ଼ିଆOʻzbekcha / ўзбекчаਪੰਜਾਬੀپنجابیပအိုဝ်ႏဘာႏသာႏភាសាខ្មែរPiemontèisPolskiPortuguêsQaraqalpaqshaRomânăRuna SimiРусскийСаха

SimiРусскийСаха тылаᱥᱟᱱᱛᱟᱲᱤScotsShqipසිංහලSimple EnglishSlovenčinaSlovenščinaСрпски / srpskiSrpskohrvatski / српскохрватскиSuomiSvenskaTagalogதமிழ்TaqbaylitТатарча / tatarçaతెలుగుไทยТоҷикӣTürkçeBasa UgiУкраїнськаاردوVènetoTiếng

UgiУкраїнськаاردوVènetoTiếng Việt文言Winaray吴语ייִדיש粵語Žemaitėška中文ⵜⴰⵎⴰⵣⵉⵖⵜ ⵜⴰⵏⴰⵡⴰⵢⵜ

Edit links
ArticleTalk
English
ReadEditView history
Tools
Tools
move to sidebar
hide
Actions
ReadEditView history
General

hide
Actions
ReadEditView history
General
What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata item
Print/export
Download as PDFPrintable version

Print/export
Download as PDFPrintable version
In other projects
Wikimedia CommonsWikibooksWikiquoteWikiversity
Appearance
move to sidebar
hide
Checked
From Wikipedia, the free encyclopedia

Checked
From Wikipedia, the free encyclopedia
Page version statusThis is an accepted version of this pageThis is the latest accepted revision, reviewed on 12 October 2024.
General-purpose programming language
Not to be confused with C++ or C#.

CLogotype used on the cover of the first edition of The C Programming Language[1]ParadigmMulti-paradigm: imperative (procedural), structuredDesigned byDennis RitchieDeveloperANSI X3J11 (ANSI C); ISO/IEC JTC 1 (Joint Technical Committee 1) / SC 22

JTC 1 (Joint Technical Committee 1) / SC 22 (Subcommittee 22) / WG 14 (Working Group 14) (ISO C)First appeared1972; 52 years ago (1972)[2]Stable releaseC17

/ June 2018; 6 years ago (2018-06)Preview releaseC23 (N3220)
/ February 21, 2024; 7 months ago (2024-02-21)[3]

Typing disciplineStatic, weak, manifest, nominalOSCross-platformFilename extensions.c, .hWebsitewww.iso.org/standard/74528.html www.open-std.org/jtc1/sc22/wg14/Major implementationspcc, GCC, Clang, Intel C, C++Builder, Microsoft Visual C++, Watcom

Intel C, C++Builder, Microsoft Visual C++, Watcom CDialectsCyclone, Unified Parallel C, Split-C, Cilk, C*Influenced byB (BCPL, CPL), ALGOL 68,[4] PL/I, FORTRANInfluencedNumerous: AMPL, AWK, csh, C++, C--, C#, Objective-C, D, Go, Java, JavaScript,

C--, C#, Objective-C, D, Go, Java, JavaScript, JS++, Julia, Limbo, LPC, Perl, PHP, Pike, Processing, Python, Rust, Seed7, V (Vlang), Vala, Verilog (HDL),[5] Nim, Zig

C Programming at Wikibooks

C (pronounced /ˈsiː/ – like the letter c)[6] is a general-purpose programming language. It was created in the 1970s by Dennis Ritchie and remains very widely used and influential. By design, C's features cleanly reflect the capabilities of the

features cleanly reflect the capabilities of the targeted CPUs. It has found lasting use in operating systems code (especially in kernels[7]), device drivers, and protocol stacks, but its use in application software has been decreasing.[8] C is

application software has been decreasing.[8] C is commonly used on computer architectures that range from the largest supercomputers to the smallest microcontrollers and embedded systems.

A successor to the programming language B, C was originally developed at Bell Labs by Ritchie between 1972 and 1973 to construct utilities running on Unix. It was applied to re-implementing the kernel of the Unix operating system.[9] During the

of the Unix operating system.[9] During the 1980s, C gradually gained popularity. It has become one of the most widely used programming languages,[10][11] with C compilers available for practically all modern computer architectures and operating

all modern computer architectures and operating systems. The book The C Programming Language, co-authored by the original language designer, served for many years as the de facto standard for the language.[12][1] C has been standardized since 1989

C has been standardized since 1989 by the American National Standards Institute (ANSI) and, subsequently, jointly by the International Organization for Standardization (ISO) and the International Electrotechnical Commission (IEC).

C is an imperative procedural language, supporting structured programming, lexical variable scope, and recursion, with a static type system. It was designed to be compiled to provide low-level access to memory and language constructs that map

access to memory and language constructs that map efficiently to machine instructions, all with minimal runtime support. Despite its low-level capabilities, the language was designed to encourage cross-platform programming. A standards-compliant C

programming. A standards-compliant C program written with portability in mind can be compiled for a wide variety of computer platforms and operating systems with few changes to its source code.

Since 2000, C has consistently ranked among the top four languages in the TIOBE index, a measure of the popularity of programming languages.[13]
Overview[edit]
Dennis Ritchie (right), the inventor of the C programming language, with Ken Thompson

C is an imperative, procedural language in the ALGOL tradition.  It has a static type system. In C, all executable code is contained within subroutines (also called "functions", though not in the sense of functional programming). Function parameters

of functional programming). Function parameters are passed by value, although arrays are passed as pointers, i.e. the address of the first item in the array. Pass-by-reference is simulated in C by explicitly passing pointers to the thing being

by explicitly passing pointers to the thing being referenced.

C program source text is free-form code.  Semicolons terminate statements, while curly braces are used to group statements into blocks.
The C language also exhibits the following characteristics:

The language has a small, fixed number of keywords, including a full set of control flow primitives: if/else, for, do/while, while, and switch. User-defined names are not distinguished from keywords by any kind of sigil.

It has a large number of arithmetic, bitwise, and logic operators: +,+=,++,&,||, etc.
More than one assignment may be performed in a single statement.
Functions:
Function return values can be ignored, when not needed.

Function and data pointers permit ad hoc run-time polymorphism.
Functions may not be defined within the lexical scope of other functions.
Variables may be defined within a function, with scope.
A function may call itself, so recursion is supported.

Data typing is static, but weakly enforced; all data has a type, but implicit conversions are possible.
User-defined (typedef) and compound types are possible.

Heterogeneous aggregate data types (struct) allow related data elements to be accessed and assigned as a unit. The contents of whole structs cannot be compared using a single built-in operator (the elements must be compared individually).

Union is a structure with overlapping members; it allows multiple data types to share the same memory location.

Array indexing is a secondary notation, defined in terms of pointer arithmetic. Whole arrays cannot be assigned or compared using a single built-in operator. There is no "array" keyword in use or definition; instead, square brackets indicate arrays

instead, square brackets indicate arrays syntactically, for example month[11].

Enumerated types are possible with the enum keyword. They are freely interconvertible with integers.
Strings are not a distinct data type, but are conventionally implemented as null-terminated character arrays.

Low-level access to computer memory is possible by converting machine addresses to pointers.
Procedures (subroutines not returning values) are a special case of function, with an empty return type void.

Memory can be allocated to a program with calls to library routines.
A preprocessor performs macro definition, source code file inclusion, and conditional compilation.

There is a basic form of modularity: files can be compiled separately and linked together, with control over which functions and data objects are visible to other files via static and extern attributes.

Complex functionality such as I/O, string manipulation, and mathematical functions are consistently delegated to library routines.

The generated code after compilation has relatively straightforward needs on the underlying platform, which makes it suitable for creating operating systems and for use in embedded systems.

While C does not include certain features found in other languages (such as object orientation and garbage collection), these can be implemented or emulated, often through the use of external libraries (e.g., the GLib Object System or the Boehm

(e.g., the GLib Object System or the Boehm garbage collector).

Relations to other languages[edit]
Main article: List of C-family programming languages

Many later languages have borrowed directly or indirectly from C, including C++, C#, Unix's C shell, D, Go, Java, JavaScript (including transpilers), Julia, Limbo, LPC, Objective-C, Perl, PHP, Python, Ruby, Rust, Swift, Verilog and SystemVerilog

Ruby, Rust, Swift, Verilog and SystemVerilog (hardware description languages).[5]  These languages have drawn many of their control structures and other basic features from C. Most of them also express highly similar syntax to C, and they tend to

highly similar syntax to C, and they tend to combine the recognizable expression and statement syntax of C with underlying type systems, data models, and semantics that can be radically different.

History[edit]
Early developments[edit]
Timeline of C language
Year
Informalname
Officialstandard
1972
first release
—
1978
K&R C
—
1989,1990
ANSI C, C89,ISO C, C90
ANSI X3.159-1989ISO/IEC 9899:1990
1999
C99, C9X
ISO/IEC 9899:1999
2011
C11, C1X

1999
C99, C9X
ISO/IEC 9899:1999
2011
C11, C1X
ISO/IEC 9899:2011
2018
C17
ISO/IEC 9899:2018
2024
C23, C2X
ISO/IEC 9899:2024
Future
C2Y
—

The origin of C is closely tied to the development of the Unix operating system, originally implemented in assembly language on a PDP-7 by Dennis Ritchie and Ken Thompson, incorporating several ideas from colleagues.  Eventually, they decided to

from colleagues.  Eventually, they decided to port the operating system to a PDP-11. The original PDP-11 version of Unix was also developed in assembly language.[9]

B[edit]
Main article: B (programming language)

Thompson wanted a programming language for developing utilities for the new platform. At first he tried to write a Fortran compiler, but he soon gave up the idea. Instead, he created a cut-down version of the recently developed systems programming

of the recently developed systems programming language called BCPL. The official description of BCPL was not available at the time,[14] and Thompson modified the syntax to be less wordy and similar to a simplified ALGOL known as SMALGOL.[15]

to a simplified ALGOL known as SMALGOL.[15]  Thompson called the result B.[9] He described B as "BCPL semantics with a lot of SMALGOL syntax".[15] Like BCPL, B had a bootstrapping compiler to facilitate porting to new machines.[15] However, few

porting to new machines.[15] However, few utilities were ultimately written in B because it was too slow and could not take advantage of PDP-11 features such as byte addressability.

New B and first C release[edit]

In 1971 Ritchie  started to improve B, to use the features of the more-powerful PDP-11.  A significant addition was a character data type.  He called this New B (NB).[15]  Thompson started to use NB to write the Unix kernel, and his requirements

NB to write the Unix kernel, and his requirements shaped the direction of the language development.[15][16]  Through to 1972, richer types were added to the NB language: NB had arrays of int and char. Pointers, the ability to generate pointers to

Pointers, the ability to generate pointers to other types, arrays of all types, and types to be returned from functions were all also added. Arrays within expressions became pointers. A new compiler was written, and the language was renamed C.[9]

The C compiler and some utilities made with it were included in Version 2 Unix, which is also known as Research Unix.[17]
Structures and Unix kernel re-write[edit]

Structures and Unix kernel re-write[edit]
At Version 4 Unix, released in November 1973, the Unix kernel was extensively re-implemented in C.[9] By this time, the C language had acquired some powerful features such as struct types.

The preprocessor was introduced around 1973 at the urging of Alan Snyder and also in recognition of the usefulness of the file-inclusion mechanisms available in BCPL and PL/I. Its original version provided only included files and simple string

provided only included files and simple string replacements: #include and #define of parameterless macros. Soon after that, it was extended, mostly by Mike Lesk and then by John Reiser, to incorporate macros with arguments and conditional

incorporate macros with arguments and conditional compilation.[9]

Unix was one of the first operating system kernels implemented in a language other than assembly. Earlier instances include the Multics system (which was written in PL/I) and Master Control Program (MCP) for the Burroughs B5000 (which was written in

for the Burroughs B5000 (which was written in ALGOL) in 1961. In around  1977, Ritchie and Stephen C. Johnson made further changes to the language to facilitate portability of the Unix operating system.  Johnson's Portable C Compiler served as the

Johnson's Portable C Compiler served as the basis for several implementations of C on new platforms.[16]

K&R C[edit]
The cover of the book The C Programming Language, first edition, by Brian Kernighan and Dennis Ritchie

In 1978 Brian Kernighan and Dennis Ritchie published the first edition of The C Programming Language.[18] Known as K&R from the initials of its authors, the book served for many years as an informal specification of the language. The version of C

specification of the language. The version of C that it describes is commonly referred to as "K&R C". As this was released in 1978, it is now also referred to as C78.[19] The second edition of the book[20] covers the later ANSI C standard, described

covers the later ANSI C standard, described below.

K&R introduced several language features:
Standard I/O library
long int data type
unsigned int data type

Compound assignment operators of the form =op (such as =-) were changed to the form op= (that is, -=) to remove the semantic ambiguity created by constructs such as i=-10, which had been interpreted as i =- 10 (decrement i by 10) instead of the

as i =- 10 (decrement i by 10) instead of the possibly intended i = -10 (let i be −10).

Even after the publication of the 1989 ANSI standard, for many years K&R C was still considered the "lowest common denominator" to which C programmers restricted themselves when maximum portability was desired, since many older compilers were still

desired, since many older compilers were still in use, and because carefully written K&R C code can be legal Standard C as well.

In early versions of C, only functions that return types other than int must be declared if used before the function definition; functions used without prior declaration were presumed to return type int.
For example:

For example:
long some_function(); /* This is a function declaration, so the compiler can know the name and return type of this function. */

/* int */ other_function(); /* Another function declaration.  Because this is an early version of C, there is an implicit 'int' type here.  A comment shows where the explicit 'int' type specifier would be required in later versions. */

/* int */ calling_function() /* This is a function definition, including the body of the code following in the { curly brackets }. Because no return type is specified, the function implicitly returns an 'int' in this early version of C. */
{

{
long test1;
register /* int */ test2; /* Again, note that 'int' is not required here. The 'int' type specifier */
/* in the comment would be required in later versions of C. */

/* The 'register' keyword indicates to the compiler that this variable should */
/* ideally be stored in a register as opposed to within the stack frame. */
test1 = some_function();
if (test1 > 1)
test2 = 0;
else
test2 = other_function();

test2 = 0;
else
test2 = other_function();
return test2;
}
The int type specifiers which are commented out could be omitted in K&R C, but are required in later standards.

Since K&R function declarations did not include any information about function arguments, function parameter type checks were not performed, although some compilers would issue a warning message if a local function was called with the wrong number

a local function was called with the wrong number of arguments, or if different calls to an external function used different numbers or types of arguments.  Separate tools such as Unix's lint utility were developed that (among other things) could

were developed that (among other things) could check for consistency of function use across multiple source files.

In the years following the publication of K&R C, several features were added to the language, supported by compilers from AT&T (in particular PCC[21]) and some other vendors. These included:
void functions (i.e., functions with no return value)

functions returning struct or union types (previously only a single pointer, integer or float could be returned)
assignment for struct data types

assignment for struct data types
enumerated types (previously, preprocessor definitions for integer fixed values were used, e.g. #define GREEN 3)

The large number of extensions and lack of agreement on a standard library, together with the language popularity and the fact that not even the Unix compilers precisely implemented the K&R specification, led to the necessity of standardization.[22]

ANSI C and ISO C[edit]
Main article: ANSI C

Main article: ANSI C
During the late 1970s and 1980s, versions of C were implemented for a wide variety of mainframe computers, minicomputers, and microcomputers, including the IBM PC, as its popularity began to increase significantly.

In 1983 the American National Standards Institute (ANSI) formed a committee, X3J11, to establish a standard specification of C. X3J11 based the C standard on the Unix implementation; however, the non-portable portion of the Unix C library was handed

portion of the Unix C library was handed off to the IEEE working group 1003 to become the basis for the 1988 POSIX standard. In 1989, the C standard was ratified as ANSI X3.159-1989 "Programming Language C".  This version of the language is often

C".  This version of the language is often referred to as ANSI C, Standard C, or sometimes C89.

In 1990 the ANSI C standard (with formatting changes) was adopted by the International Organization for Standardization (ISO) as ISO/IEC 9899:1990, which is sometimes called C90. Therefore, the terms "C89" and "C90" refer to the same programming

"C89" and "C90" refer to the same programming language.

ANSI, like other national standards bodies, no longer develops the C standard independently, but defers to the international C standard, maintained by the working group ISO/IEC JTC1/SC22/WG14.  National adoption of an update to the international

adoption of an update to the international standard typically occurs within a year of ISO publication.

One of the aims of the C standardization process was to produce a superset of K&R C, incorporating many of the subsequently introduced unofficial features. The standards committee also included several additional features such as function prototypes

additional features such as function prototypes (borrowed from C++), void pointers, support for international character sets and locales, and preprocessor enhancements. Although the syntax for parameter declarations was augmented to include the

declarations was augmented to include the style used in C++, the K&R interface continued to be permitted, for compatibility with existing source code.

C89 is supported by current C compilers, and most modern C code is based on it. Any program written only in Standard C and without any hardware-dependent assumptions will run correctly on any platform with a conforming C implementation, within its

with a conforming C implementation, within its resource limits.  Without such precautions, programs may compile only on a certain platform or with a particular compiler, due, for example, to the use of non-standard libraries, such as GUI libraries,

of non-standard libraries, such as GUI libraries, or to a reliance on compiler- or platform-specific attributes such as the exact size of data types and byte endianness.

In cases where code must be compilable by either standard-conforming or K&R C-based compilers, the __STDC__ macro can be used to split the code into Standard and K&R sections to prevent the use on a K&R C-based compiler of features available only in

C-based compiler of features available only in Standard C.

After the ANSI/ISO standardization process, the C language specification remained relatively static for several years. In 1995, Normative Amendment 1 to the 1990 C standard (ISO/IEC 9899/AMD1:1995, known informally as C95) was published, to correct

informally as C95) was published, to correct some details and to add more extensive support for international character sets.[23]

C99[edit]
Main article: C99
The C standard was further revised in the late 1990s, leading to the publication of ISO/IEC 9899:1999 in 1999, which is commonly referred to as "C99". It has since been amended three times by Technical Corrigenda.[24]

C99 introduced several new features, including inline functions, several new data types (including long long int and a complex type to represent complex numbers), variable-length arrays and flexible array members, improved support for IEEE 754

array members, improved support for IEEE 754 floating point, support for variadic macros (macros of variable arity), and support for one-line comments beginning with //, as in BCPL or C++. Many of these had already been implemented as extensions in

had already been implemented as extensions in several C compilers.

C99 is for the most part backward compatible with C90, but is stricter in some ways; in particular, a declaration that lacks a type specifier no longer has int implicitly assumed. A standard macro __STDC_VERSION__ is defined with value 199901L to

__STDC_VERSION__ is defined with value 199901L to indicate that C99 support is available. GCC, Solaris Studio, and other C compilers now[when?] support many or all of the new features of C99. The C compiler in Microsoft Visual C++, however,

The C compiler in Microsoft Visual C++, however, implements the C89 standard and those parts of C99 that are required for compatibility with C++11.[25][needs update]

In addition, the C99 standard requires support for identifiers using Unicode in the form of escaped characters (e.g. \u0040 or \U0001f431) and suggests support for raw Unicode names.
C11[edit]
Main article: C11 (C standard revision)

In 2007 work began on another revision of the C standard, informally called "C1X" until its official publication of ISO/IEC 9899:2011 on 2011-12-08. The C standards committee adopted guidelines to limit the adoption of new features that had not been

the adoption of new features that had not been tested by existing implementations.

The C11 standard adds numerous new features to C and the library, including type generic macros, anonymous structures, improved Unicode support, atomic operations, multi-threading, and bounds-checked functions.  It also makes some portions of the

functions.  It also makes some portions of the existing C99 library optional, and improves compatibility with C++. The standard macro __STDC_VERSION__ is defined as 201112L to indicate that C11 support is available.

C17[edit]
Main article: C17 (C standard revision)

Published in June 2018 as ISO/IEC 9899:2018, C17 is the current standard for the C programming language. It introduces no new language features, only technical corrections, and clarifications to defects in C11. The standard macro __STDC_VERSION__ is

in C11. The standard macro __STDC_VERSION__ is defined as 201710L to indicate that C17 support is available.

C23[edit]
Main article: C23 (C standard revision)

C23 is the informal name for the next (after C17) major C language standard revision. It was informally known as "C2X" through most of its development. C23 is expected to be published in early 2024 as ISO/IEC 9899:2024.[26]  The standard macro

as ISO/IEC 9899:2024.[26]  The standard macro __STDC_VERSION__ is defined as 202311L to indicate that C23 support is available.

C2Y[edit]

C2Y is a temporary informal name for the next major C language standard revision, after C23 (C2X), that is hoped to be released later in the 2020s decade, hence the '2' in "C2Y". An early working draft of C2Y was released in February 2024 as N3220

of C2Y was released in February 2024 as N3220 by the working group ISO/IEC JTC1/SC22/WG14.[27]

Embedded C[edit]
Main article: Embedded C
Historically, embedded C programming requires nonstandard extensions to the C language to support exotic features such as fixed-point arithmetic, multiple distinct memory banks, and basic I/O operations.

In 2008, the C Standards Committee published a technical report extending the C language[28] to address these issues by providing a common standard for all implementations to adhere to. It includes a number of features not available in normal C,

a number of features not available in normal C, such as fixed-point arithmetic, named address spaces, and basic I/O hardware addressing.

Syntax[edit]
Main article: C syntax

C has a formal grammar specified by the C standard.[29] Line endings are generally not significant in C; however, line boundaries do have significance during the preprocessing phase. Comments may appear either between the delimiters /* and */, or

either between the delimiters /* and */, or (since C99) following // until the end of the line. Comments delimited by /* and */ do not nest, and these sequences of characters are not interpreted as comment delimiters if they appear inside string or

delimiters if they appear inside string or character literals.[30]

C source files contain declarations and function definitions. Function definitions, in turn, contain declarations and statements. Declarations either define new types using keywords such as struct, union, and enum, or assign types to and perhaps

union, and enum, or assign types to and perhaps reserve storage for new variables, usually by writing the type followed by the variable name. Keywords such as char and int specify built-in types. Sections of code are enclosed in braces ({ and },

Sections of code are enclosed in braces ({ and }, sometimes called "curly brackets") to limit the scope of declarations and to act as a single statement for control structures.

As an imperative language, C uses statements to specify actions. The most common statement is an expression statement, consisting of an expression to be evaluated, followed by a semicolon; as a side effect of the evaluation, functions may be called

effect of the evaluation, functions may be called and variables may be assigned new values. To modify the normal sequential execution of statements, C provides several control-flow statements identified by reserved keywords. Structured programming

by reserved keywords. Structured programming is supported by if ... [else] conditional execution and by do ... while, while, and for iterative execution (looping). The for statement has separate initialization, testing, and reinitialization

initialization, testing, and reinitialization expressions, any or all of which can be omitted. break and continue can be used within the loop. Break is used to leave the innermost enclosing loop statement and continue is used to skip to its

statement and continue is used to skip to its reinitialisation. There is also a non-structured goto statement which branches directly to the designated label within the function. switch selects a case to be executed based on the value of an integer

to be executed based on the value of an integer expression. Different from many other languages, control-flow will fall through to the next case unless terminated by a break.

Expressions can use a variety of built-in operators and may contain function calls. The order in which arguments to functions and operands to most operators are evaluated is unspecified. The evaluations may even be interleaved. However, all side

may even be interleaved. However, all side effects (including storage to variables) will occur before the next "sequence point"; sequence points include the end of each expression statement, and the entry to and return from each function call.

the entry to and return from each function call.  Sequence points also occur during evaluation of expressions containing certain operators (&&, ||, ?: and the comma operator). This permits a high degree of object code optimization by the compiler,

of object code optimization by the compiler, but requires C programmers to take more care to obtain reliable results than is needed for other programming languages.

Kernighan and Ritchie say in the Introduction of The C Programming Language: "C, like any other language, has its blemishes. Some of the operators have the wrong precedence; some parts of the syntax could be better."[31] The C standard did not

could be better."[31] The C standard did not attempt to correct many of these blemishes, because of the impact of such changes on already existing software.

Character set[edit]
The basic C source character set includes the following characters:
Lowercase and uppercase letters of ISO Basic Latin Alphabet: a–z A–Z
Decimal digits: 0–9

Decimal digits: 0–9
Graphic characters: ! " # % & ' ( ) * + , - . / : ; < = > ? [ \ ] ^ _ { | } ~
Whitespace characters: space, horizontal tab, vertical tab, form feed, newline

Newline indicates the end of a text line; it need not correspond to an actual single character, although for convenience C treats it as one.

Additional multi-byte encoded characters may be used in string literals, but they are not entirely portable.  The latest C standard (C11) allows multi-national Unicode characters to be embedded portably within C source text by using \uXXXX or

portably within C source text by using \uXXXX or \UXXXXXXXX encoding (where the X denotes a hexadecimal character), although this feature is not yet widely implemented.

The basic C execution character set contains the same characters, along with representations for alert, backspace, and carriage return. Run-time support for extended character sets has increased with each revision of the C standard.

Reserved words[edit]
The following reserved words are case sensitive.
C89 has 32 reserved words, also known as keywords, which are the words that cannot be used for any purposes other than those for which they are predefined:
auto
break
case
char

auto
break
case
char
const
continue
default
do
double
else
enum
extern
float
for
goto
if
int
long
register
return
short
signed
sizeof
static
struct
switch
typedef
union
unsigned
void
volatile
while

switch
typedef
union
unsigned
void
volatile
while
C99 reserved five more words: (‡ is an alternative spelling alias for a C23 keyword)
inline
restrict
_Bool ‡
_Complex
_Imaginary

inline
restrict
_Bool ‡
_Complex
_Imaginary
C11 reserved seven more words:[32] (‡ is an alternative spelling alias for a C23 keyword)
_Alignas ‡
_Alignof ‡
_Atomic
_Generic
_Noreturn
_Static_assert ‡
_Thread_local ‡
C23 reserved fifteen more words:

_Thread_local ‡
C23 reserved fifteen more words:
alignas
alignof
bool
constexpr
false
nullptr
static_assert
thread_local
true
typeof
typeof_unqual
_BitInt
_Decimal32
_Decimal64
_Decimal128

Most of the recently reserved words begin with an underscore followed by a capital letter, because identifiers of that form were previously reserved by the C standard for use only by implementations.  Since existing program source code should not

Since existing program source code should not have been using these identifiers, it would not be affected when C implementations started supporting these extensions to the programming language. Some standard headers do define more convenient

Some standard headers do define more convenient synonyms for underscored identifiers. Some of those words were added as keywords with their conventional spelling in C23 and the corresponding macros were removed.

Prior to C89, entry was reserved as a keyword. In the second edition of their book The C Programming Language, which describes what became known as C89, Kernighan and Ritchie wrote, "The ... [keyword] entry, formerly reserved but never used, is no

entry, formerly reserved but never used, is no longer reserved." and "The stillborn entry keyword is withdrawn."[33]

Operators[edit]
Main article: Operators in C and C++
C supports a rich set of operators, which are symbols used within an expression to specify the manipulations to be performed while evaluating that expression. C has operators for:

arithmetic: +, -, *, /, %
assignment: =
augmented assignment: +=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>=
bitwise logic: ~, &, |, ^
bitwise shifts: <<, >>
Boolean logic: !, &&, ||
conditional evaluation: ? :
equality testing: ==, !=

equality testing: ==, !=
calling functions: ( )
increment and decrement: ++, --
member selection: ., ->
object size: sizeof
type: typeof, typeof_unqual since C23
order relations: <, <=, >, >=
reference and dereference: &, *, [ ]
sequencing: ,

sequencing: ,
subexpression grouping: ( )
type conversion: (typename)

C uses the operator = (used in mathematics to express equality) to indicate assignment, following the precedent of Fortran and PL/I, but unlike ALGOL and its derivatives. C uses the operator == to test for equality.  The similarity between these two

for equality.  The similarity between these two operators (assignment and equality) may result in the accidental use of one in place of the other, and in many cases, the mistake does not produce an error message (although some compilers produce

an error message (although some compilers produce warnings). For example, the conditional expression if (a == b + 1) might mistakenly be written as if (a = b + 1), which will be evaluated as true unless the value of a is 0 after the assignment.[34]

The C operator precedence is not always intuitive.  For example, the operator == binds more tightly than (is executed prior to) the operators & (bitwise AND) and | (bitwise OR) in expressions such as x & 1 == 0, which must be written as (x & 1) == 0

x & 1 == 0, which must be written as (x & 1) == 0 if that is the coder's intent.[35]

"Hello, world" example[edit]
See also: Hello, world
"Hello, World!" program by Brian Kernighan (1978)

The "hello, world" example, which appeared in the first edition of K&R, has become the model for an introductory program in most programming textbooks. The program prints "hello, world" to the standard output, which is usually a terminal or screen

output, which is usually a terminal or screen display.

The original version was:[36]
main()
{
printf("hello, world\n");
}
A standard-conforming "hello, world" program is:[a]
# include <stdio.h>
int main(void)
{
printf("hello, world\n");
}

The first line of the program contains a preprocessing directive, indicated by #include.  This causes the compiler to replace that line with the entire text of the stdio.h standard header, which contains declarations for standard input and output

declarations for standard input and output functions such as printf and scanf. The angle brackets surrounding stdio.h indicate that stdio.h can be located using a search strategy that prefers headers provided with the compiler to other headers

provided with the compiler to other headers having the same name, as opposed to double quotes which typically include local or project-specific header files.

The next line indicates that a function named main is being defined. The main function serves a special purpose in C programs; the run-time environment calls the main function to begin program execution. The type specifier int indicates that the

The type specifier int indicates that the value that is returned to the invoker (in this case the run-time environment) as a result of evaluating the main function, is an integer. The keyword void as a parameter list indicates that this function

as a parameter list indicates that this function takes no arguments.[b]

The opening curly brace indicates the beginning of the definition of the main function.

The next line calls (diverts execution to) a function named printf, which in this case is supplied from a system library.  In this call, the printf function is passed (provided with) a single argument, the address of the first character in the

the address of the first character in the string literal "hello, world\n". The string literal is an unnamed array with elements of type char, set up automatically by the compiler with a final NULL(ASCII value 0) character to mark the end of the

value 0) character to mark the end of the array (for printf to know the length of the string).The NULL character can be also written as an escape sequence, written as \0. The \n is an escape sequence that C translates to a newline character, which

that C translates to a newline character, which on output signifies the end of the current line.  The return value of the printf function is of type int, but it is silently discarded since it is not used. (A more careful program might test the

not used. (A more careful program might test the return value to determine whether or not the printf function succeeded.) The semicolon ; terminates the statement.

The closing curly brace indicates the end of the code for the main function. According to the C99 specification and newer, the main function, unlike any other function, will implicitly return a value of 0 upon reaching the } that terminates the

of 0 upon reaching the } that terminates the function. (Formerly an explicit return 0; statement was required.) This is interpreted by the run-time system as an exit code indicating successful execution.[37]

Data types[edit]
Main article: C data types

This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed. (October 2012) (Learn how and when to remove this

(October 2012) (Learn how and when to remove this message)

The type system in C is static and weakly typed, which makes it similar to the type system of ALGOL descendants such as Pascal.[38]  There are built-in types for integers of various sizes, both signed and unsigned, floating-point numbers, and

signed and unsigned, floating-point numbers, and enumerated types (enum).  Integer type char is often used for single-byte characters.  C99 added a Boolean data type.  There are also derived types including arrays, pointers, records (struct), and

including arrays, pointers, records (struct), and unions (union).

C is often used in low-level systems programming where escapes from the type system may be necessary.  The compiler attempts to ensure type correctness of most expressions, but the programmer can override the checks in various ways, either by using

the checks in various ways, either by using a type cast to explicitly convert a value from one type to another, or by using pointers or unions to reinterpret the underlying bits of a data object in some other way.

Some find C's declaration syntax unintuitive, particularly for function pointers. (Ritchie's idea was to declare identifiers in contexts resembling their use: "declaration reflects use".)[39]

C's usual arithmetic conversions allow for efficient code to be generated, but can sometimes produce unexpected results.  For example, a comparison of signed and unsigned integers of equal width requires a conversion of the signed value to unsigned.

a conversion of the signed value to unsigned.  This can generate unexpected results if the signed value is negative.

Pointers[edit]

C supports the use of pointers, a type of reference that records the address or location of an object or function in memory.  Pointers can be dereferenced to access data stored at the address pointed to, or to invoke a pointed-to function.  Pointers

to, or to invoke a pointed-to function.  Pointers can be manipulated using assignment or pointer arithmetic.  The run-time representation of a pointer value is typically a raw memory address (perhaps augmented by an offset-within-word field), but

augmented by an offset-within-word field), but since a pointer's type includes the type of the thing pointed to, expressions including pointers can be type-checked at compile time.  Pointer arithmetic is automatically scaled by the size of the

is automatically scaled by the size of the pointed-to data type.

Pointers are used for many purposes in C.  Text strings are commonly manipulated using pointers into arrays of characters.  Dynamic memory allocation is performed using pointers; the result of a malloc is usually cast to the data type of the data to

is usually cast to the data type of the data to be stored.  Many data types, such as trees, are commonly implemented as dynamically allocated struct objects linked together using pointers. Pointers to other pointers are often used in

Pointers to other pointers are often used in multi-dimensional arrays and arrays of struct objects.  Pointers to functions (function pointers) are useful for passing functions as arguments to higher-order functions (such as qsort or bsearch), in

functions (such as qsort or bsearch), in dispatch tables, or as callbacks to event handlers .[37]

A null pointer value explicitly points to no valid location. Dereferencing a null pointer value is undefined, often resulting in a segmentation fault.  Null pointer values are useful for indicating special cases such as no "next" pointer in the

special cases such as no "next" pointer in the final node of a linked list, or as an error indication from functions returning pointers.  In appropriate contexts in source code, such as for assigning to a pointer variable, a null pointer constant

to a pointer variable, a null pointer constant can be written as 0, with or without explicit casting to a pointer type, as the NULL macro defined by several standard headers or, since C23 with the constant nullptr.  In conditional contexts, null

constant nullptr.  In conditional contexts, null pointer values evaluate to false, while all other pointer values evaluate to true.

Void pointers (void *) point to objects of unspecified type, and can therefore be used as "generic" data pointers. Since the size and type of the pointed-to object is not known, void pointers cannot be dereferenced, nor is pointer arithmetic on them

dereferenced, nor is pointer arithmetic on them allowed, although they can easily be (and in many contexts implicitly are) converted to and from any other object pointer type.[37]

Careless use of pointers is potentially dangerous.  Because they are typically unchecked, a pointer variable can be made to point to any arbitrary location, which can cause undesirable effects.  Although properly used pointers point to safe places,

properly used pointers point to safe places, they can be made to point to unsafe places by using invalid pointer arithmetic; the objects they point to may continue to be used after deallocation (dangling pointers); they may be used without having

pointers); they may be used without having been initialized (wild pointers); or they may be directly assigned an unsafe value using a cast, union, or through another corrupt pointer.  In general, C is permissive in allowing manipulation of and

C is permissive in allowing manipulation of and conversion between pointer types, although compilers typically provide options for various levels of checking. Some other programming languages address these problems by using more restrictive

address these problems by using more restrictive reference types.

Arrays[edit]
See also: C string handling

Array types in C are traditionally of a fixed, static size specified at compile time. The more recent C99 standard also allows a form of variable-length arrays.  However, it is also possible to allocate a block of memory (of arbitrary size) at

allocate a block of memory (of arbitrary size) at run-time, using the standard library's malloc function, and treat it as an array.

Since arrays are always accessed (in effect) via pointers, array accesses are typically not checked against the underlying array size, although some compilers may provide bounds checking as an option.[40][41]  Array bounds violations are therefore

Array bounds violations are therefore possible and can lead to various repercussions, including illegal memory accesses, corruption of data, buffer overruns, and run-time exceptions.

C does not have a special provision for declaring multi-dimensional arrays, but rather relies on recursion within the type system to declare arrays of arrays, which effectively accomplishes the same thing.  The index values of the resulting

same thing.  The index values of the resulting "multi-dimensional array" can be thought of as increasing in row-major order. Multi-dimensional arrays are commonly used in numerical algorithms (mainly from applied linear algebra) to store matrices.

from applied linear algebra) to store matrices. The structure of the C array is well suited to this particular task. However, in early versions of C the bounds of the array must be known fixed values or else explicitly passed to any subroutine that

or else explicitly passed to any subroutine that requires them, and dynamically sized arrays of arrays cannot be accessed using double indexing. (A workaround for this was to allocate the array with an additional "row vector" of pointers to the

an additional "row vector" of pointers to the columns.) C99 introduced "variable-length arrays" which address this issue.

The following example using modern C (C99 or later) shows allocation of a two-dimensional array on the heap and the use of multi-dimensional array indexing for accesses (which can use bounds-checking on many C compilers):
int func(int N, int M)
{

int func(int N, int M)
{
float (*p)[N] [M] = malloc(sizeof *p);
if (p == 0)
return -1;
for (int i = 0; i < N; i++)
for (int j = 0; j < M; j++)
(*p)[i] [j] = i + j;
print_array(N, M, p);
free(p);
return 1;
}

print_array(N, M, p);
free(p);
return 1;
}
And here is a similar implementation using C99's Auto VLA feature:[c]
int func(int N, int M)
{

int func(int N, int M)
{
// Caution: checks should be made to ensure N*M*sizeof(float) does NOT exceed limitations for auto VLAs and is within available size of stack.

float p[N] [M]; // auto VLA is held on the stack, and sized when the function is invoked
for (int i = 0; i < N; i++)
for (int j = 0; j < M; j++)
p[i] [j] = i + j;
print_array(N, M, p);

p[i] [j] = i + j;
print_array(N, M, p);
// no need to free(p) since it will disappear when the function exits, along with the rest of the stack frame
return 1;
}
Array–pointer interchangeability[edit]

The subscript notation x[i] (where x designates a pointer) is syntactic sugar for *(x+i).[42] Taking advantage of the compiler's knowledge of the pointer type, the address that x + i points to is not the base address (pointed to by x) incremented by

the base address (pointed to by x) incremented by i bytes, but rather is defined to be the base address incremented by i multiplied by the size of an element that x points to.  Thus, x[i] designates the i+1th element of the array.

Furthermore, in most expression contexts (a notable exception is as operand of sizeof), an expression of array type is automatically converted to a pointer to the array's first element. This implies that an array is never copied as a whole when

that an array is never copied as a whole when named as an argument to a function, but rather only the address of its first element is passed. Therefore, although function calls in C use pass-by-value semantics, arrays are in effect passed by

semantics, arrays are in effect passed by reference.

The total size of an array x can be determined by applying sizeof to an expression of array type. The size of an element can be determined by applying the operator sizeof to any dereferenced element of an array A, as in n = sizeof A[0]. Thus, the

of an array A, as in n = sizeof A[0]. Thus, the number of elements in a declared array A can be determined as sizeof A / sizeof A[0]. Note, that if only a pointer to the first element is available as it is often the case in C code because of the

as it is often the case in C code because of the automatic conversion described above, the information about the full type of the array and its length are lost.

Memory management[edit]
One of the most important functions of a programming language is to provide facilities for managing memory and the objects that are stored in memory. C provides three principal ways to allocate memory for objects:[37]

Static memory allocation: space for the object is provided in the binary at compile-time; these objects have an extent (or lifetime) as long as the binary which contains them is loaded into memory.

Automatic memory allocation: temporary objects can be stored on the stack, and this space is automatically freed and reusable after the block in which they are declared is exited.

Dynamic memory allocation: blocks of memory of arbitrary size can be requested at run-time using library functions such as malloc from a region of memory called the heap; these blocks persist until subsequently freed for reuse by calling the library

freed for reuse by calling the library function realloc or free

These three approaches are appropriate in different situations and have various trade-offs. For example, static memory allocation has little allocation overhead, automatic allocation may involve slightly more overhead, and dynamic memory allocation

more overhead, and dynamic memory allocation can potentially have a great deal of overhead for both allocation and deallocation. The persistent nature of static objects is useful for maintaining state information across function calls, automatic

information across function calls, automatic allocation is easy to use but stack space is typically much more limited and transient than either static memory or heap space, and dynamic memory allocation allows convenient allocation of objects whose

allows convenient allocation of objects whose size is known only at run-time. Most C programs make extensive use of all three.

Where possible, automatic or static allocation is usually simplest because the storage is managed by the compiler, freeing the programmer of the potentially error-prone chore of manually allocating and releasing storage. However, many data

and releasing storage. However, many data structures can change in size at runtime, and since static allocations (and automatic allocations before C99) must have a fixed size at compile-time, there are many situations in which dynamic allocation is

many situations in which dynamic allocation is necessary.[37]  Prior to the C99 standard, variable-sized arrays were a common example of this. (See the article on malloc for an example of dynamically allocated arrays.) Unlike automatic allocation,

allocated arrays.) Unlike automatic allocation, which can fail at run time with uncontrolled consequences, the dynamic allocation functions return an indication (in the form of a null pointer value) when the required storage cannot be allocated.

when the required storage cannot be allocated.  (Static allocation that is too large is usually detected by the linker or loader, before the program can even begin execution.)

Unless otherwise specified, static objects contain zero or null pointer values upon program startup. Automatically and dynamically allocated objects are initialized only if an initial value is explicitly specified; otherwise they initially have

specified; otherwise they initially have indeterminate values (typically, whatever bit pattern happens to be present in the storage, which might not even represent a valid value for that type). If the program attempts to access an uninitialized

the program attempts to access an uninitialized value, the results are undefined. Many modern compilers try to detect and warn about this problem, but both false positives and false negatives can occur.

Heap memory allocation has to be synchronized with its actual usage in any program to be reused as much as possible. For example, if the only pointer to a heap memory allocation goes out of scope or has its value overwritten before it is deallocated

its value overwritten before it is deallocated explicitly, then that memory cannot be recovered for later reuse and is essentially lost to the program, a phenomenon known as a memory leak. Conversely, it is possible for memory to be freed, but is

it is possible for memory to be freed, but is referenced subsequently, leading to unpredictable results. Typically, the failure symptoms appear in a portion of the program unrelated to the code that causes the error, making it difficult to diagnose

causes the error, making it difficult to diagnose the failure. Such issues are ameliorated in languages with automatic garbage collection.

Libraries[edit]

The C programming language uses libraries as its primary method of extension. In C, a library is a set of functions contained within a single "archive" file.  Each library typically has a header file, which contains the prototypes of the functions

which contains the prototypes of the functions contained within the library that may be used by a program, and declarations of special data types and macro symbols used with these functions. For a program to use a library, it must include the

a program to use a library, it must include the library's header file, and the library must be linked with the program, which in many cases requires compiler flags (e.g., -lm, shorthand for "link the math library").[37]

The most common C library is the C standard library, which is specified by the ISO and ANSI C standards and comes with every C implementation (implementations which target limited environments such as embedded systems may provide only a subset of

as embedded systems may provide only a subset of the standard library). This library supports stream input and output, memory allocation, mathematics, character strings, and time values.  Several separate standard headers (for example, stdio.h)

separate standard headers (for example, stdio.h) specify the interfaces for these and other standard library facilities.

Another common set of C library functions are those used by applications specifically targeted for Unix and Unix-like systems, especially functions which provide an interface to the kernel. These functions are detailed in various standards such as

are detailed in various standards such as POSIX and the Single UNIX Specification.

Since many programs have been written in C, there are a wide variety of other libraries available. Libraries are often written in C because C compilers generate efficient object code; programmers then create interfaces to the library so that the

then create interfaces to the library so that the routines can be used from higher-level languages like Java, Perl, and Python.[37]

File handling and streams[edit]

File input and output (I/O) is not part of the C language itself but instead is handled by libraries (such as the C standard library) and their associated header files (e.g. stdio.h). File handling is generally implemented through high-level I/O

is generally implemented through high-level I/O which works through streams. A stream is from this perspective a data flow that is independent of devices, while a file is a concrete device. The high-level I/O is done through the association of a

I/O is done through the association of a stream to a file. In the C standard library, a buffer (a memory area or queue) is temporarily used to store data before it is sent to the final destination. This reduces the time spent waiting for slower

This reduces the time spent waiting for slower devices, for example a hard drive or solid-state drive. Low-level I/O functions are not part of the standard C library[clarification needed] but are generally part of "bare metal" programming

are generally part of "bare metal" programming (programming that is independent of any operating system such as most embedded programming). With few exceptions, implementations include low-level I/O.

Language tools[edit]

This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed. (July 2014) (Learn how and when to remove this

(July 2014) (Learn how and when to remove this message)

A number of tools have been developed to help C programmers find and fix statements with undefined behavior or possibly erroneous expressions, with greater rigor than that provided by the compiler.  The tool lint was the first such, leading to many

The tool lint was the first such, leading to many others.

Automated source code checking and auditing are beneficial in any language, and for C many such tools exist, such as Lint. A common practice is to use Lint to detect questionable code when a program is first written. Once a program passes Lint, it

is first written. Once a program passes Lint, it is then compiled using the C compiler. Also, many compilers can optionally warn about syntactically valid constructs that are likely to actually be errors. MISRA C is a proprietary set of guidelines

MISRA C is a proprietary set of guidelines to avoid such questionable code, developed for embedded systems.[43]

There are also compilers, libraries, and operating system level mechanisms for performing actions that are not a standard part of C, such as bounds checking for arrays, detection of buffer overflow, serialization, dynamic memory tracking, and

serialization, dynamic memory tracking, and automatic garbage collection.

Tools such as Purify or Valgrind and linking with libraries containing special versions of the memory allocation functions can help uncover runtime errors in memory usage.[44][45]
Uses[edit]
Rationale for use in systems programming[edit]

Rationale for use in systems programming[edit]
Some software written in C
C is widely used for systems programming in implementing operating systems and embedded system applications.[46] This is for several reasons:

The C language permits platform hardware and memory to be accessed with pointers and type punning, so system-specific features (e.g. Control/Status Registers, I/O registers) can be configured and used with code written in C – it allows fullest

used with code written in C – it allows fullest control of the platform it is running on.

The code generated after compilation does not demand many system features, and can be invoked from some boot code in a straightforward manner – it is simple to execute.

The C language statements and expressions typically map well on to sequences of instructions for the target processor, and consequently there is a low run-time demand on system resources – it is fast to execute.

With its rich set of operators, the C language can use many of the features of target CPUs.  Where a particular CPU has more esoteric instructions, a language variant can be constructed with perhaps intrinsic functions to exploit those instructions

intrinsic functions to exploit those instructions – it can use practically all the target CPU's features.

The language makes it easy to overlay structures onto blocks of binary data, allowing the data to be comprehended, navigated and modified – it can write data structures, even file systems.

The language supports a rich set of operators, including bit manipulation, for integer arithmetic and logic, and perhaps different sizes of floating point numbers – it can process appropriately-structured data effectively.

C is a fairly small language, with only a handful of statements, and without too many features that generate extensive target code – it is comprehensible.

C has direct control over memory allocation and deallocation, which gives reasonable efficiency and predictable timing to memory-handling operations, without any concerns for sporadic stop-the-world garbage collection events – it has predictable

garbage collection events – it has predictable performance.

C permits the use and implementation of different memory allocation schemes, including a typical malloc and free; a more sophisticated mechanism with arenas; or a version for an OS kernel that may suit DMA, use within interrupt handlers, or

may suit DMA, use within interrupt handlers, or integrated with the virtual memory system.

Depending on the linker and environment, C code can also call libraries written in assembly language, and may be called from assembly language – it interoperates well with other lower-level code.

C and its calling conventions and linker structures are commonly used in conjunction with other high-level languages, with calls both to C and from C supported – it interoperates well with other high-level code.

C has a very mature and broad ecosystem, including libraries, frameworks, open source compilers, debuggers and utilities, and is the de facto standard. It is likely the drivers already exist in C, or that there is a similar CPU architecture as a

or that there is a similar CPU architecture as a back-end of a C compiler, so there is reduced incentive to choose another language.

Used for computationally-intensive libraries[edit]

C enables programmers to create efficient implementations of algorithms and data structures, because the layer of abstraction from hardware is thin, and its overhead is low, an important criterion for computationally intensive programs. For example,

computationally intensive programs. For example, the GNU Multiple Precision Arithmetic Library, the GNU Scientific Library, Mathematica, and MATLAB are completely or partially written in C.  Many languages support calling library functions in C, for

support calling library functions in C, for example, the Python-based framework NumPy uses C for the high-performance and hardware-interacting aspects.

C as an intermediate language[edit]

C is sometimes used as an intermediate language by implementations of other languages. This approach may be used for portability or convenience; by using C as an intermediate language, additional machine-specific code generators are not necessary.

code generators are not necessary.  C has some features, such as line-number preprocessor directives and optional superfluous commas at the end of initializer lists, that support compilation of generated code. However, some of C's shortcomings have

code. However, some of C's shortcomings have prompted the development of other C-based languages specifically designed for use as intermediate languages, such as C--. Also, contemporary major compilers GCC and LLVM both feature an intermediate

GCC and LLVM both feature an intermediate representation that is not C, and those compilers support front ends for many languages including C.

Other languages written in C[edit]

A consequence of C's wide availability and efficiency is that compilers, libraries and interpreters of other programming languages are often implemented in C.[47] For example, the reference implementations of Python,[48] Perl,[49] Ruby,[50] and

of Python,[48] Perl,[49] Ruby,[50] and PHP[51] are written in C.

Once used for web development[edit]

Historically, C was sometimes used for web development using the Common Gateway Interface (CGI) as a "gateway" for information between the web application, the server, and the browser.[52] C may have been chosen over interpreted languages because of

been chosen over interpreted languages because of its speed, stability, and near-universal availability.[53]  It is no longer common practice for web development to be done in C,[54] and many other web development tools exist.

Web servers[edit]

The two most popular web servers, Apache HTTP Server and Nginx, are both written in C.  These web servers interact with the operating system, listen on TCP ports for HTTP requests, and then serve up static web content, or cause the execution of

up static web content, or cause the execution of other languages handling to 'render' content such as PHP, which is itself primarily written in C.  C's close-to-the-metal approach allows for the construction of these high-performance software

construction of these high-performance software systems.

End-user applications[edit]
C has also been widely used to implement end-user applications.[55] However, such applications can also be written in newer, higher-level languages.
Limitations[edit]

Limitations[edit]
the power of assembly language and the convenience of ... assembly language— Dennis Ritchie[56]
While C has been popular, influential and hugely successful, it has drawbacks, including:

The standard dynamic memory handling with malloc and free is error prone.  Bugs include: Memory leaks when memory is allocated but not freed; and access to previously freed memory.

The use of pointers and the direct manipulation of memory means corruption of memory is possible, perhaps due to programmer error, or insufficient checking of bad data.

There is some type checking, but it does not apply to areas like variadic functions, and the type checking can be trivially or inadvertently circumvented.  It is weakly typed.

Since the code generated by the compiler contains few checks itself, there is a burden on the programmer to consider all possible outcomes, to protect against buffer overruns, array bounds checking, stack overflows, memory exhaustion, and consider

stack overflows, memory exhaustion, and consider race conditions, thread isolation, etc.

The use of pointers and the run-time manipulation of these means there may be two ways to access the same data (aliasing), which is not determinable at compile time.  This means that some optimisations that may be available to other languages are

that may be available to other languages are not possible in C.  FORTRAN is considered faster.

Some of the standard library functions, e.g. scanf or strncat, can lead to buffer overruns.

There is limited standardisation in support for low-level variants in generated code, for example: different function calling conventions and ABI; different structure packing conventions; different byte ordering within larger integers (including

byte ordering within larger integers (including endianness).  In many language implementations, some of these options may be handled with the preprocessor directive #pragma,[57][58] and some with additional keywords e.g. use __cdecl calling

with additional keywords e.g. use __cdecl calling convention.  But the directive and options are not consistently supported.[59]

String handling using the standard library is code-intensive, with explicit memory management required.
The language does not directly support object orientation, introspection, run-time expression evaluation, generics, etc.

There are few guards against inappropriate use of language features, which may lead to unmaintainable code.  In particular, the C preprocessor can hide troubling effects such as double evaluation and worse.[60]  This facility for tricky code has

and worse.[60]  This facility for tricky code has been celebrated with competitions such as the International Obfuscated C Code Contest and the Underhanded C Contest.

C lacks standard support for exception handling and only offers return codes for error checking. The  setjmp and longjmp standard library functions have been used[61] to implement a try-catch mechanism via macros.

For some purposes, restricted styles of C have been adopted, e.g. MISRA C or CERT C, in an attempt to reduce the opportunity for bugs.  Databases such as CWE attempt to count the ways C etc. has vulnerabilities, along with recommendations for

vulnerabilities, along with recommendations for mitigation.

There are tools that can mitigate against some of the drawbacks.  Contemporary C compilers include checks which may generate warnings to help identify many potential bugs.
Related languages[edit]

Related languages[edit]
The TIOBE index graph, showing a comparison of the popularity of various programming languages[62]
Main article: List of C-family programming languages

C has both directly and indirectly influenced many later languages such as C++ and Java.[63] The most pervasive influence has been syntactical; all of the languages mentioned combine the statement and (more or less recognizably) expression syntax of

(more or less recognizably) expression syntax of C with type systems, data models or large-scale program structures that differ from those of C, sometimes radically.

Several C or near-C interpreters exist, including Ch and CINT, which can also be used for scripting.

When object-oriented programming languages became popular, C++ and Objective-C were two different extensions of C that provided object-oriented capabilities. Both languages were originally implemented as source-to-source compilers; source code was

as source-to-source compilers; source code was translated into C, and then compiled with a C compiler.[64]

The C++ programming language (originally named "C with Classes") was devised by Bjarne Stroustrup as an approach to providing object-oriented functionality with a C-like syntax.[65] C++ adds greater typing strength, scoping, and other tools useful

typing strength, scoping, and other tools useful in object-oriented programming, and permits generic programming via templates. Nearly a superset of C, C++ now[when?] supports most of C, with a few exceptions.

Objective-C was originally a very "thin" layer on top of C, and remains a strict superset of C that permits object-oriented programming using a hybrid dynamic/static typing paradigm. Objective-C derives its syntax from both C and Smalltalk: syntax

its syntax from both C and Smalltalk: syntax that involves preprocessing, expressions, function declarations, and function calls is inherited from C, while the syntax for object-oriented features was originally taken from Smalltalk.

In addition to C++ and Objective-C, Ch, Cilk, and Unified Parallel C are nearly supersets of C.
See also[edit]
Computer programming portalFree and open-source software portal
Compatibility of C and C++
Comparison of Pascal and C

Comparison of Pascal and C
Comparison of programming languages
International Obfuscated C Code Contest
List of C-family programming languages
List of C compilers
Notes[edit]

^ The original example code will compile on most modern compilers that are not in strict standard compliance mode, but it does not fully conform to the requirements of either C89 or C99. In fact, C99 requires that a diagnostic message be produced.

^ The main function actually has two arguments, int argc and char *argv[], respectively, which can be used to handle command-line arguments.  The ISO C standard (section 5.1.2.2.1) requires both forms of main to be supported, which is special

forms of main to be supported, which is special treatment not afforded to any other function.

^ Code of print_array (not shown) slightly differs,[why?] too.
References[edit]
^ a b Prinz, Peter; Crawford, Tony (December 16, 2005). C in a Nutshell. O'Reilly Media, Inc. p. 3. ISBN 9780596550714.

^ Ritchie (1993): "Thompson had made a brief attempt to produce a system coded in an early version of C—before structures—in 1972, but gave up the effort."

^ "N3221 – Editor's Report, Post January 2024 Strasbourg France Meeting". ISO/IEC JTC1/SC22/WG14. Open Standards. February 21, 2024. Retrieved May 24, 2024.

^ Ritchie (1993): "The scheme of type composition adopted by C owes considerable debt to Algol 68, although it did not, perhaps, emerge in a form that Algol's adherents would approve of."

^ a b "Verilog HDL (and C)" (PDF). The Research School of Computer Science at the Australian National University. June 3, 2010. Archived from the original (PDF) on November 6, 2013. Retrieved August 19, 2013. 1980s: Verilog first introduced; Verilog

2013. 1980s: Verilog first introduced; Verilog inspired by the C programming language

^ "The name is based on, and pronounced like the letter C in the English alphabet". the c programming language sound. English Chinese Dictionary. Archived from the original on November 17, 2022. Retrieved November 17, 2022.

^ Munoz, Daniel. "After All These Years, the World is Still Powered by C Programming | Toptal". Toptal Engineering Blog. Retrieved June 15, 2024.

^ "C Language Drops to Lowest Popularity Rating". Developer.com. August 9, 2016. Archived from the original on August 22, 2022. Retrieved August 1, 2022.
^ a b c d e f Ritchie (1993)

^ a b c d e f Ritchie (1993)
^ "Programming Language Popularity". 2009. Archived from the original on January 16, 2009. Retrieved January 16, 2009.

^ "TIOBE Programming Community Index". 2009. Archived from the original on May 4, 2009. Retrieved May 6, 2009.
^ Ward, Terry A. (August 1983). "Annotated C / A Bibliography of the C Language". Byte. p. 268. Retrieved January 31, 2015.

^ "TIOBE Index for September 2024". Archived from the original on September 18, 2024. Retrieved September 20, 2024.
^ Ritchie, Dennis. "BCPL to B to C". Archived from the original on December 12, 2019. Retrieved September 10, 2019.

^ a b c d e Jensen, Richard (December 9, 2020). ""A damn stupid thing to do"—the origins of C". Ars Technica. Archived from the original on March 28, 2022. Retrieved March 28, 2022.

^ a b Johnson, S. C.; Ritchie, D. M. (1978). "Portability of C Programs and the UNIX System". Bell System Tech. J. 57 (6): 2021–2048. CiteSeerX 10.1.1.138.35. doi:10.1002/j.1538-7305.1978.tb02141.x. ISSN 0005-8580. S2CID 17510065. (Note: The PDF is

ISSN 0005-8580. S2CID 17510065. (Note: The PDF is an OCR scan of the original, and contains a rendering of "IBM 370" as "IBM 310".)

^ McIlroy, M. D. (1987). A Research Unix reader: annotated excerpts from the Programmer's Manual, 1971–1986 (PDF) (Technical report). CSTR. Bell Labs. p. 10. 139. Archived (PDF) from the original on November 11, 2017. Retrieved February 1, 2015.

^ Kernighan, Brian W.; Ritchie, Dennis M. (February 1978). The C Programming Language (1st ed.). Englewood Cliffs, NJ: Prentice Hall. ISBN 978-0-13-110163-0.

^ "C manual pages". FreeBSD Miscellaneous Information Manual (FreeBSD 13.0 ed.). May 30, 2011. Archived from the original on January 21, 2021. Retrieved January 15, 2021. [1] Archived January 21, 2021, at the Wayback Machine

^ Kernighan, Brian W.; Ritchie, Dennis M. (March 1988). The C Programming Language (2nd ed.). Englewood Cliffs, NJ: Prentice Hall. ISBN 978-0-13-110362-7.

^ Stroustrup, Bjarne (2002). Sibling rivalry: C and C++ (PDF) (Report). AT&T Labs. Archived (PDF) from the original on August 24, 2014. Retrieved April 14, 2014.

^ "Rationale for American National Standard for Information Systems – Programming Language – C". Archived from the original on July 17, 2024. Retrieved July 17, 2024.

^ C Integrity. International Organization for Standardization. March 30, 1995. Archived from the original on July 25, 2018. Retrieved July 24, 2018.

^ "JTC1/SC22/WG14 – C". Home page. ISO/IEC. Archived from the original on February 12, 2018. Retrieved June 2, 2011.

^ Andrew Binstock (October 12, 2011). "Interview with Herb Sutter". Dr. Dobbs. Archived from the original on August 2, 2013. Retrieved September 7, 2013.

^ "WG14-N3132 : Revised C23 Schedule" (PDF). open-std.org. June 4, 2023. Archived (PDF) from the original on June 9, 2023.

^ "WG14-N3220 : Working Draft, C2y" (PDF). open-std.org. February 21, 2024. Archived (PDF) from the original on February 26, 2024.

^ "TR 18037: Embedded C" (PDF). ISO / IEC. Archived (PDF) from the original on February 25, 2021. Retrieved July 26, 2011.

^ Harbison, Samuel P.; Steele, Guy L. (2002). C: A Reference Manual (5th ed.). Englewood Cliffs, NJ: Prentice Hall. ISBN 978-0-13-089592-9. Contains a BNF grammar for C.
^ Kernighan & Ritchie (1988), p. 192.
^ Kernighan & Ritchie (1978), p. 3.

^ Kernighan & Ritchie (1978), p. 3.
^ "ISO/IEC 9899:201x (ISO C11) Committee Draft" (PDF). Archived (PDF) from the original on December 22, 2017. Retrieved September 16, 2011.
^ Kernighan & Ritchie (1988), pp. 192, 259.

^ Kernighan & Ritchie (1988), pp. 192, 259.
^ "10 Common Programming Mistakes in C++". Cs.ucr.edu. Archived from the original on October 21, 2008. Retrieved June 26, 2009.

^ Schultz, Thomas (2004). C and the 8051 (3rd ed.). Otsego, MI: PageFree Publishing Inc. p. 20. ISBN 978-1-58961-237-2. Retrieved February 10, 2012.
^ Kernighan & Ritchie (1978), p. 6.

^ Kernighan & Ritchie (1978), p. 6.
^ a b c d e f g Klemens, Ben (2013). 21st Century C. O'Reilly Media. ISBN 978-1-4493-2714-9.

^ Feuer, Alan R.; Gehani, Narain H. (March 1982). "Comparison of the Programming Languages C and Pascal". ACM Computing Surveys. 14 (1): 73–92. doi:10.1145/356869.356872. S2CID 3136859.
^ Kernighan & Ritchie (1988), p. 122.

^ Kernighan & Ritchie (1988), p. 122.
^ For example, gcc provides _FORTIFY_SOURCE. "Security Features: Compile Time Buffer Checks (FORTIFY_SOURCE)". fedoraproject.org. Archived from the original on January 7, 2007. Retrieved August 5, 2012.

^ เอี่ยมสิริวงศ์, โอภาศ (2016). Programming with C. Bangkok, Thailand: SE-EDUCATION PUBLIC COMPANY LIMITED. pp. 225–230. ISBN 978-616-08-2740-4.

^ Raymond, Eric S. (October 11, 1996). The New Hacker's Dictionary (3rd ed.). MIT Press. p. 432. ISBN 978-0-262-68092-9. Retrieved August 5, 2012.
^ "Man Page for lint (freebsd Section 1)". unix.com. May 24, 2001. Retrieved July 15, 2014.

^ "CS107 Valgrind Memcheck". web.stanford.edu. Retrieved June 23, 2023.
^ Hastings, Reed; Joyce, Bob. "Purify: Fast Detection of Memory Leaks and Access Errors" (PDF). Pure Software Inc.: 9.

^ Dale, Nell B.; Weems, Chip (2014). Programming and problem solving with C++ (6th ed.). Burlington, Massachusetts: Jones & Bartlett Learning. ISBN 978-1449694289. OCLC 894992484.

^ "C – the mother of all languages". ICT Academy at IITK. November 13, 2018. Archived from the original on May 31, 2021. Retrieved October 11, 2022.

^ "1. Extending Python with C or C++". Python 3.10.7 documentation. Archived from the original on November 5, 2012. Retrieved October 11, 2022.

^ Conrad, Michael (January 22, 2018). "An overview of the Perl 5 engine". Opensource.com. Archived from the original on May 26, 2022. Retrieved October 11, 2022.

^ "To Ruby From C and C++". Ruby Programming Language. Archived from the original on August 12, 2013. Retrieved October 11, 2022.

^ Para, Michael (August 3, 2022). "What is PHP? How to Write Your First PHP Program". freeCodeCamp. Archived from the original on August 4, 2022. Retrieved October 11, 2022.
^ Dr. Dobb's Sourcebook. U.S.: Miller Freeman, Inc. November–December 1995.

^ "Using C for CGI Programming". linuxjournal.com. March 1, 2005. Archived from the original on February 13, 2010. Retrieved January 4, 2010.

^ Perkins, Luc (September 17, 2013). "Web development in C: crazy? Or crazy like a fox?". Medium. Archived from the original on October 4, 2014. Retrieved April 8, 2022.

^ Munoz, Daniel. "After All These Years, the World is Still Powered by C Programming". Toptal Engineering Blog. Retrieved November 17, 2023.

^ Metz, Cade. "Dennis Ritchie: The Shoulders Steve Jobs Stood On". Wired. Archived from the original on April 12, 2022. Retrieved April 19, 2022.

^ corob-msft (March 31, 2022). "Pragma directives and the __pragma and _Pragma keywords". Microsoft Learn. Archived from the original on September 24, 2022. Retrieved September 24, 2022.

^ "Pragmas (The C Preprocessor)". GCC, the GNU Compiler Collection. Archived from the original on June 17, 2002. Retrieved September 24, 2022.

^ "Pragmas". Intel C++ Compiler Classic Developer Guide and Reference. Intel. Archived from the original on April 10, 2022. Retrieved April 10, 2022.
^ "In praise of the C preprocessor". apenwarr. August 13, 2007. Retrieved July 9, 2023.

^ Roberts, Eric S. (March 21, 1989). "Implementing Exceptions in C" (PDF). DEC Systems Research Center. SRC-RR-40. Archived (PDF) from the original on January 15, 2017. Retrieved January 4, 2022.

^ McMillan, Robert (August 1, 2013). "Is Java Losing Its Mojo?". Wired. Archived from the original on February 15, 2017. Retrieved March 5, 2017.

^ O'Regan, Gerard (September 24, 2015). Pillars of computing : a compendium of select, pivotal technology firms. Springer. ISBN 978-3319214641. OCLC 922324121.

^ Rauchwerger, Lawrence (2004). Languages and compilers for parallel computing : 16th international workshop, LCPC 2003, College Station, TX, USA, October 2–4, 2003 : revised papers. Springer. ISBN 978-3540246442. OCLC 57965544.

^ Stroustrup, Bjarne (1993). "A History of C++: 1979–1991" (PDF). Archived (PDF) from the original on February 2, 2019. Retrieved June 9, 2011.
Sources[edit]

Sources[edit]
Ritchie, Dennis M. (March 1993). "The Development of the C Language". ACM SIGPLAN Notices. 28 (3). ACM: 201–208. doi:10.1145/155360.155580.

By courtesy of the author, also at Ritchie, Dennis M. "Chistory". www.bell-labs.com. Retrieved March 29, 2022.

Ritchie, Dennis M. (1993). "The Development of the C Language". The Second ACM SIGPLAN Conference on History of Programming Languages (HOPL-II). ACM. pp. 201–208. doi:10.1145/154766.155580. ISBN 0-89791-570-4. Archived from the original on April 11,

Archived from the original on April 11, 2019. Retrieved November 4, 2014.

Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language (2nd ed.). Prentice Hall. ISBN 0-13-110362-8.
Further reading[edit]
Plauger, P.J. (1992). The Standard C Library (1 ed.). Prentice Hall. ISBN 978-0131315099. (source)

Banahan, M.; Brady, D.; Doran, M. (1991). The C Book: Featuring the ANSI C Standard (2 ed.). Addison-Wesley. ISBN 978-0201544336. (free)
Harbison, Samuel; Steele, Guy Jr. (2002). C: A Reference Manual (5 ed.). Pearson. ISBN 978-0130895929. (archive)

King, K.N. (2008). C Programming: A Modern Approach (2 ed.). W. W. Norton. ISBN 978-0393979503. (archive)
Griffiths, David; Griffiths, Dawn (2012). Head First C (1 ed.). O'Reilly. ISBN 978-1449399917.

Perry, Greg; Miller, Dean (2013). C Programming: Absolute Beginner's Guide (3 ed.). Que. ISBN 978-0789751980.
Deitel, Paul; Deitel, Harvey (2015). C: How to Program (8 ed.). Pearson. ISBN 978-0133976892.

Gustedt, Jens (2019). Modern C (2 ed.). Manning. ISBN 978-1617295812. (free)
External links[edit]
C (programming language)  at Wikipedia's sister projects

Media from CommonsNews from WikinewsQuotations from WikiquoteTextbooks from WikibooksResources from Wikiversity
ISO C Working Group official website
ISO/IEC 9899, publicly available official C documents, including the C99 Rationale

"C99 with Technical corrigenda TC1, TC2, and TC3 included" (PDF). Archived (PDF) from the original on October 25, 2007. (3.61 MB)
comp.lang.c Frequently Asked Questions
A History of C, by Dennis Ritchie
C Library Reference and Examples

C Library Reference and Examples
vteC programming language
ANSI C
C99
C11
C17
C23
Embedded C
MISRA C
Features
Functions
Header files
Operators
String
Syntax
Preprocessor
Data types
Standard library
Char
File I/O
Math
Dynamic memory
String
Time

Char
File I/O
Math
Dynamic memory
String
Time
Variadic
POSIX
Implementations
Bionic
libhybris
dietlibc
glibc
EGLIBC
klibc
Windows CRT
musl
Newlib
uClibc
Compilers
ACK
Borland Turbo C
Clang
GCC
ICC
LCC
Norcroft C
PCC
SDCC
TCC

Clang
GCC
ICC
LCC
Norcroft C
PCC
SDCC
TCC
Visual Studio, Express, C++
Watcom C/C++
IDEs
Anjuta
CLion
Code::Blocks
CodeLite
Eclipse
Geany
GNOME Builder
KDevelop
Visual Studio
NetBeans
Comparison withother languages
Compatibility of C and C++

Compatibility of C and C++
Comparison with Pascal
Descendantlanguages
C++
C#
D
Objective-C
Alef
Limbo
Go
Vala
Designer
Dennis Ritchie
Category
vteIntegrated development environmentsC, C++Open source
Arduino IDE
Code::Blocks
CodeLite
Dev-C++
Eclipse

Arduino IDE
Code::Blocks
CodeLite
Dev-C++
Eclipse
Emacs
Geany
GNOME Builder
Kakoune
KDevelop
NetBeans
QDevelop
Qt Creator
TheIDE
Vi–Vim
OpenWatcom
Freeware
DevEco Studio
Oracle Developer Studio
Visual Studio Code
Visual Studio Community
Xcode
Retail

Visual Studio Community
Xcode
Retail
C++Builder
Eclipse-based
CodeWarrior
MyEclipse
Visual Studio
By JetBrains
IntelliJ IDEA
AppCode
CLion
LabWindows/CVI
IBM Rational Software Architect
Understand
SlickEdit
Discontinued
Anjuta
VisualAge

SlickEdit
Discontinued
Anjuta
VisualAge
Visual C++ Express
MonoDevelop
SharpDevelop
Borland Turbo C, C++
QuickC
JavaOpen source
Anjuta
BlueJ
DrJava
Eclipse
Geany
Greenfoot
IntelliJ IDEA Community Edition
Android Studio
NetBeans
DevEco Studio

Android Studio
NetBeans
DevEco Studio
Freeware
jGRASP
JDeveloper
Retail
JCreator
MyEclipse
JetBrains IntelliJ IDEA
SlickEdit
Understand
Discontinued
Metrowerks CodeWarrior Pro for Java
JBuilder
Sun Java Studio Creator (superseded by NetBeans)

Sun Java Studio Creator (superseded by NetBeans)
VisualAge (superseded by Eclipse)
Visual Café (aka Espresso, superseded by JBuilder)
Visual J++
Xelfi (became NetBeans)
JavaScriptOpen source
Vim
Visual Studio Code
Atom
Chromium
DevEco Studio

Visual Studio Code
Atom
Chromium
DevEco Studio
CLI (.NET)Open source
Visual Studio Code
PascalABC.NET
Freeware
Visual Studio Community
Retail
Visual Studio
Rider
Understand
Discontinued
Xamarin Studio
MonoDevelop
SharpDevelop
Visual Basic Express

MonoDevelop
SharpDevelop
Visual Basic Express
Visual Web Developer Express
Visual J# Express
Visual Studio Express for Windows Phone
Visual C++ Express
Visual C# Express
Express for Desktop
Express for Web
Express for Windows
Flash

Express for Web
Express for Windows
Flash
Adobe Flash Builder
FlashDevelop
Powerflasher FDT
PHPOpen source
Aptana
NetBeans
Komodo Edit
Komodo IDE
KDevelop
Proprietary
Codelobster
PhpStorm
PHPEdit
SlickEdit
Zend Studio
R
RStudio

PhpStorm
PHPEdit
SlickEdit
Zend Studio
R
RStudio
R Tools for Visual Studio
PythonOpen source
Anjuta
IDLE
Eric
Light Table
Ninja-IDE
PyDev
PyScripter
PIDA
Spyder
Komodo Edit
Komodo IDE
KDevelop
Vim
Visual Studio Code
Thonny
DevEco Studio
Proprietary

Thonny
DevEco Studio
Proprietary
PyCharm
PythonAnywhere
Visual Studio Code
SlickEdit
Wing IDE
Pascal,Object PascalOpen source
Free Pascal IDE
Lazarus
Dev-Pascal
GNAVI
PascalABC.NET
Freeware
Delphi Community
Retail
Delphi
Discontinued
Turbo Pascal

Retail
Delphi
Discontinued
Turbo Pascal
Virtual Pascal
Borland Kylix
QuickPascal
BASICOpen source
Basic-256
B4X
Microsoft Small Basic
SdlBasic
Gambas
Basic4GL
VisualFBEditor / WinFBE
InForm
Freeware
FutureBASIC
RapidQ
thinAir
Visual Studio Community

RapidQ
thinAir
Visual Studio Community
Retail
Visual Studio
NS Basic
PureBasic
GLBasic
Liberty BASIC
Xojo
Discontinued
CA-Realizer
MonoDevelop
QuickBASIC
QBasic
SharpDevelop
Visual Basic
Visual Basic Express
GoOpen source
Vim

Visual Basic Express
GoOpen source
Vim
Visual Studio Code (VSCode)
Eclipse
Freeware
Cloud9 IDE
Retail
GoLand
Haxe
IntelliJ IDEA
VS Code
Sublime Text
Powerflasher FDT
POP-11
Poplog
Online
AWS Cloud9 IDE
Eclipse Che
SourceLair
Comparison
Category

Eclipse Che
SourceLair
Comparison
Category
vteProgramming languages
Comparison
Timeline
History
Ada
ALGOL
Simula
APL
Assembly
BASIC
Visual Basic
classic
.NET
C
C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Julia
Kotlin
Lisp
Lua
MATLAB

Java
JavaScript
Julia
Kotlin
Lisp
Lua
MATLAB
ML
Pascal
Object Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Scratch
Shell
Smalltalk
Swift
more...
Lists: Alphabetical
Categorical
Generational
Non-English-based
Category

Generational
Non-English-based
Category
Authority control databases InternationalFASTNationalGermanyUnited StatesFranceBnF dataCzech RepublicIsraelOtherIdRef

Retrieved from "https://en.wikipedia.org/w/index.php?title=C_(programming_language)&oldid=1250758841"

Categories: C (programming language)American inventionsC programming language familyCross-platform softwareHigh-level programming languagesProcedural programming languagesStructured programming languagesProgramming languages created in

languagesProgramming languages created in 1972Programming languages with an ISO standardStatically typed programming languagesSystems programming languagesHidden categories: Wikipedia articles needing clarification from November 2023Webarchive

clarification from November 2023Webarchive template wayback linksArticles with short descriptionShort description matches WikidataWikipedia pending changes protected pagesUse mdy dates from August 2024All articles with vague or ambiguous timeVague

articles with vague or ambiguous timeVague or ambiguous time from August 2022Wikipedia articles in need of updating from February 2021All Wikipedia articles in need of updatingArticles needing additional references from October 2012All articles

references from October 2012All articles needing additional referencesWikipedia articles needing clarification from October 2021Articles needing additional references from July 2014Pages using Sister project links with default searchPages using

project links with default searchPages using Sister project links with wikidata mismatchPages using Sister project links with hidden wikidataArticles with example C code

This page was last edited on 12 October 2024, at 10:27 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License;

additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policy
About Wikipedia
Disclaimers

Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view

JavaScript - Wikipedia
Jump to content
Main menu
Main menu
move to sidebar
hide
Navigation
Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us
Contribute
HelpLearn to editCommunity portalRecent changesUpload file
Search
Search

Search
Search
Donate
Appearance
Create account
Log in
Personal tools
Create account Log in
Pages for logged out editors learn more
ContributionsTalk
Contents
move to sidebar
hide
(Top)
1
History
Toggle History subsection
1.1
Creation at Netscape
1.2

1.1
Creation at Netscape
1.2
Adoption by Microsoft
1.3
The rise of JScript
1.4
Growth and standardization
1.5
Reaching maturity
2
Trademark
3
Website client-side usage
Toggle Website client-side usage subsection
3.1
Examples of scripted behavior
3.2

3.1
Examples of scripted behavior
3.2
Libraries and frameworks
4
Other usage
5
Execution
Toggle Execution subsection
5.1
JavaScript engine
5.2
Runtime system
6
Features
Toggle Features subsection
6.1
Imperative and structured
6.2
Weakly typed
6.3

Imperative and structured
6.2
Weakly typed
6.3
Dynamic
6.3.1
Typing
6.3.2
Run-time evaluation
6.4
Object-orientation (prototype-based)
6.4.1
Prototypes
6.4.2
Functions as object constructors
6.4.3
Functions as methods
6.5
Functional
6.5.1

6.4.3
Functions as methods
6.5
Functional
6.5.1
Lexical closure
6.5.2
Anonymous function
6.6
Delegative
6.6.1
Functions as roles (Traits and Mixins)
6.6.2
Object composition and inheritance
6.7
Miscellaneous
6.7.1
Zero-based numbering
6.7.2

Miscellaneous
6.7.1
Zero-based numbering
6.7.2
Variadic functions
6.7.3
Array and object literals
6.7.4
Regular expressions
6.7.5
Promises and Async/await
6.7.5.1
Promises
6.7.5.2
Async/await
6.8
Vendor-specific extensions
7
Syntax

6.8
Vendor-specific extensions
7
Syntax
Toggle Syntax subsection
7.1
Simple examples
7.2
More advanced example
8
Security
Toggle Security subsection
8.1
Cross-site scripting
8.2
Cross-site request forgery
8.3
Misplaced trust in the client
8.4

8.3
Misplaced trust in the client
8.4
Misplaced trust in developers
8.5
Browser and plugin coding errors
8.6
Sandbox implementation errors
8.7
Hardware vulnerabilities
9
Development tools
10
Related technologies

9
Development tools
10
Related technologies
Toggle Related technologies subsection
10.1
Java
10.2
JSON
10.3
Transpilers
10.4
WebAssembly
11
References
12
Sources
13
Further reading
14
External links
Toggle the table of contents
JavaScript

Toggle the table of contents
JavaScript
109 languages

AfrikaansÆngliscالعربيةAragonésAsturianuAzərbaycancaتۆرکجهবাংলা閩南語 / Bân-lâm-gúБеларускаяБеларуская (тарашкевіца)БългарскиBrezhonegCatalàЧӑвашлаČeštinaDanskDeutschEestiΕλληνικάEspañolEsperantoEuskaraفارسیFrançaisGalego客家語 /

/ Hak-kâ-ngî한국어HausaՀայերենहिन्दीHrvatskiIdoBahasa IndonesiaInterlinguaÍslenskaItalianoעבריתJawaქართულიҚазақшаKiswahiliKurdîКыргызчаLatinaLatviešuLietuviųLingua Franca NovaLombardMagyarМакедонскиമലയാളംमराठीمصرىمازِرونیBahasa Melayu閩東語 /

Melayu閩東語 / Mìng-dĕ̤ng-ngṳ̄Монголမြန်မာဘာသာNederlandsनेपाली日本語NordfriiskNorsk bokmålଓଡ଼ିଆOʻzbekcha / ўзбекчаپنجابیပအိုဝ်ႏဘာႏသာႏភាសាខ្មែរPinayuananPolskiPortuguêsQaraqalpaqshaRomânăRuna SimiРусскийСаха тылаScotsShqipසිංහලSimple

SimiРусскийСаха тылаScotsShqipසිංහලSimple EnglishSlovenčinaSlovenščinaSoomaaligaکوردیСрпски / srpskiSrpskohrvatski / српскохрватскиSundaSuomiSvenskaTagalogதமிழ்TaqbaylitТатарча / tatarçaతెలుగుTetunไทยTürkçeTürkmençeBasa UgiУкраїнськаاردوVènetoTiếng

UgiУкраїнськаاردوVènetoTiếng Việt文言吴语粵語Žemaitėška中文

Edit links
ArticleTalk
English
ReadView sourceView history
Tools
Tools
move to sidebar
hide
Actions
ReadView sourceView history
General

hide
Actions
ReadView sourceView history
General
What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata item
Print/export
Download as PDFPrintable version

Print/export
Download as PDFPrintable version
In other projects
Wikimedia CommonsMediaWikiWikibooksWikifunctionsWikiversity
Appearance
move to sidebar
hide
Checked
From Wikipedia, the free encyclopedia

Checked
From Wikipedia, the free encyclopedia
Page version statusThis is an accepted version of this pageThis is the latest accepted revision, reviewed on 12 October 2024.
High-level programming language

High-level programming language
Not to be confused with Java (programming language), Javanese script, or ECMAScript.

JavaScriptScreenshot of JavaScript source codeParadigmMulti-paradigm: event-driven, functional, imperative, procedural, object-orientedDesigned byBrendan Eich of Netscape initially; others have also contributed to the ECMAScript

others have also contributed to the ECMAScript standardFirst appeared4 December 1995; 28 years ago (1995-12-04)[1]Stable releaseECMAScript 2024[2]

/ June 2024; 4 months ago (June 2024)Preview releaseECMAScript 2025[3]
/ 27 March 2024; 6 months ago (27 March 2024)
Typing disciplineDynamic, weak, duckFilename extensions
.js
.cjs
.mjs[4]

Websiteecma-international.org/publications-and-standards/standards/ecma-262/Major implementationsV8, JavaScriptCore, SpiderMonkey, ChakraInfluenced byJava,[5][6] Scheme,[6] Self,[7] AWK,[8] HyperTalk[9]InfluencedActionScript, ArkTS, AssemblyScript,

ArkTS, AssemblyScript, CoffeeScript, Dart, Haxe, JS++, Opa, TypeScript

JavaScript at Wikibooks
JavaScript (/ˈdʒɑːvəskrɪpt/), often abbreviated as JS, is a programming language and core technology of the Web, alongside HTML and CSS. 99% of websites use JavaScript on the client side for webpage behavior.[10]

Web browsers have a dedicated JavaScript engine that executes the client code. These engines are also utilized in some servers and a variety of apps. The most popular runtime system for non-browser usage is Node.js.

JavaScript is a high-level, often just-in-time compiled language that conforms to the ECMAScript standard.[11] It has dynamic typing, prototype-based object-orientation, and first-class functions. It is multi-paradigm, supporting event-driven,

It is multi-paradigm, supporting event-driven, functional, and imperative programming styles. It has application programming interfaces (APIs) for working with text, dates, regular expressions, standard data structures, and the Document Object Model

data structures, and the Document Object Model (DOM).

The ECMAScript standard does not include any input/output (I/O), such as networking, storage, or graphics facilities. In practice, the web browser or other runtime system provides JavaScript APIs for I/O.

Although Java and JavaScript are similar in name, syntax, and respective standard libraries, the two languages are distinct and differ greatly in design.
History
Creation at Netscape

The first popular web browser with a graphical user interface, Mosaic, was released in 1993. Accessible to non-technical people, it played a prominent role in the rapid growth of the early World Wide Web.[12] The lead developers of Mosaic then

Wide Web.[12] The lead developers of Mosaic then founded the Netscape corporation, which released a more polished browser, Netscape Navigator, in 1994. This quickly became the most-used.[13]

During these formative years of the Web, web pages could only be static, lacking the capability for dynamic behavior after the page was loaded in the browser. There was a desire in the flourishing web development scene to remove this limitation, so

development scene to remove this limitation, so in 1995, Netscape decided to add a programming language to Navigator. They pursued two routes to achieve this: collaborating with Sun Microsystems to embed the Java language, while also hiring Brendan

the Java language, while also hiring Brendan Eich to embed the Scheme language.[6]

The goal was a "language for the masses",[14] "to help nonprogrammers create dynamic, interactive Web sites".[15] Netscape management soon decided that the best option was for Eich to devise a new language, with syntax similar to Java and less like

with syntax similar to Java and less like Scheme or other extant scripting languages.[5][6] Although the new language and its interpreter implementation were called LiveScript when first shipped as part of a Navigator beta in September 1995, the

part of a Navigator beta in September 1995, the name was changed to JavaScript for the official release in December.[6][1][16][17]

The choice of the JavaScript name has caused confusion, implying that it is directly related to Java. At the time, the dot-com boom had begun and Java was a popular new language, so Eich considered the JavaScript name a marketing ploy by

the JavaScript name a marketing ploy by Netscape.[14]

Adoption by Microsoft
Microsoft debuted Internet Explorer in 1995, leading to a browser war with Netscape. On the JavaScript front, Microsoft created its own interpreter called JScript.[18]

Microsoft first released JScript in 1996, alongside initial support for CSS and extensions to HTML. Each of these implementations was noticeably different from their counterparts in Netscape Navigator.[19][20] These differences made it difficult for

These differences made it difficult for developers to make their websites work well in both browsers, leading to widespread use of "best viewed in Netscape" and "best viewed in Internet Explorer" logos for several years.[19][21]

The rise of JScript
Brendan Eich later said of this period: "It's still kind of a sidekick language. It's considered slow or annoying. People do pop-ups or those scrolling messages in the old status bar at the bottom of your old browser."[14]

In November 1996, Netscape submitted JavaScript to Ecma International, as the starting point for a standard specification that all browser vendors could conform to. This led to the official release of the first ECMAScript language specification in

of the first ECMAScript language specification in June 1997.

The standards process continued for a few years, with the release of ECMAScript 2 in June 1998 and ECMAScript 3 in December 1999. Work on ECMAScript 4 began in 2000.[18]

However, the effort to fully standardize the language was undermined by Microsoft gaining an increasingly dominant position in the browser market. By the early 2000s, Internet Explorer's market share reached 95%.[22] This meant that JScript became

reached 95%.[22] This meant that JScript became the de facto standard for client-side scripting on the Web.

Microsoft initially participated in the standards process and implemented some proposals in its JScript language, but eventually it stopped collaborating on ECMA work. Thus ECMAScript 4 was mothballed.
Growth and standardization

During the period of Internet Explorer dominance in the early 2000s, client-side scripting was stagnant. This started to change in 2004, when the successor of Netscape, Mozilla, released the Firefox browser. Firefox was well received by many, taking

Firefox was well received by many, taking significant market share from Internet Explorer.[23]

In 2005, Mozilla joined ECMA International, and work started on the ECMAScript for XML (E4X) standard. This led to Mozilla working jointly with Macromedia (later acquired by Adobe Systems), who were implementing E4X in their ActionScript 3 language,

E4X in their ActionScript 3 language, which was based on an ECMAScript 4 draft. The goal became standardizing ActionScript 3 as the new ECMAScript 4. To this end, Adobe Systems released the Tamarin implementation as an open source project. However,

as an open source project. However, Tamarin and ActionScript 3 were too different from established client-side scripting, and without cooperation from Microsoft, ECMAScript 4 never reached fruition.

Meanwhile, very important developments were occurring in open-source communities not affiliated with ECMA work. In 2005, Jesse James Garrett released a white paper in which he coined the term Ajax and described a set of technologies, of which

and described a set of technologies, of which JavaScript was the backbone, to create web applications where data can be loaded in the background, avoiding the need for full page reloads. This sparked a renaissance period of JavaScript, spearheaded

a renaissance period of JavaScript, spearheaded by open-source libraries and the communities that formed around them. Many new libraries were created, including jQuery, Prototype, Dojo Toolkit, and MooTools.

Google debuted its Chrome browser in 2008, with the V8 JavaScript engine that was faster than its competition.[24][25] The key innovation was just-in-time compilation (JIT),[26] so other browser vendors needed to overhaul their engines for JIT.[27]

In July 2008, these disparate parties came together for a conference in Oslo. This led to the eventual agreement in early 2009 to combine all relevant work and drive the language forward. The result was the ECMAScript 5 standard, released in

result was the ECMAScript 5 standard, released in December 2009.

Reaching maturity
Ambitious work on the language continued for several years, culminating in an extensive collection of additions and refinements being formalized with the publication of ECMAScript 6 in 2015.[28]

The creation of Node.js in 2009 by Ryan Dahl sparked a significant increase in the usage of JavaScript outside of web browsers. Node combines the V8 engine, an event loop, and I/O APIs, thereby providing a stand-alone JavaScript runtime

providing a stand-alone JavaScript runtime system.[29][30] As of 2018, Node had been used by millions of developers,[31] and npm had the most modules of any package manager in the world.[32]

The ECMAScript draft specification is currently maintained openly on GitHub,[33] and editions are produced via regular annual snapshots.[33] Potential revisions to the language are vetted through a comprehensive proposal process.[34][35] Now,

a comprehensive proposal process.[34][35] Now, instead of edition numbers, developers check the status of upcoming features individually.[33]

The current JavaScript ecosystem has many libraries and frameworks, established programming practices, and substantial usage of JavaScript outside of web browsers.[17] Plus, with the rise of single-page applications and other JavaScript-heavy

applications and other JavaScript-heavy websites, several transpilers have been created to aid the development process.[36]

Trademark
"JavaScript" is a trademark of Oracle Corporation in the United States.[37][38] The trademark was originally issued to Sun Microsystems on 6 May 1997, and was transferred to Oracle when they acquired Sun in 2009.[39]

Website client-side usage
JavaScript is the dominant client-side scripting language of the Web, with 99% of all websites using it for this purpose.[10] Scripts are embedded in or included from HTML documents and interact with the DOM.

All major web browsers have a built-in JavaScript engine that executes the code on the user's device.
Examples of scripted behavior

Examples of scripted behavior
Loading new web page content without reloading the page, via Ajax or a WebSocket. For example, users of social media can send and receive messages without leaving the current page.

Web page animations, such as fading objects in and out, resizing, and moving them.
Playing browser games.
Controlling the playback of streaming media.
Generating pop-up ads or alert boxes.

Generating pop-up ads or alert boxes.
Validating input values of a web form before the data is sent to a web server.

Logging data about the user's behavior then sending it to a server. The website owner can use this data for analytics, ad tracking, and personalization.
Redirecting a user to another page.

Redirecting a user to another page.
Storing and retrieving data on the user's device, via the storage or IndexedDB standards.
Libraries and frameworks

Libraries and frameworks
Over 80% of websites use a third-party JavaScript library or web framework as part of their client-side scripting.[40]

jQuery is by far the most-used.[40] Other notable ones include Angular, Bootstrap, Lodash, Modernizr, React, Underscore, and Vue.[40] Multiple options can be used in conjunction, such as jQuery and Bootstrap.[41]

However, the term "Vanilla JS" was coined for websites not using any libraries or frameworks at all, instead relying entirely on standard JavaScript functionality.[42]
Other usage

Other usage
The use of JavaScript has expanded beyond its web browser roots. JavaScript engines are now embedded in a variety of other software systems, both for server-side website deployments and non-browser applications.

Initial attempts at promoting server-side JavaScript usage were Netscape Enterprise Server and Microsoft's Internet Information Services,[43][44] but they were small niches.[45] Server-side usage eventually started to grow in the late 2000s, with

started to grow in the late 2000s, with the creation of Node.js and other approaches.[45]

Electron, Cordova, React Native, and other application frameworks have been used to create many applications with behavior implemented in JavaScript. Other non-browser applications include Adobe Acrobat support for scripting PDF documents[46] and

support for scripting PDF documents[46] and GNOME Shell extensions written in JavaScript.[47]

JavaScript has been used in some embedded systems, usually by leveraging Node.js.[48][49][50]
Execution
JavaScript engine
This section is an excerpt from JavaScript engine.[edit]

A JavaScript engine is a software component that executes JavaScript code. The first JavaScript engines were mere interpreters, but all relevant modern engines use just-in-time compilation for improved performance.[51]

JavaScript engines are typically developed by web browser vendors, and every major browser has one. In a browser, the JavaScript engine runs in concert with the rendering engine via the Document Object Model and Web IDL bindings.[52] However, the

Model and Web IDL bindings.[52] However, the use of JavaScript engines is not limited to browsers; for example, the V8 engine is a core component of the Node.js runtime system.[53]

Since ECMAScript is the standardized specification of JavaScript, ECMAScript engine is another name for these implementations. With the advent of WebAssembly, some engines can also execute this code in the same sandbox as regular JavaScript

code in the same sandbox as regular JavaScript code.[54][53]

Runtime system

A JavaScript engine must be embedded within a runtime system (such as a web browser or a standalone system) to enable scripts to interact with the broader environment. The runtime system includes the necessary APIs for input/output operations, such

necessary APIs for input/output operations, such as networking, storage, and graphics, and provides the ability to import scripts.

JavaScript is a single-threaded language. The runtime processes messages from a queue one at a time, and it calls a function associated with each new message, creating a call stack frame with the function's arguments and local variables. The call

arguments and local variables. The call stack shrinks and grows based on the function's needs. When the call stack is empty upon function completion, JavaScript proceeds to the next message in the queue. This is called the event loop, described as

This is called the event loop, described as "run to completion" because each message is fully processed before the next message is considered. However, the language's concurrency model describes the event loop as non-blocking: program I/O is

the event loop as non-blocking: program I/O is performed using events and callback functions. This means, for example, that JavaScript can process a mouse click while waiting for a database query to return information.[55]

The notable standalone runtimes are Node.js, Deno, and Bun.
Features
The following features are common to all conforming ECMAScript implementations unless explicitly specified otherwise.
Imperative and structured
Main article: Structured programming

JavaScript supports much of the structured programming syntax from C (e.g., if statements, while loops, switch statements, do while loops, etc.). One partial exception is scoping: originally JavaScript only had function scoping with var; block

only had function scoping with var; block scoping was added in ECMAScript 2015 with the keywords let and const. Like C, JavaScript makes a distinction between expressions and statements. One syntactic difference from C is automatic semicolon

difference from C is automatic semicolon insertion, which allow semicolons (which terminate statements) to be omitted.[56]

Weakly typed
Main article: Weakly typed
JavaScript is weakly typed, which means certain types are implicitly cast depending on the operation used.[57]

The binary + operator casts both operands to a string unless both operands are numbers. This is because the addition operator doubles as a concatenation operator
The binary - operator always casts both operands to a number

Both unary operators (+, -) always cast the operand to a number
Values are cast to strings like the following:[57]
Strings are left as-is
Numbers are converted to their string representation

Arrays have their elements cast to strings after which they are joined by commas (,)
Other objects are converted to the string [object Object] where Object is the name of the constructor of the object

Values are cast to numbers by casting to strings and then casting the strings to numbers. These processes can be modified by defining toString and valueOf functions on the prototype for string and number casting respectively.

JavaScript has received criticism for the way it implements these conversions as the complexity of the rules can be mistaken for inconsistency.[58][57] For example, when adding a number to a string, the number will be cast to a string before

the number will be cast to a string before performing concatenation, but when subtracting a number from a string, the string is cast to a number before performing subtraction.

JavaScript type conversions
left operand
operator
right operand
result
[] (empty array)
+
[] (empty array)
"" (empty string)
[] (empty array)
+
{} (empty object)
"[object Object]" (string)
false (boolean)
+
[] (empty array)
"false" (string)

+
[] (empty array)
"false" (string)
"123"(string)
+
1 (number)
"1231" (string)
"123" (string)
-
1 (number)
122 (number)
"123" (string)
-
"abc" (string)
NaN (number)

Often also mentioned is {} + [] resulting in 0 (number). This is misleading: the {} is interpreted as an empty code block instead of an empty object, and the empty array is cast to a number by the remaining unary + operator. If the expression is

remaining unary + operator. If the expression is wrapped in parentheses - ({} + []) – the curly brackets are interpreted as an empty object and the result of the expression is "[object Object]" as expected.[57]

Dynamic
Main article: Dynamic Programming
Typing
Main article: Dynamic typing

JavaScript is dynamically typed like most other scripting languages. A type is associated with a value rather than an expression. For example, a variable initially bound to a number may be reassigned to a string.[59] JavaScript supports various ways

to a string.[59] JavaScript supports various ways to test the type of objects, including duck typing.[60]

Run-time evaluation
Main article: eval
JavaScript includes an eval function that can execute statements provided as strings at run-time.
Object-orientation (prototype-based)
Prototypal inheritance in JavaScript is described by Douglas Crockford as:

You make prototype objects, and then ... make new instances. Objects are mutable in JavaScript, so we can augment the new instances, giving them new fields and methods. These can then act as prototypes for even newer objects. We don't need classes

for even newer objects. We don't need classes to make lots of similar objects... Objects inherit from objects. What could be more object oriented than that?[61]

In JavaScript, an object is an associative array, augmented with a prototype (see below); each key provides the name for an object property, and there are two syntactical ways to specify such a name: dot notation (obj.x = 10) and bracket notation

dot notation (obj.x = 10) and bracket notation (obj['x'] = 10). A property may be added, rebound, or deleted at run-time. Most properties of an object (and any property that belongs to an object's prototype inheritance chain) can be enumerated using

inheritance chain) can be enumerated using a for...in loop.

Prototypes
Main article: Prototype-based programming
JavaScript uses prototypes where many other object-oriented languages use classes for inheritance.[62] It is possible to simulate many class-based features with prototypes in JavaScript.[63]

Functions as object constructors

Functions double as object constructors, along with their typical role. Prefixing a function call with new will create an instance of a prototype, inheriting properties and methods from the constructor (including properties from the Object

constructor (including properties from the Object prototype).[64] ECMAScript 5 offers the Object.create method, allowing explicit creation of an instance without automatically inheriting from the Object prototype (older environments can assign the

prototype (older environments can assign the prototype to null).[65] The constructor's prototype property determines the object used for the new object's internal prototype. New methods can be added by modifying the prototype of the function used as

modifying the prototype of the function used as a constructor. JavaScript's built-in constructors, such as Array or Object, also have prototypes that can be modified. While it is possible to modify the Object prototype, it is generally considered

the Object prototype, it is generally considered bad practice because most objects in JavaScript will inherit methods and properties from the Object prototype, and they may not expect the prototype to be modified.[66]

Functions as methods
Main article: Method (computer science)

Unlike in many object-oriented languages, in JavaScript there is no distinction between a function definition and a method definition. Rather, the distinction occurs during function calling. When a function is called as a method of an object, the

function is called as a method of an object, the function's local this keyword is bound to that object for that invocation.

Functional
Main article: Functional programming
JavaScript functions are first-class; a function is considered to be an object.[67] As such, a function may have properties and methods, such as .call() and .bind().[68]
Lexical closure

Lexical closure
Main article: Closure (computer programming)
A nested function is a function defined within another function. It is created each time the outer function is invoked.

In addition, each nested function forms a lexical closure: the lexical scope of the outer function (including any constant, local variable, or argument value) becomes part of the internal state of each inner function object, even after execution of

inner function object, even after execution of the outer function concludes.[69]

Anonymous function
Main article: Anonymous function
JavaScript also supports anonymous functions.
Delegative
Main article: Delegation (object-oriented programming)
JavaScript supports implicit and explicit delegation.

Functions as roles (Traits and Mixins)
Main articles: Role-oriented programming, Traits (computer science), and Mixin

JavaScript natively supports various function-based implementations of Role[70] patterns like Traits[71][72] and Mixins.[73] Such a function defines additional behavior by at least one method bound to the this keyword within its function body. A

to the this keyword within its function body. A Role then has to be delegated explicitly via call or apply to objects that need to feature additional behavior that is not shared via the prototype chain.

Object composition and inheritance

Whereas explicit function-based delegation does cover composition in JavaScript, implicit delegation already happens every time the prototype chain is walked in order to, e.g., find a method that might be related to but is not directly owned by an

be related to but is not directly owned by an object. Once the method is found it gets called within this object's context. Thus inheritance in JavaScript is covered by a delegation automatism that is bound to the prototype property of constructor

is bound to the prototype property of constructor functions.

Miscellaneous
Zero-based numbering
JavaScript is a zero-index language.
Variadic functions
Main article: Variadic function

An indefinite number of parameters can be passed to a function. The function can access them through formal parameters and also through the local arguments object. Variadic functions can also be created by using the bind method.

Array and object literals
Main articles: Associative arrays and Object literal

Like in many scripting languages, arrays and objects (associative arrays in other languages) can each be created with a succinct shortcut syntax. In fact, these literals form the basis of the JSON data format.
Regular expressions

Regular expressions
Main article: Regular expression

Main article: Regular expression
In a manner similar to Perl, JavaScript also supports regular expressions, which provide a concise and powerful syntax for text manipulation that is more sophisticated than the built-in string functions.[74]

Promises and Async/await
JavaScript supports promises and Async/await for handling asynchronous operations.[citation needed]
Promises
Main article: Futures and promises

A built-in Promise object provides functionality for handling promises and associating handlers with an asynchronous action's eventual result. Recently, the JavaScript specification introduced combinator methods, which allow developers to combine

methods, which allow developers to combine multiple JavaScript promises and do operations based on different scenarios. The methods introduced are: Promise.race, Promise.all, Promise.allSettled and Promise.any.

Async/await
Main article: Async/await

Async/await allows an asynchronous, non-blocking function to be structured in a way similar to an ordinary synchronous function. Asynchronous, non-blocking code can be written, with minimal overhead, structured similarly to traditional synchronous,

structured similarly to traditional synchronous, blocking code.

Vendor-specific extensions
Historically, some JavaScript engines supported these non-standard features:
conditional catch clauses (like Java)
array comprehensions and generator expressions (like Python)

concise function expressions (function(args) expr; this experimental syntax predated arrow functions)
ECMAScript for XML (E4X), an extension that adds native XML support to ECMAScript (unsupported in Firefox since version 21[75])
Syntax

Syntax
Main article: JavaScript syntax
Simple examples
Variables in JavaScript can be defined using either the var,[76] let[77] or const[78] keywords.  Variables defined without keywords will be defined at the global scope.

// Declares a function-scoped variable named `x`, and implicitly assigns the
// special value `undefined` to it. Variables without value are automatically
// set to undefined.

// set to undefined.
// var is generally considered bad practice and let and const are usually preferred.
var x;
// Variables can be manually set to `undefined` like so
let x2 = undefined;

let x2 = undefined;
// Declares a block-scoped variable named `y`, and implicitly sets it to
// `undefined`. The `let` keyword was introduced in ECMAScript 2015.
let y;
// Declares a block-scoped, un-reassignable variable named `z`, and sets it to

// a string literal. The `const` keyword was also introduced in ECMAScript 2015,
// and must be explicitly assigned to.
// The keyword `const` means constant, hence the variable cannot be reassigned
// as the value is `constant`.

// as the value is `constant`.
const z = "this value cannot be reassigned!";
// Declares a global-scoped variable and assigns 3.  This is generally considered
// bad practice, and will not work if strict mode is on.
t = 3;

t = 3;
// Declares a variable named `myNumber`, and assigns a number literal (the value
// `2`) to it.
let myNumber = 2;
// Reassigns `myNumber`, setting it to a string literal (the value `"foo"`).

// JavaScript is a dynamically-typed language, so this is legal.
myNumber = "foo";
Note the comments in the examples above, all of which were preceded with two forward slashes.

There is no built-in Input/output functionality in JavaScript, instead it is provided by the run-time environment. The ECMAScript specification in edition 5.1 mentions that "there are no provisions in this specification for input of external data or

this specification for input of external data or output of computed results".[79]

However, most runtime environments have a console object that can be used to print output.[80] Here is a minimalist "Hello, World!" program in JavaScript in a runtime environment with a console object:
console.log("Hello, World!");

console.log("Hello, World!");
In HTML documents, a program like this is required for an output:
// Text nodes can be made using the "write" method.
// This is frowned upon, as it can overwrite the document if the document is fully loaded.

document.write('foo');
// Elements can be made too. First, they have to be created in the DOM.
const myElem = document.createElement('span');
// Attributes like classes and the id can be set as well
myElem.classList.add('foo');
myElem.id = 'bar';

myElem.classList.add('foo');
myElem.id = 'bar';
// After setting this, the tag will look like this: `<span class="foo" id="bar" data-attr="baz"></span>`

myElem.setAttribute('data-attr', 'baz'); // Which could also be written as `myElem.dataset.attr = 'baz'`
// Finally append it as a child element to the <body> in the HTML
document.body.appendChild(myElem);

document.body.appendChild(myElem);
// Elements can be imperatively grabbed with querySelector for one element, or querySelectorAll for multiple elements that can be looped with forEach

document.querySelector('.class'); // Selects the first element with the "class" class
document.querySelector('#id'); // Selects the first element with an `id` of "id"

document.querySelector('[data-other]'); // Selects the first element with the "data-other" attribute
document.querySelectorAll('.multiple'); // Returns an Array-like NodeList of all elements with the "multiple" class

A simple recursive function to calculate the factorial of a natural number:
function factorial(n) {
// Checking the argument for legitimacy. Factorial is defined for positive integers.
if (isNaN(n)) {

if (isNaN(n)) {
console.error("Non-numerical argument not allowed.");
return NaN; // The special value: Not a Number
}
if (n === 0)
return 1; // 0! = 1
if (n < 0)
return undefined; // Factorial of negative numbers is not defined.
if (n % 1) {

if (n % 1) {
console.warn(`${n} will be rounded to the closest integer. For non-integers consider using gamma function instead.`);
n = Math.round(n);
}

n = Math.round(n);
}
// The above checks need not be repeated in the recursion, hence defining the actual recursive part separately below.

// The following line is a function expression to recursively compute the factorial. It uses the arrow syntax introduced in ES6.
const recursivelyCompute = a => a > 1 ? a * recursivelyCompute(a - 1) : 1; // Note the use of the ternary operator `?`.

return recursivelyCompute(n);
}
factorial(3); // Returns 6
An anonymous function (or lambda):
const counter = function() {
let count = 0;
return function() {
return ++count;
}
};
const x = counter();
x(); // Returns 1
x(); // Returns 2

x(); // Returns 1
x(); // Returns 2
x(); // Returns 3
This example shows that, in JavaScript, function closures capture their non-local variables by reference.

Arrow functions were first introduced in 6th Edition – ECMAScript 2015. They shorten the syntax for writing functions in JavaScript. Arrow functions are anonymous, so a variable is needed to refer to them in order to invoke them after their

refer to them in order to invoke them after their creation, unless surrounded by parenthesis and executed immediately.

Example of arrow function:
// Arrow functions let us omit the `function` keyword.
// Here `long_example` points to an anonymous function value.
const long_example = (input1, input2) => {
console.log("Hello, World!");
const output = input1 + input2;

const output = input1 + input2;
return output;
};
// If there are no braces, the arrow function simply returns the expression
// So here it's (input1 + input2)
const short_example = (input1, input2) => input1 + input2;

long_example(2, 3); // Prints "Hello, World!" and returns 5
short_example(2, 5);  // Returns 7
// If an arrow function has only one parameter, the parentheses can be removed.
const no_parentheses = input => input + 2;
no_parentheses(3); // Returns 5

no_parentheses(3); // Returns 5
// An arrow function, like other function definitions, can be executed in the same statement as they are created.
// This is useful when writing libraries to avoid filling the global scope, and for closures.

let three = ((a, b) => a + b) (1, 2);
const generate_multiplier_function = a => (b => isNaN(b) || !b ? a : a*=b);
const five_multiples = generate_multiplier_function(5); // The supplied argument "seeds" the expression and is retained by a.

five_multiples(1); // Returns 5
five_multiples(3); // Returns 15
five_multiples(4); // Returns 60
In JavaScript, objects can be created as instances of a class.
Object class example:
class Ball {
constructor(radius) {
this.radius = radius;

constructor(radius) {
this.radius = radius;
this.area = Math.PI * ( radius ** 2 );
}
// Classes (and thus objects) can contain functions known as methods
show() {
console.log(this.radius);
}
};

show() {
console.log(this.radius);
}
};
const myBall = new Ball(5); // Creates a new instance of the ball object with radius 5
myBall.radius++; // Object properties can usually be modified from the outside

myBall.show();   // Using the inherited "show" function logs "6"
In JavaScript, objects can be instantiated directly from a function.
Object functional example:
function Ball(radius) {
const area = Math.PI * ( radius ** 2 );

const area = Math.PI * ( radius ** 2 );
const obj = { radius, area };
// Objects are mutable, and functions can be added as properties.
obj.show = () => console.log(obj.radius);
return obj;
};

return obj;
};
const myBall = Ball(5); // Creates a new ball object with radius 5. No "new" keyword needed.
myBall.radius++; // The instance property can be modified.
myBall.show();   // Using the "show" function logs "6" - the new instance value.

Variadic function demonstration (arguments is a special variable):[81]
function sum() {
let x = 0;
for (let i = 0; i < arguments.length; ++i)
x += arguments[i];
return x;
}
sum(1, 2); // Returns 3
sum(1, 2, 3); // Returns 6

sum(1, 2, 3); // Returns 6
// As of ES6, using the rest operator.
function sum(...args) {
return args.reduce((a, b) => a + b);
}
sum(1, 2); // Returns 3
sum(1, 2, 3); // Returns 6

sum(1, 2, 3); // Returns 6
Immediately-invoked function expressions are often used to create closures. Closures allow gathering properties and methods in a namespace and making some of them private:
let counter = (function() {

let counter = (function() {
let i = 0; // Private property
return {   // Public methods
get: function() {
alert(i);
},
set: function(value) {
i = value;
},
increment: function() {
alert(++i);
}
};
})(); // Module
counter.get(); // Returns 0

}
};
})(); // Module
counter.get(); // Returns 0
counter.set(6);
counter.increment(); // Returns 7
counter.increment(); // Returns 8

counter.increment(); // Returns 8
Generator objects (in the form of generator functions) provide a function which can be called, exited, and re-entered while maintaining internal context (statefulness).[82]function* rawCounter() {
yield 1;
yield 2;

yield 1;
yield 2;
}
function* dynamicCounter() {
let count = 0;
while (true) {
// It is not recommended to utilize while true loops in most cases.
yield ++count;
}
}
// Instances
const counter1 = rawCounter();
const counter2 = dynamicCounter();

const counter2 = dynamicCounter();
// Implementation
counter1.next(); // {value: 1, done: false}
counter1.next(); // {value: 2, done: false}
counter1.next(); // {value: undefined, done: true}
counter2.next(); // {value: 1, done: false}

counter2.next(); // {value: 1, done: false}
counter2.next(); // {value: 2, done: false}
counter2.next(); // {value: 3, done: false}
// ...infinitely
JavaScript can export and import from modules:[83]
Export example:
/* mymodule.js */

Export example:
/* mymodule.js */
// This function remains private, as it is not exported
let sum = (a, b) => {
return a + b;
}
// Export variables
export let name = 'Alice';
export let age = 23;
// Export named functions

export let age = 23;
// Export named functions
export function add(num1, num2) {
return num1 + num2;
}
// Export class
export class Multiplication {
constructor(num1, num2) {
this.num1 = num1;
this.num2 = num2;
}
add() {

this.num1 = num1;
this.num2 = num2;
}
add() {
return sum(this.num1, this.num2);
}
}
Import example:
// Import one property
import { add } from './mymodule.js';
console.log(add(1, 2));
//> 3
// Import multiple properties

//> 3
// Import multiple properties
import { name, age } from './mymodule.js';
console.log(name, age);
//> "Alice", 23
// Import all properties from a module
import * from './module.js'
console.log(name, age);
//> "Alice", 23
console.log(add(1,2));

//> "Alice", 23
console.log(add(1,2));
//> 3
More advanced example
This sample code displays various JavaScript features.
/* Finds the lowest common multiple (LCM) of two numbers */
function LCMCalculator(x, y) { // constructor function

if (isNaN(x*y)) throw new TypeError("Non-numeric arguments not allowed.");
const checkInt = function(x) { // inner function
if (x % 1 !== 0)
throw new TypeError(x + "is not an integer");
return x;
};
this.a = checkInt(x)

return x;
};
this.a = checkInt(x)
//   semicolons   ^^^^  are optional, a newline is enough
this.b = checkInt(y);
}
// The prototype of object instances created by a constructor is
// that constructor's "prototype" property.

// that constructor's "prototype" property.
LCMCalculator.prototype = { // object literal
constructor: LCMCalculator, // when reassigning a prototype, set the constructor property appropriately

gcd: function() { // method that calculates the greatest common divisor
// Euclidean algorithm:
let a = Math.abs(this.a), b = Math.abs(this.b), t;
if (a < b) {
// swap variables
// t = b; b = a; a = t;

// swap variables
// t = b; b = a; a = t;
[a, b] = [b, a]; // swap using destructuring assignment (ES6)
}
while (b !== 0) {
t = b;
b = a % b;
a = t;
}
// Only need to calculate GCD once, so "redefine" this method.

// (Actually not redefinition—it's defined on the instance itself,
// so that this.gcd refers to this "redefinition" instead of LCMCalculator.prototype.gcd.

// Note that this leads to a wrong result if the LCMCalculator object members "a" or "b" are altered afterwards.)
// Also, 'gcd' === "gcd", this['gcd'] === this.gcd
this['gcd'] = function() {
return a;
};
return a;
},

return a;
};
return a;
},
// Object property names can be specified by strings delimited by double (") or single (') quotes.
"lcm": function() {
// Variable names do not collide with object properties, e.g., |lcm| is not |this.lcm|.

// not using |this.a*this.b| to avoid FP precision issues
let lcm = this.a / this.gcd() * this.b;
// Only need to calculate lcm once, so "redefine" this method.
this.lcm = function() {
return lcm;
};
return lcm;
},

return lcm;
};
return lcm;
},
// Methods can also be declared using ES6 syntax
toString() {
// Using both ES6 template literals and the (+) operator to concatenate values
return `LCMCalculator: a = ${this.a}, b = ` + this.b;
}
};

}
};
// Define generic output function; this implementation only works for Web browsers
function output(x) {
document.body.appendChild(document.createTextNode(x));
document.body.appendChild(document.createElement('br'));
}

}
// Note: Array's map() and forEach() are defined in JavaScript 1.6.
// They are used here to demonstrate JavaScript's inherent functional nature.
[
[25, 55],
[21, 56],
[22, 58],
[28, 56]
].map(function(pair) { // array literal + mapping function

return new LCMCalculator(pair[0], pair[1]);
}).sort((a, b) => a.lcm() - b.lcm()) // sort with this comparative function; => is a shorthand form of a function, called "arrow function"
.forEach(printResult);
function printResult(obj) {

function printResult(obj) {
output(obj + ", gcd = " + obj.gcd() + ", lcm = " + obj.lcm());
}
The following output should be displayed in the browser window.
LCMCalculator: a = 28, b = 56, gcd = 28, lcm = 56

LCMCalculator: a = 28, b = 56, gcd = 28, lcm = 56
LCMCalculator: a = 21, b = 56, gcd = 7, lcm = 168
LCMCalculator: a = 25, b = 55, gcd = 5, lcm = 275
LCMCalculator: a = 22, b = 58, gcd = 2, lcm = 638
Security
See also: Browser security

JavaScript and the DOM provide the potential for malicious authors to deliver scripts to run on a client computer via the Web. Browser authors minimize this risk using two restrictions. First, scripts run in a sandbox in which they can only perform

run in a sandbox in which they can only perform Web-related actions, not general-purpose programming tasks like creating files. Second, scripts are constrained by the same-origin policy: scripts from one website do not have access to information

one website do not have access to information such as usernames, passwords, or cookies sent to another site. Most JavaScript-related security bugs are breaches of either the same origin policy or the sandbox.

There are subsets of general JavaScript—ADsafe, Secure ECMAScript (SES)—that provide greater levels of security, especially on code created by third parties (such as advertisements).[84][85] Closure Toolkit is another project for safe embedding and

Toolkit is another project for safe embedding and isolation of third-party JavaScript and HTML.[86]

Content Security Policy is the main intended method of ensuring that only trusted code is executed on a Web page.
Cross-site scripting
Main article: Cross-site scripting

A common JavaScript-related security problem is cross-site scripting (XSS), a violation of the same-origin policy. XSS vulnerabilities occur when an attacker can cause a target Website, such as an online banking website, to include a malicious

an online banking website, to include a malicious script in the webpage presented to a victim. The script in this example can then access the banking application with the privileges of the victim, potentially disclosing secret information or

potentially disclosing secret information or transferring money without the victim's authorization. One important solution to XSS vulnerabilities is HTML sanitization.

Some browsers include partial protection against reflected XSS attacks, in which the attacker provides a URL including malicious script. However, even users of those browsers are vulnerable to other XSS attacks, such as those where the malicious

XSS attacks, such as those where the malicious code is stored in a database. Only correct design of Web applications on the server-side can fully prevent XSS.

XSS vulnerabilities can also occur because of implementation mistakes by browser authors.[87]
Cross-site request forgery
Main article: Cross-site request forgery

Another cross-site vulnerability is cross-site request forgery (CSRF). In CSRF, code on an attacker's site tricks the victim's browser into taking actions the user did not intend at a target site (like transferring money at a bank). When target

(like transferring money at a bank). When target sites rely solely on cookies for request authentication, requests originating from code on the attacker's site can carry the same valid login credentials of the initiating user. In general, the

of the initiating user. In general, the solution to CSRF is to require an authentication value in a hidden form field, and not only in the cookies, to authenticate any request that might have lasting effects. Checking the HTTP Referrer header can

effects. Checking the HTTP Referrer header can also help.

"JavaScript hijacking" is a type of CSRF attack in which a <script> tag on an attacker's site exploits a page on the victim's site that returns private information such as JSON or JavaScript. Possible solutions include:

requiring an authentication token in the POST and GET parameters for any response that returns private information.
Misplaced trust in the client

Developers of client-server applications must recognize that untrusted clients may be under the control of attackers. The application author cannot assume that their JavaScript code will run as intended (or at all) because any secret embedded in the

(or at all) because any secret embedded in the code could be extracted by a determined adversary. Some implications are:

Website authors cannot perfectly conceal how their JavaScript operates because the raw source code must be sent to the client. The code can be obfuscated, but obfuscation can be reverse-engineered.

JavaScript form validation only provides convenience for users, not security. If a site verifies that the user agreed to its terms of service, or filters invalid characters out of fields that should only contain numbers, it must do so on the server,

contain numbers, it must do so on the server, not only the client.

Scripts can be selectively disabled, so JavaScript cannot be relied on to prevent operations such as right-clicking on an image to save it.[88]

It is considered very bad practice to embed sensitive information such as passwords in JavaScript because it can be extracted by an attacker.[89]

Prototype pollution is a runtime vulnerability in which attackers can overwrite arbitrary properties in an object's prototype.
Misplaced trust in developers

Package management systems such as npm and Bower are popular with JavaScript developers. Such systems allow a developer to easily manage their program's dependencies upon other developers' program libraries. Developers trust that the maintainers of

Developers trust that the maintainers of the libraries will keep them secure and up to date, but that is not always the case. A vulnerability has emerged because of this blind trust. Relied-upon libraries can have new releases that cause bugs or

can have new releases that cause bugs or vulnerabilities to appear in all programs that rely upon the libraries. Inversely, a library can go unpatched with known vulnerabilities out in the wild. In a study done looking over a sample of 133,000

In a study done looking over a sample of 133,000 websites, researchers found 37% of the websites included a library with at least one known vulnerability.[90] "The median lag between the oldest library version used on each website and the newest

version used on each website and the newest available version of that library is 1,177 days in ALEXA, and development of some libraries still in active use ceased years ago."[90] Another possibility is that the maintainer of a library may remove the

that the maintainer of a library may remove the library entirely. This occurred in March 2016 when Azer Koçulu removed his repository from npm. This caused tens of thousands of programs and websites depending upon his libraries to break.[91][92]

Browser and plugin coding errors
Further information: Buffer overflow

JavaScript provides an interface to a wide range of browser capabilities, some of which may have flaws such as buffer overflows. These flaws can allow attackers to write scripts that would run any code they wish on the user's system. This code is

code they wish on the user's system. This code is not by any means limited to another JavaScript application. For example, a buffer overrun exploit can allow an attacker to gain access to the operating system's API with superuser privileges.

These flaws have affected major browsers including Firefox,[93] Internet Explorer,[94] and Safari.[95]

Plugins, such as video players, Adobe Flash, and the wide range of ActiveX controls enabled by default in Microsoft Internet Explorer, may also have flaws exploitable via JavaScript (such flaws have been exploited in the past).[96][97]

In Windows Vista, Microsoft has attempted to contain the risks of bugs such as buffer overflows by running the Internet Explorer process with limited privileges.[98] Google Chrome similarly confines its page renderers to their own "sandbox".

Sandbox implementation errors
Web browsers are capable of running JavaScript outside the sandbox, with the privileges necessary to, for example, create or delete files. Such privileges are not intended to be granted to code from the Web.

Incorrectly granting privileges to JavaScript from the Web has played a role in vulnerabilities in both Internet Explorer[99] and Firefox.[100] In Windows XP Service Pack 2, Microsoft demoted JScript's privileges in Internet Explorer.[101]

Microsoft Windows allows JavaScript source files on a computer's hard drive to be launched as general-purpose, non-sandboxed programs (see: Windows Script Host). This makes JavaScript (like VBScript) a theoretically viable vector for a Trojan horse,

a theoretically viable vector for a Trojan horse, although JavaScript Trojan horses are uncommon in practice.[102][failed verification]

Hardware vulnerabilities
In 2015, a JavaScript-based proof-of-concept implementation of a rowhammer attack was described in a paper by security researchers.[103][104][105][106]

In 2017, a JavaScript-based attack via browser was demonstrated that could bypass ASLR. It is called "ASLR⊕Cache" or AnC.[107][108]

In 2018, the paper that announced the Spectre attacks against Speculative Execution in Intel and other processors included a JavaScript implementation.[109]
Development tools
Important tools have evolved with the language.

Important tools have evolved with the language.
Every major web browser has built-in web development tools, including a JavaScript debugger.

Static program analysis tools, such as ESLint and JSLint, scan JavaScript code for conformance to a set of standards and guidelines.

Some browsers have built-in profilers. Stand-alone profiling libraries have also been created, such as benchmark.js and jsbench.[110][111]
Many text editors have syntax highlighting support for JavaScript code.
Related technologies
Java

A common misconception is that JavaScript is directly related to Java. Both indeed have a C-like syntax (the C language being their most immediate common ancestor language). They are also typically sandboxed, and JavaScript was designed with Java's

and JavaScript was designed with Java's syntax and standard library in mind. In particular, all Java keywords were reserved in original JavaScript, JavaScript's standard library follows Java's naming conventions, and JavaScript's Math and Date

conventions, and JavaScript's Math and Date objects are based on classes from Java 1.0.[112]

Both languages first appeared in 1995, but Java was developed by James Gosling of Sun Microsystems and JavaScript by Brendan Eich of Netscape Communications.

The differences between the two languages are more prominent than their similarities. Java has static typing, while JavaScript's typing is dynamic. Java is loaded from compiled bytecode, while JavaScript is loaded as human-readable source code.

is loaded as human-readable source code. Java's objects are class-based, while JavaScript's are prototype-based. Finally, Java did not support functional programming until Java 8, while JavaScript has done so from the beginning, being influenced by

done so from the beginning, being influenced by Scheme.

JSON
JSON is a data format derived from JavaScript; hence the name JavaScript Object Notation. It is a widely used format supported by many other programming languages.
Transpilers

Transpilers
Many websites are JavaScript-heavy, so transpilers have been created to convert code written in other languages, which can aid the development process.[36]

TypeScript and CoffeeScript are two notable languages that transpile to JavaScript.
WebAssembly

WebAssembly is a newer language with a bytecode format designed to complement JavaScript, especially the performance-critical portions of web page scripts. All of the major JavaScript engines support WebAssembly,[113] which runs in the same sandbox

WebAssembly,[113] which runs in the same sandbox as regular JavaScript code.

asm.js is a subset of JavaScript that served as the forerunner of WebAssembly.[114]
References

References
^ a b "Netscape and Sun announce JavaScript, the Open, Cross-platform Object Scripting Language for Enterprise Networks and the Internet" (Press release). 4 December 1995. Archived from the original on 16 September 2007.

^ "ECMAScript® 2024 Language Specification". June 2024. Retrieved 30 August 2024.
^ "ECMAScript® 2025 Language Specification". 27 March 2024. Retrieved 17 April 2024.

^ "nodejs/node-eps". GitHub. Archived from the original on 29 August 2020. Retrieved 5 July 2018.

^ a b Seibel, Peter (16 September 2009). Coders at Work: Reflections on the Craft of Programming. Apress. ISBN 978-1-4302-1948-4. Archived from the original on 24 December 2020. Retrieved 25 December 2018. Eich: The immediate concern at Netscape was

2018. Eich: The immediate concern at Netscape was it must look like Java.

^ a b c d e "Chapter 4. How JavaScript Was Created". speakingjs.com. Archived from the original on 27 February 2020. Retrieved 21 November 2017.
^ "Popularity – Brendan Eich".

^ "Brendan Eich: An Introduction to JavaScript, JSConf 2010". YouTube. 20 January 2013. p. 22m. Archived from the original on 29 August 2020. Retrieved 25 November 2019. Eich: "function", eight letters, I was influenced by AWK.

^ Eich, Brendan (1998). "Foreword". In Goodman, Danny (ed.). JavaScript Bible (3rd ed.). John Wiley & Sons. ISBN 0-7645-3188-3. LCCN 97078208. OCLC 38888873. OL 712205M.

^ a b "Usage Statistics of JavaScript as Client-side Programming Language on Websites". W3Techs. Retrieved 27 February 2024.
^ "ECMAScript 2020 Language Specification". Archived from the original on 8 May 2020. Retrieved 8 May 2020.

^ "Bloomberg Game Changers: Marc Andreessen". Bloomberg. Bloomberg. 17 March 2011. Archived from the original on 16 May 2012. Retrieved 7 December 2011.

^ Enzer, Larry (31 August 2018). "The Evolution of the Web Browsers". Monmouth Web Developers. Archived from the original on 31 August 2018. Retrieved 31 August 2018.

^ a b c Fin JS (17 June 2016), "Brendan Eich – CEO of Brave", YouTube, retrieved 7 February 2018
^ "Netscape Communications Corp.", Browser enhancements. Encyclopædia Britannica 2006 Ultimate Reference Suite DVD

^ "TechVision: Innovators of the Net: Brendan Eich and JavaScript". Archived from the original on 8 February 2008.
^ a b Han, Sheon (4 March 2024). "JavaScript Runs the World—Maybe Even Literally". Wired. Retrieved 21 August 2024.

^ a b "Chapter 5. Standardization: ECMAScript". speakingjs.com. Archived from the original on 1 November 2021. Retrieved 1 November 2021.

^ a b Champeon, Steve (6 April 2001). "JavaScript, How Did We Get Here?". oreilly.com. Archived from the original on 19 July 2016. Retrieved 16 July 2016.

^ "Microsoft Internet Explorer 3.0 Beta Now Available". microsoft.com. Microsoft. 29 May 1996. Archived from the original on 24 November 2020. Retrieved 16 July 2016.

^ McCracken, Harry (16 September 2010). "The Unwelcome Return of "Best Viewed with Internet Explorer"". technologizer.com. Archived from the original on 23 June 2018. Retrieved 16 July 2016.

^ Baker, Loren (24 November 2004). "Mozilla Firefox Internet Browser Market Share Gains to 7.4%". Search Engine Journal. Archived from the original on 7 May 2021. Retrieved 8 May 2021.

^ Weber, Tim (9 May 2005). "The assault on software giant Microsoft". BBC News. Archived from the original on 25 September 2017.

^ "Big browser comparison test: Internet Explorer vs. Firefox, Opera, Safari and Chrome". PC Games Hardware. Computec Media AG. 3 July 2009. Archived from the original on 2 May 2012. Retrieved 28 June 2010.

^ Purdy, Kevin (11 June 2009). "Lifehacker Speed Tests: Safari 4, Chrome 2". Lifehacker. Archived from the original on 14 April 2021. Retrieved 8 May 2021.

^ "TraceMonkey: JavaScript Lightspeed, Brendan Eich's Blog". Archived from the original on 4 December 2015. Retrieved 22 July 2020.
^ "Mozilla asks, 'Are we fast yet?'". Wired. Archived from the original on 22 June 2018. Retrieved 18 January 2019.

^ "ECMAScript 6: New Features: Overview and Comparison". es6-features.org. Archived from the original on 18 March 2018. Retrieved 19 March 2018.

^ Professional Node.js: Building JavaScript Based Scalable Software Archived 2017-03-24 at the Wayback Machine, John Wiley & Sons, 01-Oct-2012

^ Sams Teach Yourself Node.js in 24 Hours Archived 2017-03-23 at the Wayback Machine, Sams Publishing, 05-Sep-2012

^ Lawton, George (19 July 2018). "The secret history behind the success of npm and Node". TheServerSide. Archived from the original on 2 August 2021. Retrieved 2 August 2021.

^ Brown, Paul (13 January 2017). "State of the Union: npm". Linux.com. Archived from the original on 2 August 2021. Retrieved 2 August 2021.

^ a b c Branscombe, Mary (4 May 2016). "JavaScript Standard Moves to Yearly Release Schedule; Here is What's New for ES16". The New Stack. Archived from the original on 16 January 2021. Retrieved 15 January 2021.

^ "The TC39 Process". tc39.es. Ecma International. Archived from the original on 7 February 2021. Retrieved 15 January 2021.
^ "ECMAScript proposals". TC39. Archived from the original on 4 December 2020. Retrieved 15 January 2021.

^ a b Ashkenas, Jeremy. "List of languages that compile to JS". GitHub. Archived from the original on 31 January 2020. Retrieved 6 February 2020.

^ "U.S. Trademark Serial No. 75026640". uspto.gov. United States Patent and Trademark Office. 6 May 1997. Archived from the original on 13 July 2021. Retrieved 8 May 2021.

^ "Legal Notices". oracle.com. Oracle Corporation. Archived from the original on 5 June 2021. Retrieved 8 May 2021.
^ "Oracle to buy Sun in $7.4-bn deal". The Economic Times. 21 April 2009.

^ a b c "Usage statistics of JavaScript libraries for websites". W3Techs. Retrieved 9 April 2021.
^ "Using jQuery with Bootstrap". clouddevs.com. 10 June 2019. Retrieved 17 March 2024.

^ "Vanilla JS". vanilla-js.com. 16 June 2020. Archived from the original on 16 June 2020. Retrieved 17 June 2020.

^ "Server-Side JavaScript Guide". oracle.com. Oracle Corporation. 11 December 1998. Archived from the original on 11 March 2021. Retrieved 8 May 2021.

^ Clinick, Andrew (14 July 2000). "Introducing JScript .NET". Microsoft Developer Network. Microsoft. Archived from the original on 10 November 2017. Retrieved 10 April 2018. [S]ince the 1996 introduction of JScript version 1.0 ... we've been seeing

of JScript version 1.0 ... we've been seeing a steady increase in the usage of JScript on the server—particularly in Active Server Pages (ASP)

^ a b Mahemoff, Michael (17 December 2009). "Server-Side JavaScript, Back with a Vengeance". readwrite.com. Archived from the original on 17 June 2016. Retrieved 16 July 2016.

^ "JavaScript for Acrobat". adobe.com. 7 August 2009. Archived from the original on 7 August 2009. Retrieved 18 August 2009.

^ treitter (2 February 2013). "Answering the question: "How do I develop an app for GNOME?"". livejournal.com. Archived from the original on 11 February 2013. Retrieved 7 February 2013.

^ "Tessel 2... Leverage all the libraries of Node.JS to create useful devices in minutes with Tessel". tessel.io. Archived from the original on 26 May 2021. Retrieved 8 May 2021.

^ "Node.js Raspberry Pi GPIO Introduction". w3schools.com. Archived from the original on 13 August 2021. Retrieved 3 May 2020.

^ "Espruino – JavaScript for Microcontrollers". espruino.com. Archived from the original on 1 May 2020. Retrieved 3 May 2020.

^ Looper, Jen (21 September 2015). "A Guide to JavaScript Engines for Idiots". Telerik Developer Network. Archived from the original on 8 December 2018. Retrieved 8 December 2018.
^ "How Blink Works". Google. Retrieved 12 March 2024.

^ a b "Documentation · V8". Google. Retrieved 3 March 2024.
^ Nelaturu, Keerthi. "WebAssembly: What's the big deal?". medium.com. Retrieved 3 March 2024.

^ "Concurrency model and Event Loop". Mozilla Developer Network. Archived from the original on 5 September 2015. Retrieved 28 August 2015.

^ Flanagan, David (17 August 2006). JavaScript: The Definitive Guide: The Definitive Guide. "O'Reilly Media, Inc.". p. 16. ISBN 978-0-596-55447-7. Archived from the original on 1 August 2020. Retrieved 29 March 2019.

^ a b c d Korolev, Mikhail (1 March 2019). "JavaScript quirks in one image from the Internet". The DEV Community. Archived from the original on 28 October 2019. Retrieved 28 October 2019.

^ Bernhardt, Gary (2012). "Wat". Destroy All Software. Archived from the original on 28 October 2019. Retrieved 28 October 2019.

^ "JavaScript data types and data structures". MDN. 16 February 2017. Archived from the original on 14 March 2017. Retrieved 24 February 2017.
^ Flanagan 2006, pp. 176–178.

^ Flanagan 2006, pp. 176–178.
^ Crockford, Douglas. "Prototypal Inheritance in JavaScript". Archived from the original on 13 August 2013. Retrieved 20 August 2013.

^ "Inheritance and the prototype chain". Mozilla Developer Network. Archived from the original on 25 April 2013. Retrieved 6 April 2013.
^ Herman, David (2013). Effective JavaScript. Addison-Wesley. p. 83. ISBN 978-0-321-81218-6.

^ Haverbeke, Marijn (2011). Eloquent JavaScript. No Starch Press. pp. 95–97. ISBN 978-1-59327-282-1.
^ Katz, Yehuda (12 August 2011). "Understanding "Prototypes" in JavaScript". Archived from the original on 5 April 2013. Retrieved 6 April 2013.

^ Herman, David (2013). Effective JavaScript. Addison-Wesley. pp. 125–127. ISBN 978-0-321-81218-6.
^ "Function – JavaScript". MDN Web Docs. Retrieved 30 October 2021.

^ "Properties of the Function Object". Es5.github.com. Archived from the original on 28 January 2013. Retrieved 26 May 2013.
^ Flanagan 2006, p. 141.

^ Flanagan 2006, p. 141.
^ The many talents of JavaScript for generalizing Role-Oriented Programming approaches like Traits and Mixins Archived 2017-10-05 at the Wayback Machine, Peterseliger.blogspot.de, April 11, 2014.

^ Traits for JavaScript Archived 2014-07-24 at the Wayback Machine, 2010.
^ "Home | CocktailJS". Cocktailjs.github.io. Archived from the original on 4 February 2017. Retrieved 24 February 2017.

^ Croll, Angus (31 May 2011). "A fresh look at JavaScript Mixins". JavaScript, JavaScript…. Archived from the original on 15 April 2020.
^ Haverbeke, Marijn (2011). Eloquent JavaScript. No Starch Press. pp. 139–149. ISBN 978-1-59327-282-1.

^ "E4X – Archive of obsolete content". Mozilla Developer Network. Mozilla Foundation. 14 February 2014. Archived from the original on 24 July 2014. Retrieved 13 July 2014.

^ "var – JavaScript". The Mozilla Developer Network. Archived from the original on 23 December 2012. Retrieved 22 December 2012.
^ "let". MDN web docs. Mozilla. Archived from the original on 28 May 2019. Retrieved 27 June 2018.

^ "const". MDN web docs. Mozilla. Archived from the original on 28 June 2018. Retrieved 27 June 2018.

^ "ECMAScript Language Specification – ECMA-262 Edition 5.1". Ecma International. Archived from the original on 26 November 2012. Retrieved 22 December 2012.

^ "console". Mozilla Developer Network. Mozilla. Archived from the original on 28 February 2013. Retrieved 6 April 2013.
^ "arguments". Mozilla Developer Network. Mozilla. Archived from the original on 13 April 2013. Retrieved 6 April 2013.

^ "function* - JavaScript | MDN". developer.mozilla.org. Retrieved 27 September 2022.
^ "JavaScript modules". MDN Web Docs. Mozilla. Archived from the original on 17 July 2022. Retrieved 28 July 2022.

^ "Making JavaScript Safe for Advertising". ADsafe. Archived from the original on 6 July 2021. Retrieved 8 May 2021.
^ "Secure ECMA Script (SES)". Archived from the original on 15 May 2013. Retrieved 26 May 2013.

^ "Google Caja Project". Google. Archived from the original on 22 January 2021. Retrieved 9 July 2021.

^ "Mozilla Cross-Site Scripting Vulnerability Reported and Fixed – MozillaZine Talkback". Mozillazine.org. Archived from the original on 21 July 2011. Retrieved 24 February 2017.

^ Kottelin, Thor (17 June 2008). "Right-click "protection"? Forget about it". blog.anta.net. Archived from the original on 9 August 2011. Retrieved 28 July 2022.

^ Rehorik, Jan (29 November 2016). "Why You Should Never Put Sensitive Data in Your JavaScript". ServiceObjects Blog. ServiceObjects. Archived from the original on 3 June 2019. Retrieved 3 June 2019.

^ a b Lauinger, Tobias; Chaabane, Abdelberi; Arshad, Sajjad; Robertson, William; Wilson, Christo; Kirda, Engin (21 December 2016), "Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web" (PDF), Northeastern

Libraries on the Web" (PDF), Northeastern University, arXiv:1811.00918, doi:10.14722/ndss.2017.23414, ISBN 978-1-891562-46-4, S2CID 17885720, archived from the original (PDF) on 29 March 2017, retrieved 28 July 2022

^ Collins, Keith (27 March 2016). "How one programmer broke the internet by deleting a tiny piece of code". Quartz. Archived from the original on 22 February 2017. Retrieved 22 February 2017.

^ SC Magazine UK, Developer's 11 lines of deleted code 'breaks the internet' Archived February 23, 2017, at the Wayback Machine
^ Mozilla Corporation, Buffer overflow in crypto.signText() Archived 2014-06-04 at the Wayback Machine

^ Festa, Paul (19 August 1998). "Buffer-overflow bug in IE". CNET. Archived from the original on 25 December 2002.

^ SecurityTracker.com, Apple Safari JavaScript Buffer Overflow Lets Remote Users Execute Arbitrary Code and HTTP Redirect Bug Lets Remote Users Access Files Archived 2010-02-18 at the Wayback Machine

^ SecurityFocus, Microsoft WebViewFolderIcon ActiveX Control Buffer Overflow Vulnerability Archived 2011-10-11 at the Wayback Machine
^ Fusion Authority, Macromedia Flash ActiveX Buffer Overflow Archived August 13, 2011, at the Wayback Machine

^ "Protected Mode in Vista IE7 – IEBlog". Blogs.msdn.com. 9 February 2006. Archived from the original on 23 January 2010. Retrieved 24 February 2017.

^ US CERT, Vulnerability Note VU#713878: Microsoft Internet Explorer does not properly validate source of redirected frame Archived 2009-10-30 at the Wayback Machine

^ Mozilla Foundation, Mozilla Foundation Security Advisory 2005–41: Privilege escalation via DOM property overrides Archived 2014-06-04 at the Wayback Machine

^ Andersen, Starr (9 August 2004). "Part 5: Enhanced Browsing Security". TechNet. Microsoft Docs. Changes to Functionality in Windows XP Service Pack 2. Retrieved 20 October 2021.

^ For one example of a rare JavaScript Trojan Horse, see Symantec Corporation, JS.Seeker.K Archived 2011-09-13 at the Wayback Machine

^ Gruss, Daniel; Maurice, Clémentine; Mangard, Stefan (24 July 2015). "Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript". arXiv:1507.06955 [cs.CR].

^ Jean-Pharuns, Alix (30 July 2015). "Rowhammer.js Is the Most Ingenious Hack I've Ever Seen". Motherboard. Vice. Archived from the original on 27 January 2018. Retrieved 26 January 2018.

^ Goodin, Dan (4 August 2015). "DRAM 'Bitflipping' exploit for attacking PCs: Just add JavaScript". Ars Technica. Archived from the original on 27 January 2018. Retrieved 26 January 2018.

^ Auerbach, David (28 July 2015). "Rowhammer security exploit: Why a new security attack is truly terrifying". slate.com. Archived from the original on 30 July 2015. Retrieved 29 July 2015.

^ AnC Archived 2017-03-16 at the Wayback Machine VUSec, 2017
^ New ASLR-busting JavaScript is about to make drive-by exploits much nastier Archived 2017-03-16 at the Wayback Machine Ars Technica, 2017

^ Spectre Attack Archived 2018-01-03 at the Wayback Machine Spectre Attack
^ "Benchmark.js". benchmarkjs.com. Archived from the original on 19 December 2016. Retrieved 6 November 2016.

^ JSBEN.CH. "JSBEN.CH Performance Benchmarking Playground for JavaScript". jsben.ch. Archived from the original on 27 February 2021. Retrieved 13 August 2021.

^ Eich, Brendan (3 April 2008). "Popularity". Archived from the original on 3 July 2011. Retrieved 19 January 2012.

^ "Edge Browser Switches WebAssembly to 'On' -- Visual Studio Magazine". Visual Studio Magazine. Archived from the original on 10 February 2018. Retrieved 9 February 2018.

^ "frequently asked questions". asm.js. Archived from the original on 4 June 2014. Retrieved 13 April 2014.
Sources

Sources
Dere, Mohan (21 December 2017). "How to integrate create-react-app with all the libraries you need to make a great app". freeCodeCamp. Retrieved 14 June 2018.

Panchal, Krunal (26 April 2022). "Angular vs React Detailed Comparison". Groovy Web. Retrieved 5 June 2023.
Further reading
See also: ECMAScript Specification Documents

See also: ECMAScript Specification Documents
Flanagan, David. JavaScript: The Definitive Guide. 7th edition. Sebastopol, California: O'Reilly, 2020. ISBN 978-1-491-95202-3.

Haverbeke, Marijn. Eloquent JavaScript. 3rd edition. No Starch Press, 2018. 472 pages. ISBN 978-1593279509.(download)
Zakas, Nicholas. Principles of Object-Oriented JavaScript, 1st edition. No Starch Press, 2014. 120 pages. ISBN 978-1593275402.

External links
JavaScript  at Wikipedia's sister projects
Definitions from WiktionaryMedia from CommonsTextbooks from WikibooksResources from WikiversityDocumentation from MediaWiki
Listen to this article (48 minutes)

Listen to this article (48 minutes)
This audio file was created from a revision of this article dated 20 August 2013 (2013-08-20), and does not reflect subsequent edits.(Audio help · More spoken articles)

The Modern JavaScript Tutorial. A community maintained continuously updated collection of tutorials on the entirety of the language.
"JavaScript: The First 20 Years". Retrieved 6 February 2022.
vteJavaScriptCode analysis
ESLint
JSHint
JSLint

vteJavaScriptCode analysis
ESLint
JSHint
JSLint
Supersets
JS++
TypeScript
ArkTS
Transpilers
AtScript
Babel
ClojureScript
CoffeeScript
Dart
Elm
Emscripten
Google Closure Compiler
Google Web Toolkit
Haxe
LiveScript
Morfik
Nim
Opa
PureScript
Reason

Haxe
LiveScript
Morfik
Nim
Opa
PureScript
Reason
WebSharper
Concepts
JavaScript library
JavaScript syntax
Debuggers
Chrome DevTools
Firefox Inspector
Komodo IDE
Microsoft Edge DevTools
Opera DevTools
Safari Web Inspector
Doc generators
JSDoc

Safari Web Inspector
Doc generators
JSDoc
Editors (comparison)
Ace
Cloud9 IDE
Atom
CodeMirror
Brackets
Light Table
PhpStorm
Orion
Visual Studio
Visual Studio Express
Visual Studio Code
Visual Studio Team Services
Vim
Engines

Visual Studio Team Services
Vim
Engines
List of ECMAScript engines
Frameworks
Comparison of JavaScript frameworks
List of JavaScript libraries
Related technologies
Ajax
AssemblyScript
asm.js
Cascading Style Sheets
Document Object Model
HTML
HTML5

Document Object Model
HTML
HTML5
JSON
WebAssembly
WebAuthn
Package managers
npm
yarn
Module bundlers
Webpack
Vite
esbuild
Server-side
Active Server Pages
Bun
CommonJS
Deno
JSGI
Node.js
Unit testing frameworks (list)
Jasmine
Mocha
QUnit
People

Jasmine
Mocha
QUnit
People
Douglas Crockford
Ryan Dahl
Brendan Eich
John Resig
vteProgramming languages
Comparison
Timeline
History
Ada
ALGOL
Simula
APL
Assembly
BASIC
Visual Basic
classic
.NET
C
C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java

C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Julia
Kotlin
Lisp
Lua
MATLAB
ML
Pascal
Object Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Scratch
Shell
Smalltalk
Swift
more...
Lists: Alphabetical
Categorical
Generational

Lists: Alphabetical
Categorical
Generational
Non-English-based
Category
vteECMAScriptDialects
ActionScript
Caja
JavaScript
engines
asm.js
JScript
JScript .NET
QtScript
TypeScript
WMLScript
Engines(comparison)
Carakan
Futhark
InScript
JavaScriptCore

Carakan
Futhark
InScript
JavaScriptCore
JScript
KJS
Linear B
QtScript
Rhino
SpiderMonkey
TraceMonkey
JägerMonkey
Tamarin
V8
ChakraCore
Chakra
JScript .NET
Nashorn
FrameworksClient-side
Dojo
Echo
Ext JS
Google Web Toolkit
jQuery
Lively Kernel
midori

Google Web Toolkit
jQuery
Lively Kernel
midori
MochiKit
MooTools
Prototype
Pyjs
qooxdoo
SproutCore
Spry
Wakanda Framework
Server-side
Node.js
Deno
Bun
Jaxer
AppJet
WakandaDB
Multiple
Cappuccino
Libraries
Backbone.js
SWFObject
Underscore.js
People

Backbone.js
SWFObject
Underscore.js
People
Brendan Eich
Douglas Crockford
John Resig
Scott Isaacs
Other
DHTML
Ecma International
JSDoc
JSGI
JSHint
JSLint
JSON
JSSS
Sputnik
SunSpider
Asynchronous module definition
CommonJS
Lists
JavaScript libraries

CommonJS
Lists
JavaScript libraries
Ajax frameworks
Comparisons
JavaScript frameworks
server-side JavaScript
vteWeb browsers
Features
standards
protocols
Features
Bookmarks
Extensions
Privacy mode
Web standards
HTML
v5
CSS
DOM
JavaScript
WebAssembly

HTML
v5
CSS
DOM
JavaScript
WebAssembly
Web storage
IndexedDB
WebGL
WebGPU
Protocols
HTTP
Encryption
Cookies
third-party
OCSP
WebRTC
WebSocket
ActiveBlink-basedProprietary
Google Chrome
Arc
Avast
Coc Coc
Comodo
Epic
Maxthon
Microsoft Edge

Avast
Coc Coc
Comodo
Epic
Maxthon
Microsoft Edge
Opera (Mobile)
Puffin
QQ
Samsung
Silk
Sleipnir
SRWare
UC
Vivaldi
Whale
Yandex
FOSS
Chromium
Brave
Dooble
Falkon
Otter
Supermium
ungoogled
Gecko-based
Firefox
Floorp
GNU IceCat
LibreWolf
Midori

Firefox
Floorp
GNU IceCat
LibreWolf
Midori
SlimBrowser
Tor Browser
Gecko forks
Basilisk
K-Meleon
Pale Moon
SeaMonkey
Waterfox
WebKit-based
Safari
GNOME Web
iCab
Orion
Multi-engine
360
DuckDuckGo
Konqueror
Lunascape
NetFront
qutebrowser
Other
eww

Lunascape
NetFront
qutebrowser
Other
eww
Flow
Ladybird
Links
Lynx
NetSurf
Opera Mini
w3m
DiscontinuedBlink-based
Beaker
Citrio
Flock
Redcore
Rockmelt
SalamWeb
Sputnik
Torch
Gecko-based
Beonex
Camino
Classilla
Conkeror
Firefox Lite
Galeon
Ghostzilla

Classilla
Conkeror
Firefox Lite
Galeon
Ghostzilla
IceDragon
Kazehakase
Kylo
Lotus
MicroB
Minimo
Mozilla suite
PirateBrowser
Pogo
Strata
Swiftfox
Swiftweasel
TenFourFox
Timberwolf
xB
MSHTML-based
Internet Explorer
AOL
Deepnet
GreenBrowser

Internet Explorer
AOL
Deepnet
GreenBrowser
MediaBrowser
NeoPlanet
NetCaptor
SpaceTime
ZAC
WebKit-based
Arora
BOLT
Dolphin
Fluid
Google TV
Iris
Mercury
Nokia Symbian
OmniWeb
Opera Coast
Origyn
QtWeb
Shiira
Steel
surf
Uzbl
WebPositive
xombrero
Other

Shiira
Steel
surf
Uzbl
WebPositive
xombrero
Other
abaco
Amaya
Arachne
Arena
Blazer
Cake
Charon
CM
Deepfish
Dillo
Edge Legacy
ELinks
Gazelle
HotJava
IBM Home Page Reader
IBM WebExplorer
IBrowse
Internet Explorer for Mac
KidZui
Line Mode
Mosaic
MSN TV

KidZui
Line Mode
Mosaic
MSN TV
NetPositive
Netscape
Skweezer
Skyfire
ThunderHawk
Vision
WinWAP
WorldWideWeb
Category
Comparisons
List
vteNode.jsPlatform
Node.js
npm
V8
CommonJS
Frameworks
MEAN
MongoDB
Express.js
AngularJS/Angular

MEAN
MongoDB
Express.js
AngularJS/Angular
MEEN (substituted with Ember.js)
Backbone.js
Meteor
Sails.js (uses Express.js)
Next.js
Libraries
Lodash
Underscore.js
React.js
Vue.js
Languages
JavaScript
CoffeeScript
TypeScript
Portal: Computer programming

TypeScript
Portal: Computer programming
Authority control databases InternationalFASTNationalGermanyUnited StatesFranceBnF dataCzech RepublicSpainIsraelOtherIdRefELMCIP

Retrieved from "https://en.wikipedia.org/w/index.php?title=JavaScript&oldid=1250804643"

Categories: JavaScriptAmerican inventionsCross-platform softwareDynamically typed programming languagesFunctional languagesObject-based programming languagesHigh-level programming languagesProgramming languages created in 1995Programming languages

languages created in 1995Programming languages with an ISO standardPrototype-based programming languagesScripting languagesWeb programmingProgramming languagesHidden categories: Webarchive template wayback linksArticles with short descriptionShort

wayback linksArticles with short descriptionShort description matches WikidataWikipedia indefinitely semi-protected pagesUse dmy dates from March 2024Articles with excerptsAll articles with unsourced statementsArticles with unsourced statements from

statementsArticles with unsourced statements from August 2023All articles with failed verificationArticles with failed verification from March 2017Pages using Sister project links with wikidata namespace mismatchPages using Sister project links with

mismatchPages using Sister project links with hidden wikidataPages using Sister project links with default searchArticles with hAudio microformatsSpoken articlesArticles with example JavaScript code

This page was last edited on 12 October 2024, at 16:28 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License;

additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policy
About Wikipedia
Disclaimers

Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view

C++ - Wikipedia
Jump to content
Main menu
Main menu
move to sidebar
hide
Navigation
Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us
Contribute
HelpLearn to editCommunity portalRecent changesUpload file
Search
Search
Donate

Search
Search
Donate
Appearance
Create account
Log in
Personal tools
Create account Log in
Pages for logged out editors learn more
ContributionsTalk
Contents
move to sidebar
hide
(Top)
1
History
Toggle History subsection
1.1
Etymology
1.2
Philosophy

1.1
Etymology
1.2
Philosophy
1.3
Standardization
2
Language
Toggle Language subsection
2.1
Object storage
2.1.1
Static storage duration objects
2.1.2
Thread storage duration objects
2.1.3
Automatic storage duration objects
2.1.4

2.1.3
Automatic storage duration objects
2.1.4
Dynamic storage duration objects
2.2
Templates
2.3
Objects
2.3.1
Encapsulation
2.3.2
Inheritance
2.4
Operators and operator overloading
2.5
Polymorphism
2.5.1
Static polymorphism
2.5.2

2.5
Polymorphism
2.5.1
Static polymorphism
2.5.2
Dynamic polymorphism
2.5.2.1
Inheritance
2.5.2.2
Virtual member functions
2.6
Lambda expressions
2.7
Exception handling
2.8
Enumerated types
3
Standard library
4
C++ Core Guidelines
5
Compatibility

4
C++ Core Guidelines
5
Compatibility
Toggle Compatibility subsection
5.1
With C
6
Criticism
7
See also
8
Footnotes
9
References
10
Further reading
11
External links
Toggle the table of contents
C++
109 languages

AfrikaansالعربيةAragonésঅসমীয়াAsturianuAzərbaycancaتۆرکجهবাংলা閩南語 / Bân-lâm-gúБеларускаяБеларуская

/ Bân-lâm-gúБеларускаяБеларуская (тарашкевіца)Българскиབོད་ཡིགBosanskiBrezhonegCatalàЧӑвашлаČeštinaDanskDeutschEestiΕλληνικάEspañolEsperantoEuskaraفارسیFrançaisGaeilgeGalego贛語ગુજરાતી한국어HausaՀայերենहिन्दीHrvatskiIdoBahasa

IndonesiaInterlinguaÍslenskaItalianoעבריתJawaಕನ್ನಡქართულიҚазақшаKiswahiliКыргызчаLatinaLatviešuLëtzebuergeschLietuviųLombardMagyarМакедонскиമലയാളംमराठीمصرىBahasa MelayuMinangkabauМонголမြန်မာဘာသာNa Vosa VakavitiNederlandsनेपाल भाषा日本語Norsk

Vosa VakavitiNederlandsनेपाल भाषा日本語Norsk bokmålNorsk nynorskOccitanOʻzbekcha / ўзбекчаਪੰਜਾਬੀPälzischپنجابیPolskiPortuguêsQaraqalpaqshaRomânăRuna SimiРусскийСаха тылаShqipසිංහලSimple EnglishSlovenčinaSlovenščinaکوردیСрпски / srpskiSrpskohrvatski /

/ srpskiSrpskohrvatski / српскохрватскиSuomiSvenskaதமிழ்Татарча / tatarçaతెలుగుไทยТоҷикӣTürkçeTürkmençeBasa UgiУкраїнськаاردوTiếng Việt文言Winaray吴语ייִדישYorùbá粵語Žemaitėška中文

Edit links
ArticleTalk
English
ReadEditView history
Tools
Tools
move to sidebar
hide
Actions
ReadEditView history
General

hide
Actions
ReadEditView history
General
What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata item
Print/export
Download as PDFPrintable version

Print/export
Download as PDFPrintable version
In other projects
Wikimedia CommonsWikibooksWikiquoteWikiversity
Appearance
move to sidebar
hide
From Wikipedia, the free encyclopedia
General-purpose programming language

General-purpose programming language
"cxx" and ".cxx" redirect here. For other uses, see CXX.

C++Logo endorsed by the C++ standards committeeParadigmsMulti-paradigm: procedural, imperative, functional, object-oriented, generic, modularFamilyCDesigned byBjarne StroustrupDeveloperISO/IEC JTC 1 (Joint Technical Committee 1) / SC 22

JTC 1 (Joint Technical Committee 1) / SC 22 (Subcommittee 22) / WG 21 (Working Group 21)First appeared1985; 39 years ago (1985)Stable releaseC++20 (ISO/IEC 14882:2020)

/ 15 December 2020; 3 years ago (2020-12-15)Preview releaseC++23
/ 19 March 2023; 18 months ago (2023-03-19)

Typing disciplineStatic, strong, nominative, partially inferredOSCross-platformFilename extensions.C, .cc, .cpp, .cxx, .c++, .h, .H, .hh, .hpp, .hxx, .h++ .cppm, .ixx[1]Websiteisocpp.orgMajor implementationsGCC,  LLVM Clang, Microsoft Visual C++,

LLVM Clang, Microsoft Visual C++, Embarcadero C++Builder, Intel C++ Compiler, IBM XL C++, EDGInfluenced byAda, ALGOL 68,[2] BCPL,[3] C, CLU,[2] F#,[4][note 1] ML, Mesa,[2] Modula-2,[2] Simula, Smalltalk[2]InfluencedAda 95, C#,[5] C99, Carbon,

Smalltalk[2]InfluencedAda 95, C#,[5] C99, Carbon, Chapel,[6] Clojure,[7] D, Java,[8] JS++,[9] Lua,[10] Nim,[11] Objective-C++, Perl, PHP, Python,[12] Rust,[13] Seed7

C++ Programming at Wikibooks

C++ (/ˈsiː plʌs plʌs/, pronounced "C plus plus" and sometimes abbreviated as CPP) is a high-level, general-purpose programming language created by Danish computer scientist Bjarne Stroustrup. First released in 1985 as an extension of the C

First released in 1985 as an extension of the C programming language, it has since expanded significantly over time; as of 1997[update], C++ has object-oriented, generic, and functional features, in addition to facilities for low-level memory

in addition to facilities for low-level memory manipulation for systems like microcomputers or to make operating systems like Linux or Windows. It is usually implemented as a compiled language, and many vendors provide C++ compilers, including the

many vendors provide C++ compilers, including the Free Software Foundation, LLVM, Microsoft, Intel, Embarcadero, Oracle, and IBM.[14]

C++ was designed with systems programming and embedded, resource-constrained software and large systems in mind, with performance, efficiency, and flexibility of use as its design highlights.[15] C++ has also been found useful in many other

C++ has also been found useful in many other contexts, with key strengths being software infrastructure and resource-constrained applications,[15] including desktop applications, video games, servers (e.g., e-commerce, web search, or databases), and

(e.g., e-commerce, web search, or databases), and performance-critical applications (e.g., telephone switches or space probes).[16]

C++ is standardized by the International Organization for Standardization (ISO), with the latest standard version ratified and published by ISO in December 2020 as ISO/IEC 14882:2020 (informally known as C++20).[17] The C++ programming language was

as C++20).[17] The C++ programming language was initially standardized in 1998 as ISO/IEC 14882:1998, which was then amended by the C++03, C++11, C++14, and C++17 standards. The current C++20 standard supersedes these with new features and an

supersedes these with new features and an enlarged standard library. Before the initial standardization in 1998, C++ was developed by Stroustrup at Bell Labs since 1979 as an extension of the C language; he wanted an efficient and flexible language

he wanted an efficient and flexible language similar to C that also provided high-level features for program organization.[18] Since 2012, C++ has been on a three-year release schedule[19] with C++23 as the next planned standard.[20]

History[edit]
Bjarne Stroustrup, the creator of C++, in his AT&T New Jersey office, c. 2000

In 1979, Bjarne Stroustrup, a Danish computer scientist, began work on "C with Classes", the predecessor to C++.[21] The motivation for creating a new language originated from Stroustrup's experience in programming for his PhD thesis. Stroustrup

in programming for his PhD thesis. Stroustrup found that Simula had features that were very helpful for large software development, but the language was too slow for practical use, while BCPL was fast but too low-level to be suitable for large

fast but too low-level to be suitable for large software development. When Stroustrup started working in AT&T Bell Labs, he had the problem of analyzing the UNIX kernel with respect to distributed computing. Remembering his PhD experience,

computing. Remembering his PhD experience, Stroustrup set out to enhance the C language with Simula-like features.[22] C was chosen because it was general-purpose, fast, portable, and widely used. In addition to C and Simula's influences, other

In addition to C and Simula's influences, other languages influenced this new language, including ALGOL 68, Ada, CLU, and ML.[citation needed]

Initially, Stroustrup's "C with Classes" added features to the C compiler, Cpre, including classes, derived classes, strong typing, inlining, and default arguments.[23]
A quiz on C++11 features being given in Paris in 2015

In 1982, Stroustrup started to develop a successor to C with Classes, which he named "C++" (++ being the increment operator in C) after going through several other names. New features were added, including virtual functions, function name and

including virtual functions, function name and operator overloading, references, constants, type-safe free-store memory allocation (new/delete), improved type checking, and BCPL-style single-line comments with two forward slashes (//). Furthermore,

with two forward slashes (//). Furthermore, Stroustrup developed a new, standalone compiler for C++, Cfront.

In 1984, Stroustrup implemented the first stream input/output library. The idea of providing an output operator rather than a named output function was suggested by Doug McIlroy[2] (who had previously suggested Unix pipes).

In 1985, the first edition of The C++ Programming Language was released, which became the definitive reference for the language, as there was not yet an official standard.[24] The first commercial implementation of C++ was released in October of the

of C++ was released in October of the same year.[21]

In 1989, C++ 2.0 was released, followed by the updated second edition of The C++ Programming Language in 1991.[25] New features in 2.0 included multiple inheritance, abstract classes, static member functions, const member functions, and protected

functions, const member functions, and protected members. In 1990, The Annotated C++ Reference Manual was published. This work became the basis for the future standard. Later feature additions included templates, exceptions, namespaces, new casts,

templates, exceptions, namespaces, new casts, and a Boolean type.

In 1998, C++98 was released, standardizing the language, and a minor update (C++03) was released in 2003.

After C++98, C++ evolved relatively slowly until, in 2011, the C++11 standard was released, adding numerous new features, enlarging the standard library further, and providing more facilities to C++ programmers. After a minor C++14 update released

programmers. After a minor C++14 update released in December 2014, various new additions were introduced in C++17.[26] After becoming finalized in February 2020,[27] a draft of the C++20 standard was approved on 4 September 2020, and officially

was approved on 4 September 2020, and officially published on 15 December 2020.[28][29]

On January 3, 2018, Stroustrup was announced as the 2018 winner of the Charles Stark Draper Prize for Engineering, "for conceptualizing and developing the C++ programming language".[30]

As of December 2022[update], C++ ranked third on the TIOBE index, surpassing Java for the first time in the history of the index. It ranks third, after Python and C.[31]
Etymology[edit]

According to Stroustrup, "the name signifies the evolutionary nature of the changes from C."[32] This name is credited to Rick Mascitti (mid-1983)[23] and was first used in December 1983. When Mascitti was questioned informally in 1992 about the

was questioned informally in 1992 about the naming, he indicated that it was given in a tongue-in-cheek spirit. The name comes from C's ++ operator (which increments the value of a variable) and a common naming convention of using "+" to indicate an

naming convention of using "+" to indicate an enhanced computer program.

During C++'s development period, the language had been referred to as "new C" and "C with Classes"[23][33] before acquiring its final name.
Philosophy[edit]

Philosophy[edit]
Throughout C++'s life, its development and evolution has been guided by a set of principles:[22]
It must be driven by actual problems and its features should be immediately useful in real world programs.

Every feature should be implementable (with a reasonably obvious way to do so).
Programmers should be free to pick their own programming style, and that style should be fully supported by C++.

Allowing a useful feature is more important than preventing every possible misuse of C++.
It should provide facilities for organising programs into separate, well-defined parts, and provide facilities for combining separately developed parts.

No implicit violations of the type system (but allow explicit violations; that is, those explicitly requested by the programmer).
User-created types need to have the same support and performance as built-in types.

Unused features should not negatively impact created executables (e.g. in lower performance).
There should be no language beneath C++ (except assembly language).

C++ should work alongside other existing programming languages, rather than fostering its own separate and incompatible programming environment.
If the programmer's intent is unknown, allow the programmer to specify it by providing manual control.

Standardization[edit]
Main articles: C++03, C++11, C++14, C++17, C++20, C++23, and C++26
C++ standards
Year
ISO/IEC Standard
Informal name
1998
14882:1998[34]
C++98
2003
14882:2003[35]
C++03
2011
14882:2011[36]
C++11, C++0x
2014
14882:2014[37]

14882:2011[36]
C++11, C++0x
2014
14882:2014[37]
C++14, C++1y
2017
14882:2017[38]
C++17, C++1z
2020
14882:2020[17]
C++20, C++2a
TBA
14882:2024
C++23, C++2b
TBA
C++26, C++2c

TBA
14882:2024
C++23, C++2b
TBA
C++26, C++2c
C++ is standardized by an ISO working group known as JTC1/SC22/WG21. So far, it has published six revisions of the C++ standard and is currently working on the next revision, C++23.

Scene during the C++ standards committee meeting in Stockholm in 1996

In 1998, the ISO working group standardized C++ for the first time as ISO/IEC 14882:1998, which is informally known as C++98. In 2003, it published a new version of the C++ standard called ISO/IEC 14882:2003, which fixed problems identified in

14882:2003, which fixed problems identified in C++98.

The next major revision of the standard was informally referred to as "C++0x", but it was not released until 2011.[39] C++11 (14882:2011) included many additions to both the core language and the standard library.[36]

In 2014, C++14 (also known as C++1y) was released as a small extension to C++11, featuring mainly bug fixes and small improvements.[40]  The Draft International Standard ballot procedures completed in mid-August 2014.[41]

After C++14, a major revision C++17, informally known as C++1z, was completed by the ISO C++ committee in mid July 2017 and was approved and published in December 2017.[42]

As part of the standardization process, ISO also publishes technical reports and specifications:
ISO/IEC TR 18015:2006[43] on the use of C++ in embedded systems and on performance implications of C++ language and library features,

ISO/IEC TR 19768:2007[44] (also known as the C++ Technical Report 1) on library extensions mostly integrated into C++11,
ISO/IEC TR 29124:2010[45] on special mathematical functions, integrated into C++17,

ISO/IEC TR 24733:2011[46] on decimal floating-point arithmetic,
ISO/IEC TS 18822:2015[47] on the standard filesystem library, integrated into C++17,

ISO/IEC TS 19570:2015[48] on parallel versions of the standard library algorithms, integrated into C++17,
ISO/IEC TS 19841:2015[49] on software transactional memory,

ISO/IEC TS 19568:2015[50] on a new set of library extensions, some of which are already integrated into C++17,
ISO/IEC TS 19217:2015[51] on the C++ concepts, integrated into C++20,

ISO/IEC TS 19571:2016[52] on the library extensions for concurrency, some of which are already integrated into C++20,
ISO/IEC TS 19568:2017[53] on a new set of general-purpose library extensions,

ISO/IEC TS 21425:2017[54] on the library extensions for ranges, integrated into C++20,
ISO/IEC TS 22277:2017[55] on coroutines, integrated into C++20,
ISO/IEC TS 19216:2018[56] on the networking library,

ISO/IEC TS 21544:2018[57] on modules, integrated into C++20,
ISO/IEC TS 19570:2018[58] on a new set of library extensions for parallelism, and
ISO/IEC TS 23619:2021[59] on new extensions for reflective programming (reflection).

More technical specifications are in development and pending approval, including new set of concurrency extensions.
Language[edit]

The C++ language has two main components: a direct mapping of hardware features provided primarily by the C subset, and zero-overhead abstractions based on those mappings. Stroustrup describes C++ as "a light-weight abstraction programming language

"a light-weight abstraction programming language [designed] for building and using efficient and elegant abstractions";[15] and "offering both hardware access and abstraction is the basis of C++. Doing it efficiently is what distinguishes it from

it efficiently is what distinguishes it from other languages."[60]

C++ inherits most of C's syntax. A hello world program that conforms to the C standard is also a valid C++ hello word program. The following is Bjarne Stroustrup's version of the Hello world program that uses the C++ Standard Library stream facility

uses the C++ Standard Library stream facility to write a message to standard output:[61][62][note 2]

#include <iostream>
int main()
{
std::cout << "Hello, world!\n";
}
Object storage[edit]

}
Object storage[edit]
As in C, C++ supports four types of memory management: static storage duration objects, thread storage duration objects, automatic storage duration objects, and dynamic storage duration objects.[63]

Static storage duration objects[edit]

Static storage duration objects are created before main() is entered (see exceptions below) and destroyed in reverse order of creation after main() exits. The exact order of creation is not specified by the standard (though there are some rules

by the standard (though there are some rules defined below) to allow implementations some freedom in how to organize their implementation. More formally, objects of this type have a lifespan that "shall last for the duration of the program".[64]

Static storage duration objects are initialized in two phases. First, "static initialization" is performed, and only after all static initialization is performed, "dynamic initialization" is performed.  In static initialization, all objects are

In static initialization, all objects are first initialized with zeros; after that, all objects that have a constant initialization phase are initialized with the constant expression (i.e. variables initialized with a literal or constexpr). Though

initialized with a literal or constexpr). Though it is not specified in the standard, the static initialization phase can be completed at compile time and saved in the data partition of the executable.  Dynamic initialization involves all object

Dynamic initialization involves all object initialization done via a constructor or function call (unless the function is marked with constexpr, in C++11). The dynamic initialization order is defined as the order of declaration within the

is defined as the order of declaration within the compilation unit (i.e. the same file). No guarantees are provided about the order of initialization between compilation units.

Thread storage duration objects[edit]
Variables of this type are very similar to static storage duration objects. The main difference is the creation time is just before thread creation, and destruction is done after the thread has been joined.[65]

Automatic storage duration objects[edit]

The most common variable types in C++ are local variables inside a function or block, and temporary variables.[66] The common feature about automatic variables is that they have a lifetime that is limited to the scope of the variable. They are

is limited to the scope of the variable. They are created and potentially initialized at the point of declaration (see below for details) and destroyed in the reverse order of creation when the scope is left. This is implemented by allocation on the

is left. This is implemented by allocation on the stack.

Local variables are created as the point of execution passes the declaration point. If the variable has a constructor or initializer this is used to define the initial state of the object. Local variables are destroyed when the local block or

variables are destroyed when the local block or function that they are declared in is closed. C++ destructors for local variables are called at the end of the object lifetime, allowing a discipline for automatic resource management termed RAII,

for automatic resource management termed RAII, which is widely used in C++.

Member variables are created when the parent object is created. Array members are initialized from 0 to the last member of the array in order. Member variables are destroyed when the parent object is destroyed in the reverse order of creation. i.e.

destroyed in the reverse order of creation. i.e. If the parent is an "automatic object" then it will be destroyed when it goes out of scope which triggers the destruction of all its members.

Temporary variables are created as the result of expression evaluation and are destroyed when the statement containing the expression has been fully evaluated (usually at the ; at the end of a statement).
Dynamic storage duration objects[edit]

Dynamic storage duration objects[edit]
Main article: new and delete (C++)

These objects have a dynamic lifespan and can be created directly with a call to new and destroyed explicitly with a call to delete.[67] C++ also supports malloc and free, from C, but these are not compatible with new and delete. Use of new returns

with new and delete. Use of new returns an address to the allocated memory. The C++ Core Guidelines advise against using new directly for creating dynamic objects in favor of smart pointers through make_unique<T> for single ownership and

through make_unique<T> for single ownership and make_shared<T> for reference-counted multiple ownership,[68] which were introduced in C++11.

Templates[edit]
See also: Template metaprogramming and Generic programming

C++ templates enable generic programming. C++ supports function, class, alias, and variable templates. Templates may be parameterized by types, compile-time constants, and other templates. Templates are implemented by instantiation at compile-time.

are implemented by instantiation at compile-time. To instantiate a template, compilers substitute specific arguments for a template's parameters to generate a concrete function or class instance. Some substitutions are not possible; these are

Some substitutions are not possible; these are eliminated by an overload resolution policy described by the phrase "Substitution failure is not an error" (SFINAE). Templates are a powerful tool that can be used for generic programming, template

can be used for generic programming, template metaprogramming, and code optimization, but this power implies a cost. Template use may increase object code size, because each template instantiation produces a copy of the template code: one for each

a copy of the template code: one for each set of template arguments, however, this is the same or smaller amount of code that would be generated if the code were written by hand.[69] This is in contrast to run-time generics seen in other languages

to run-time generics seen in other languages (e.g., Java) where at compile-time the type is erased and a single template body is preserved.

Templates are different from macros: while both of these compile-time language features enable conditional compilation, templates are not restricted to lexical substitution. Templates are aware of the semantics and type system of their companion

the semantics and type system of their companion language, as well as all compile-time type definitions, and can perform high-level operations including programmatic flow control based on evaluation of strictly type-checked parameters. Macros are

of strictly type-checked parameters. Macros are capable of conditional control over compilation based on predetermined criteria, but cannot instantiate new types, recurse, or perform type evaluation and in effect are limited to pre-compilation

and in effect are limited to pre-compilation text-substitution and text-inclusion/exclusion. In other words, macros can control compilation flow based on pre-defined symbols but cannot, unlike templates, independently instantiate new symbols.

templates, independently instantiate new symbols. Templates are a tool for static polymorphism (see below) and generic programming.

In addition, templates are a compile-time mechanism in C++ that is Turing-complete, meaning that any computation expressible by a computer program can be computed, in some form, by a template metaprogram before runtime.

In summary, a template is a compile-time parameterized function or class written without knowledge of the specific arguments used to instantiate it. After instantiation, the resulting code is equivalent to code written specifically for the passed

to code written specifically for the passed arguments. In this manner, templates provide a way to decouple generic, broadly applicable aspects of functions and classes (encoded in templates) from specific aspects (encoded in template parameters)

specific aspects (encoded in template parameters) without sacrificing performance due to abstraction.

Objects[edit]
Main article: C++ classes

C++ introduces object-oriented programming (OOP) features to C. It offers classes, which provide the four features commonly present in OOP (and some non-OOP) languages: abstraction, encapsulation, inheritance, and polymorphism. One distinguishing

inheritance, and polymorphism. One distinguishing feature of C++ classes compared to classes in other programming languages is support for deterministic destructors, which in turn provide support for the Resource Acquisition is Initialization (RAII)

the Resource Acquisition is Initialization (RAII) concept.

Encapsulation[edit]

Encapsulation is the hiding of information to ensure that data structures and operators are used as intended and to make the usage model more obvious to the developer. C++ provides the ability to define classes and functions as its primary

to define classes and functions as its primary encapsulation mechanisms. Within a class, members can be declared as either public, protected, or private to explicitly enforce encapsulation. A public member of the class is accessible to any function.

of the class is accessible to any function. A private member is accessible only to functions that are members of that class and to functions and classes explicitly granted access permission by the class ("friends"). A protected member is accessible

("friends"). A protected member is accessible to members of classes that inherit from the class in addition to the class itself and any friends.

The object-oriented principle ensures the encapsulation of all and only the functions that access the internal representation of a type. C++ supports this principle via member functions and friend functions, but it does not enforce it. Programmers

but it does not enforce it. Programmers can declare parts or all of the representation of a type to be public, and they are allowed to make public entities not part of the representation of a type. Therefore, C++ supports not just object-oriented

Therefore, C++ supports not just object-oriented programming, but other decomposition paradigms such as modular programming.

It is generally considered good practice to make all data private or protected, and to make public only those functions that are part of a minimal interface for users of the class. This can hide the details of data implementation, allowing the

the details of data implementation, allowing the designer to later fundamentally change the implementation without changing the interface in any way.[70][71]

Inheritance[edit]

Inheritance allows one data type to acquire properties of other data types. Inheritance from a base class may be declared as public, protected, or private. This access specifier determines whether unrelated and derived classes can access the

unrelated and derived classes can access the inherited public and protected members of the base class. Only public inheritance corresponds to what is usually meant by "inheritance". The other two forms are much less frequently used. If the access

are much less frequently used. If the access specifier is omitted, a "class" inherits privately, while a "struct" inherits publicly. Base classes may be declared as virtual; this is called virtual inheritance. Virtual inheritance ensures that only

Virtual inheritance ensures that only one instance of a base class exists in the inheritance graph, avoiding some of the ambiguity problems of multiple inheritance.

Multiple inheritance is a C++ feature allowing a class to be derived from more than one base class; this allows for more elaborate inheritance relationships. For example, a "Flying Cat" class can inherit from both "Cat" and "Flying Mammal". Some

inherit from both "Cat" and "Flying Mammal". Some other languages, such as C# or Java, accomplish something similar (although more limited) by allowing inheritance of multiple interfaces while restricting the number of base classes to one

restricting the number of base classes to one (interfaces, unlike classes, provide only declarations of member functions, no implementation or member data). An interface as in C# and Java can be defined in C++ as a class containing only pure virtual

in C++ as a class containing only pure virtual functions, often known as an abstract base class or "ABC". The member functions of such an abstract base class are normally explicitly defined in the derived class, not inherited implicitly. C++ virtual

class, not inherited implicitly. C++ virtual inheritance exhibits an ambiguity resolution feature called dominance.

Operators and operator overloading[edit]
Operators that cannot be overloaded
Operator
Symbol
Scope resolution
::
Conditional
?:
dot
.
Member selection
.*
"sizeof"
sizeof
"typeid"
typeid
Main article: Operators in C and C++

C++ provides more than 35 operators, covering basic arithmetic, bit manipulation, indirection, comparisons, logical operations and others. Almost all operators can be overloaded for user-defined types, with a few notable exceptions such as member

with a few notable exceptions such as member access (. and .*) and the conditional operator. The rich set of overloadable operators is central to making user-defined types in C++ seem like built-in types.

Overloadable operators are also an essential part of many advanced C++ programming techniques, such as smart pointers. Overloading an operator does not change the precedence of calculations involving the operator, nor does it change the number of

the operator, nor does it change the number of operands that the operator uses (any operand may however be ignored by the operator, though it will be evaluated prior to execution). Overloaded "&&" and "||" operators lose their short-circuit

"&&" and "||" operators lose their short-circuit evaluation property.

Polymorphism[edit]
See also: Polymorphism (computer science)
Polymorphism enables one common interface for many implementations, and for objects to act differently under different circumstances.

C++ supports several kinds of static (resolved at compile-time) and dynamic (resolved at run-time) polymorphisms, supported by the language features described above. Compile-time polymorphism does not allow for certain run-time decisions, while

not allow for certain run-time decisions, while runtime polymorphism typically incurs a performance penalty.

Static polymorphism[edit]
See also: Parametric polymorphism and ad hoc polymorphism

Function overloading allows programs to declare multiple functions having the same name but with different arguments (i.e. ad hoc polymorphism). The functions are distinguished by the number or types of their formal parameters. Thus, the same

types of their formal parameters. Thus, the same function name can refer to different functions depending on the context in which it is used. The type returned by the function is not used to distinguish overloaded functions and differing return

overloaded functions and differing return types would result in a compile-time error message.

When declaring a function, a programmer can specify for one or more parameters a default value. Doing so allows the parameters with defaults to optionally be omitted when the function is called, in which case the default arguments will be used. When

case the default arguments will be used. When a function is called with fewer arguments than there are declared parameters, explicit arguments are matched to parameters in left-to-right order, with any unmatched parameters at the end of the

with any unmatched parameters at the end of the parameter list being assigned their default arguments. In many cases, specifying default arguments in a single function declaration is preferable to providing overloaded function definitions with

to providing overloaded function definitions with different numbers of parameters.

Templates in C++ provide a sophisticated mechanism for writing generic, polymorphic code (i.e. parametric polymorphism). In particular, through the curiously recurring template pattern, it is possible to implement a form of static polymorphism that

to implement a form of static polymorphism that closely mimics the syntax for overriding virtual functions. Because C++ templates are type-aware and Turing-complete, they can also be used to let the compiler resolve recursive conditionals and

the compiler resolve recursive conditionals and generate substantial programs through template metaprogramming. Contrary to some opinion, template code will not generate a bulk code after compilation with the proper compiler settings.[69]

Dynamic polymorphism[edit]
Inheritance[edit]
See also: Subtyping

Variable pointers and references to a base class type in C++ can also refer to objects of any derived classes of that type. This allows arrays and other kinds of containers to hold pointers to objects of differing types (references cannot be

objects of differing types (references cannot be directly held in containers). This enables dynamic (run-time) polymorphism, where the referred objects can behave differently, depending on their (actual, derived) types.

C++ also provides the dynamic_cast operator, which allows code to safely attempt conversion of an object, via a base reference/pointer, to a more derived type: downcasting. The attempt is necessary as often one does not know which derived type is

as often one does not know which derived type is referenced. (Upcasting, conversion to a more general type, can always be checked/performed at compile-time via static_cast, as ancestral classes are specified in the derived class's interface, visible

in the derived class's interface, visible to all callers.) dynamic_cast relies on run-time type information (RTTI), metadata in the program that enables differentiating types and their relationships. If a dynamic_cast to a pointer fails, the result

If a dynamic_cast to a pointer fails, the result is the nullptr constant, whereas if the destination is a reference (which cannot be null), the cast throws an exception. Objects known to be of a certain derived type can be cast to that with

a certain derived type can be cast to that with static_cast, bypassing RTTI and the safe runtime type-checking of dynamic_cast, so this should be used only if the programmer is very confident the cast is, and will always be, valid.

Virtual member functions[edit]

Ordinarily, when a function in a derived class overrides a function in a base class, the function to call is determined by the type of the object. A given function is overridden when there exists no difference in the number or type of parameters

no difference in the number or type of parameters between two or more definitions of that function. Hence, at compile time, it may not be possible to determine the type of the object and therefore the correct function to call, given only a base

the correct function to call, given only a base class pointer; the decision is therefore put off until runtime. This is called dynamic dispatch. Virtual member functions or methods[72] allow the most specific implementation of the function to be

specific implementation of the function to be called, according to the actual run-time type of the object. In C++ implementations, this is commonly done using virtual function tables. If the object type is known, this may be bypassed by prepending a

is known, this may be bypassed by prepending a fully qualified class name before the function call, but in general calls to virtual functions are resolved at run time.

In addition to standard member functions, operator overloads and destructors can be virtual. An inexact rule based on practical experience states that if any function in the class is virtual, the destructor should be as well. As the type of an

destructor should be as well. As the type of an object at its creation is known at compile time, constructors, and by extension copy constructors, cannot be virtual. Nonetheless, a situation may arise where a copy of an object needs to be created

where a copy of an object needs to be created when a pointer to a derived object is passed as a pointer to a base object. In such a case, a common solution is to create a clone() (or similar) virtual function that creates and returns a copy of the

function that creates and returns a copy of the derived class when called.

A member function can also be made "pure virtual" by appending it with = 0 after the closing parenthesis and before the semicolon. A class containing a pure virtual function is called an abstract class. Objects cannot be created from an abstract

class. Objects cannot be created from an abstract class; they can only be derived from. Any derived class inherits the virtual function as pure and must provide a non-pure definition of it (and all other pure virtual functions) before objects of the

pure virtual functions) before objects of the derived class can be created. A program that attempts to create an object of a class with a pure virtual member function or inherited pure virtual member function is ill-formed.

Lambda expressions[edit]
C++ provides support for anonymous functions, also known as lambda expressions, with the following form:
[capture](parameters) -> return_type { function_body }

Since C++20, the keyword template is optional for template parameters of lambda expressions:
[capture]<template_parameters>(parameters) -> return_type { function_body }

If the lambda takes no parameters, and no return type or other specifiers are used, the () can be omitted; that is,
[capture] { function_body }
The return type of a lambda expression can be automatically inferred, if possible; e.g.:

[](int x, int y) { return x + y; } // inferred
[](int x, int y) -> int { return x + y; } // explicit

The [capture] list supports the definition of closures. Such lambda expressions are defined in the standard as syntactic sugar for an unnamed function object.
Exception handling[edit]

Exception handling is used to communicate the existence of a runtime problem or error from where it was detected to where the issue can be handled.[73] It permits this to be done in a uniform manner and separately from the main code, while detecting

separately from the main code, while detecting all errors.[74] Should an error occur, an exception is thrown (raised), which is then caught by the nearest suitable exception handler. The exception causes the current scope to be exited, and also each

the current scope to be exited, and also each outer scope (propagation) until a suitable handler is found, calling in turn the destructors of any objects in these exited scopes.[75] At the same time, an exception is presented as an object carrying

an exception is presented as an object carrying the data about the detected problem.[76]

Some C++ style guides, such as Google's,[77] LLVM's,[78] and Qt's,[79] forbid the usage of exceptions.

The exception-causing code is placed inside a try block. The exceptions are handled in separate catch blocks (the handlers); each try block can have multiple exception handlers, as it is visible in the example below.[80]
#include <iostream>

#include <iostream>
#include <vector>
#include <stdexcept>
int main() {
try {
std::vector<int> vec{3, 4, 3, 1};
int i{vec.at(4)}; // Throws an exception, std::out_of_range (indexing for vec is from 0-3 not 1-4)
}

}
// An exception handler, catches std::out_of_range, which is thrown by vec.at(4)
catch (const std::out_of_range &e) {
std::cerr << "Accessing a non-existent element: " << e.what() << '\n';
}

}
// To catch any other standard library exceptions (they derive from std::exception)
catch (const std::exception &e) {
std::cerr << "Exception thrown: " << e.what() << '\n';
}

}
// Catch any unrecognised exceptions (i.e. those which don't derive from std::exception)
catch (...) {
std::cerr << "Some fatal error\n";
}
}

It is also possible to raise exceptions purposefully, using the throw keyword; these exceptions are handled in the usual way. In some cases, exceptions cannot be used due to technical reasons. One such example is a critical component of an embedded

example is a critical component of an embedded system, where every operation must be guaranteed to complete within a specified amount of time. This cannot be determined with exceptions as no tools exist to determine the maximum time required for an

to determine the maximum time required for an exception to be handled.[81]

Unlike signal handling, in which the handling function is called from the point of failure, exception handling exits the current scope before the catch block is entered, which may be located in the current function or any of the previous function

current function or any of the previous function calls currently on the stack.

Enumerated types[edit]
This section is an excerpt from Enumerated type § C++.[edit]

C++ has enumeration types that are directly inherited from C's and work mostly like these, except that an enumeration is a real type in C++, giving added compile-time checking. Also (as with structs), the C++ enum keyword is combined with a typedef,

the C++ enum keyword is combined with a typedef, so that instead of naming the type enum name, simply name it name. This can be simulated in C using a typedef: typedef enum {Value1, Value2} name;

C++11 also provides a second kind of enumeration, called a scoped enumeration. These are type-safe: the enumerators are not implicitly converted to an integer type. Among other things, this allows I/O streaming to be defined for the enumeration

I/O streaming to be defined for the enumeration type. Another feature of scoped enumerations is that the enumerators do not leak, so usage requires prefixing with the name of the enumeration (e.g., Color::Red for the first enumerator in the example

for the first enumerator in the example below), unless a using enum declaration (introduced in C++20) has been used to bring the enumerators into the current scope. A scoped enumeration is specified by the phrase enum class (or enum struct). For

by the phrase enum class (or enum struct). For example:

enum class Color {Red, Green, Blue};

The underlying type of an enumeration is an implementation-defined integral type that is large enough to hold all enumerated values; it does not have to be the smallest possible type. The underlying type can be specified directly, which allows

type can be specified directly, which allows "forward declarations" of enumerations:

enum class Color : long {Red, Green, Blue};  // must fit in size and memory layout the type 'long'
enum class Shapes : char;  // forward declaration. If later there are values defined that don't fit in 'char' it is an error.
Standard library[edit]

Standard library[edit]
The draft "Working Paper" standard that became approved as C++98; half of its size was devoted to the C++ Standard Library.
Main article: C++ Standard Library

The C++ standard consists of two parts: the core language and the standard library. C++ programmers expect the latter on every major implementation of C++; it includes aggregate types (vectors, lists, maps, sets, queues, stacks, arrays, tuples),

maps, sets, queues, stacks, arrays, tuples), algorithms (find, for_each, binary_search, random_shuffle, etc.), input/output facilities (iostream, for reading from and writing to the console and files), filesystem library, localisation support, smart

filesystem library, localisation support, smart pointers for automatic memory management, regular expression support, multi-threading library, atomics support (allowing a variable to be read or written to by at most one thread at a time without any

to by at most one thread at a time without any external synchronisation), time utilities (measurement, getting current time, etc.), a system for converting error reporting that does not use C++ exceptions into C++ exceptions, a random number

exceptions into C++ exceptions, a random number generator, and a slightly modified version of the C standard library (to make it comply with the C++ type system).

A large part of the C++ library is based on the Standard Template Library (STL). Useful tools provided by the STL include containers as the collections of objects (such as vectors and lists), iterators that provide array-like access to containers,

that provide array-like access to containers, and algorithms that perform operations such as searching and sorting.

Furthermore, (multi)maps (associative arrays) and (multi)sets are provided, all of which export compatible interfaces. Therefore, using templates it is possible to write generic algorithms that work with any container or on any sequence defined by

with any container or on any sequence defined by iterators. As in C, the features of the library are accessed by using the #include directive to include a standard header. The C++ Standard Library provides 105 standard headers, of which 27 are

provides 105 standard headers, of which 27 are deprecated.

The standard incorporates the STL that was originally designed by Alexander Stepanov, who experimented with generic algorithms and containers for many years. When he started with C++, he finally found a language where it was possible to create

found a language where it was possible to create generic algorithms (e.g., STL sort) that perform even better than, for example, the C standard library qsort, thanks to C++ features like using inlining and compile-time binding instead of function

and compile-time binding instead of function pointers. The standard does not refer to it as "STL", as it is merely a part of the standard library, but the term is still widely used to distinguish it from the rest of the standard library

it from the rest of the standard library (input/output streams, internationalization, diagnostics, the C library subset, etc.).[82]

Most C++ compilers, and all major ones, provide a standards-conforming implementation of the C++ standard library.
C++ Core Guidelines[edit]

The C++ Core Guidelines[83] are an initiative led by Bjarne Stroustrup, the inventor of C++, and Herb Sutter, the convener and chair of the C++ ISO Working Group, to help programmers write 'Modern C++' by using best practices for the language

C++' by using best practices for the language standards C++11 and newer, and to help developers of compilers and static checking tools to create rules for catching bad programming practices.

The main aim is to efficiently and consistently write type and resource safe C++.
The Core Guidelines were announced[84] in the opening keynote at CPPCon 2015.

The Guidelines are accompanied by the Guideline Support Library (GSL),[85] a header only library of types and functions to implement the Core Guidelines and static checker tools for enforcing Guideline rules.[86]
Compatibility[edit]

To give compiler vendors greater freedom, the C++ standards committee decided not to dictate the implementation of name mangling, exception handling, and other implementation-specific features. The downside of this decision is that object code

The downside of this decision is that object code produced by different compilers is expected to be incompatible. There are, however, attempts to standardize compilers for particular machines or operating systems. For example, the Itanium C++ ABI is

systems. For example, the Itanium C++ ABI is processor-independent (despite its name) and is implemented by GCC and Clang.[87]

With C[edit]
Main article: Compatibility of C and C++

C++ is often considered to be a superset of C but this is not strictly true.[88] Most C code can easily be made to compile correctly in C++ but there are a few differences that cause some valid C code to be invalid or behave differently in C++. For

to be invalid or behave differently in C++. For example, C allows implicit conversion from void* to other pointer types but C++ does not (for type safety reasons). Also, C++ defines many new keywords, such as new and class, which may be used as

such as new and class, which may be used as identifiers (for example, variable names) in a C program.

Some incompatibilities have been removed by the 1999 revision of the C standard (C99), which now supports C++ features such as line comments (//) and declarations mixed with code. On the other hand, C99 introduced a number of new features that C++

C99 introduced a number of new features that C++ did not support that were incompatible or redundant in C++, such as variable-length arrays, native complex-number types (however, the std::complex class in the C++ standard library provides similar

in the C++ standard library provides similar functionality, although not code-compatible), designated initializers, compound literals, and the restrict keyword.[89] Some of the C99-introduced features were included in the subsequent version of the

were included in the subsequent version of the C++ standard, C++11 (out of those which were not redundant).[90][91][92] However, the C++11 standard introduces new incompatibilities, such as disallowing assignment of a string literal to a character

assignment of a string literal to a character pointer, which remains valid C.

To intermix C and C++ code, any function declaration or definition that is to be called from/used both in C and C++ must be declared with C linkage by placing it within an extern "C" {/*...*/} block. Such a function may not rely on features

block. Such a function may not rely on features depending on name mangling (i.e., function overloading).

Criticism[edit]
Main article: Criticism of C++

Main article: Criticism of C++
Despite its widespread adoption, some notable programmers have criticized the C++ language, including Linus Torvalds,[93] Richard Stallman,[94] Joshua Bloch, Ken Thompson,[95][96][97] and Donald Knuth.[98][99]

One of the most often criticized points of C++ is its perceived complexity as a language, with the criticism that a large number of non-orthogonal features in practice necessitates restricting code to a subset of C++, thus eschewing the readability

a subset of C++, thus eschewing the readability benefits of common style and idioms. As expressed by Joshua Bloch:  I think C++ was pushed well beyond its complexity threshold, and yet there are a lot of people programming it. But what you do is you

of people programming it. But what you do is you force people to subset it. So almost every shop that I know of that uses C++ says, "Yes, we're using C++ but we're not doing multiple-implementation inheritance and we're not using operator

inheritance and we're not using operator overloading." There are just a bunch of features that you're not going to use because the complexity of the resulting code is too high. And I don't think it's good when you have to start doing that. You lose

good when you have to start doing that. You lose this programmer portability where everyone can read everyone else's code, which I think is such a good thing.

Donald Knuth (1993, commenting on pre-standardized C++), who said of Edsger Dijkstra that "to think of programming in C++" "would make him physically ill":[98][99]  The problem that I have with them today is that... C++ is too complicated. At the

today is that... C++ is too complicated. At the moment, it's impossible for me to write portable code that I believe would work on lots of different systems, unless I avoid all exotic features. Whenever the C++ language designers had two competing

the C++ language designers had two competing ideas as to how they should solve some problem, they said "OK, we'll do them both". So the language is too baroque for my taste.

Ken Thompson, who was a colleague of Stroustrup at Bell Labs, gives his assessment:[96][97]  It certainly has its good points. But by and large I think it's a bad language. It does a lot of things half well and it's just a garbage heap of ideas that

well and it's just a garbage heap of ideas that are mutually exclusive. Everybody I know, whether it's personal or corporate, selects a subset and these subsets are different. So it's not a good language to transport an algorithm—to say, "I wrote

to transport an algorithm—to say, "I wrote it; here, take it." It's way too big, way too complex. And it's obviously built by a committee.

Stroustrup campaigned for years and years and years, way beyond any sort of technical contributions he made to the language, to get it adopted and used. And he sort of ran all the standards committees with a whip and a chair. And he said "no" to no

with a whip and a chair. And he said "no" to no one. He put every feature in that language that ever existed. It wasn't cleanly designed—it was just the union of everything that came along. And I think it suffered drastically from that.

However Brian Kernighan, also a colleague at Bell Labs, disputes this assessment:[100] C++ has been enormously influential. ... Lots of people say C++ is too big and too complicated etc. etc. but in fact it is a very powerful language and pretty

in fact it is a very powerful language and pretty much everything that is in there is there for a really sound reason: it is not somebody doing random invention, it is actually people trying to solve real world problems. Now a lot of the programs

real world problems. Now a lot of the programs that we take for granted today, that we just use, are C++ programs.

Stroustrup himself comments that C++ semantics are much cleaner than its syntax: "within C++, there is a much smaller and cleaner language struggling to get out."[101]

Other complaints may include a lack of reflective programming (reflection) or garbage collection, long compiling times, perceived feature creep,[102] and verbose error messages, particularly from template metaprogramming.[103]
See also[edit]

See also[edit]
Computer programming portal
Carbon (programming language)
Comparison of programming languages
List of C++ compilers
Outline of C++
Category:C++ libraries
Footnotes[edit]
^ For the idea of the C++20 stackless coroutines.

^ This code is copied directly from Bjarne Stroustrup's errata page (p. 633). He addresses the use of '\n' rather than std::endl. Also see Can I write "void main()"? Archived 2 July 2020 at the Wayback Machine for an explanation of the implicit

Machine for an explanation of the implicit return 0; in the main function. This implicit return is not available in other functions.

References[edit]
^ "Overview of modules in C++". Microsoft. 24 April 2023.
^ a b c d e f Stroustrup, Bjarne (1996). "A history of C++: 1979-1991". History of programming languages---II. ACM. pp. 699–769. doi:10.1145/234286.1057836.

^ Stroustrup, Bjarne (16 December 2021). "C++20: Reaching for the Aims of C++ - Bjarne Stroustrup - CppCon 2021". CppCon. Archived from the original on 30 December 2021. Retrieved 30 December 2021.

^  Stroustrup, Bjarne (12 June 2020). "Thriving in a crowded and changing world: C++ 2006–2020". Proceedings of the ACM on Programming Languages. 4 (HOPL). Association for Computing Machinery (ACM): 1–168. doi:10.1145/3386320. ISSN 2475-1421.

1–168. doi:10.1145/3386320. ISSN 2475-1421. S2CID 219603741.

^ Naugler, David (May 2007). "C# 2.0 for C++ and Java programmer: conference workshop". Journal of Computing Sciences in Colleges. 22 (5). Although C# has been strongly influenced by Java it has also been strongly influenced by C++ and is best

also been strongly influenced by C++ and is best viewed as a descendant of both C++ and Java.

^ "Chapel spec (Acknowledgements)" (PDF). Cray Inc. 1 October 2015. Archived (PDF) from the original on 24 June 2018. Retrieved 14 January 2016.

^ Fogus, Michael. "Rich Hickey Q&A". Code Quarterly. Archived from the original on 11 January 2017. Retrieved 11 January 2017.

^ Harry. H. Chaudhary (28 July 2014). "Cracking The Java Programming Interview :: 2000+ Java Interview Que/Ans". Archived from the original on 27 May 2021. Retrieved 29 May 2016.

^ Roger Poon (1 May 2017). "Scaling JS++: Abstraction, Performance, and Readability". Archived from the original on 11 May 2020. Retrieved 21 April 2020.

^ "The evolution of an extension language: a history of Lua". www.lua.org. Retrieved 4 January 2023.
^ "FAQ Nim Programming Language". Archived from the original on 11 July 2017. Retrieved 21 April 2020.

^ "9. Classes — Python 3.6.4 documentation". docs.python.org. Archived from the original on 23 October 2012. Retrieved 9 January 2018.
^ "Influences - The Rust Reference". doc.rust-lang.org. Retrieved 4 January 2023.

^ Stroustrup, Bjarne (1997). "1". The C++ Programming Language (Third ed.). Addison-Wesley. ISBN 0-201-88954-4. OCLC 59193992.

^ a b c Stroustrup, B. (6 May 2014). "Lecture:The essence of C++. University of Edinburgh". YouTube. Archived from the original on 28 April 2015. Retrieved 12 June 2015.

^ Stroustrup, Bjarne (17 February 2014). "C++ Applications". stroustrup.com. Archived from the original on 4 April 2021. Retrieved 5 May 2014.

^ a b "ISO/IEC 14882:2020". International Organization for Standardization. Archived from the original on 16 December 2020. Retrieved 16 December 2020.

^ "Bjarne Stroustrup's Homepage". www.stroustrup.com. Archived from the original on 14 May 2019. Retrieved 15 May 2013.
^ "C++ IS schedule" (PDF). Archived (PDF) from the original on 10 August 2020. Retrieved 9 August 2020.

^ "C++; Where it's heading". Archived from the original on 3 December 2018. Retrieved 3 December 2018.

^ a b Stroustrup, Bjarne (7 March 2010). "Bjarne Stroustrup's FAQ: When was C++ invented?". stroustrup.com. Archived from the original on 6 February 2016. Retrieved 16 September 2010.

^ a b Stroustrup, Bjarne. "Evolving a language in and for the real world: C++ 1991-2006" (PDF). Archived (PDF) from the original on 20 November 2007. Retrieved 14 August 2013.

^ a b c Stroustrup, Bjarne. "A History of C ++ : 1979− 1991" (PDF). Archived (PDF) from the original on 2 February 2019. Retrieved 18 July 2013.

^ Stroustrup, Bjarne. "The C++ Programming Language" (First ed.). Archived from the original on 9 August 2012. Retrieved 16 September 2010.

^ Stroustrup, Bjarne. "The C++ Programming Language" (Second ed.). Archived from the original on 9 August 2012. Retrieved 16 September 2010.

^ Sutter, Herb (30 June 2016). "Trip report: Summer ISO C++ standards meeting (Oulu)". herbsutter.com. Archived from the original on 8 October 2016. the next standard after C++17 will be C++20

^ Dusíková, Hana (6 November 2019). "N4817: 2020 Prague Meeting Invitation and Information" (PDF). Archived (PDF) from the original on 29 December 2019. Retrieved 13 February 2020.

^ "Current Status". isocpp.org. Archived from the original on 8 September 2020. Retrieved 7 September 2020.
^ "C++20 Approved -- Herb Sutter". isocpp.org. Archived from the original on 11 September 2020. Retrieved 8 September 2020.

^ "Computer Science Pioneer Bjarne Stroustrup to Receive the 2018 Charles Stark Draper Prize for Engineering" (Press release). National Academy of Engineering. 3 January 2018. Archived from the original on 3 January 2018. Retrieved 14 December 2021.

^ TIOBE (January 2022). "TIOBE Index for January 2021". TIOBE.com. TIOBE Company. Archived from the original on 25 February 2018. Retrieved 2 February 2022.

^ "Bjarne Stroustrup's FAQ – Where did the name "C++" come from?". Archived from the original on 6 February 2016. Retrieved 16 January 2008.

^ "C For C++ Programmers". Northeastern University. Archived from the original on 17 November 2010. Retrieved 7 September 2015.

^ "ISO/IEC 14882:1998". International Organization for Standardization. Archived from the original on 15 January 2017. Retrieved 23 November 2018.

^ "ISO/IEC 14882:2003". International Organization for Standardization. Archived from the original on 13 August 2021. Retrieved 23 November 2018.

^ a b "ISO/IEC 14882:2011". International Organization for Standardization. Archived from the original on 27 May 2016. Retrieved 23 November 2018.

^ "ISO/IEC 14882:2014". International Organization for Standardization. Archived from the original on 29 April 2016. Retrieved 23 November 2018.

^ "ISO/IEC 14882:2017". International Organization for Standardization. Archived from the original on 29 January 2013. Retrieved 2 December 2017.

^ "We have an international standard: C++0x is unanimously approved". Sutter's Mill. 12 August 2011. Archived from the original on 28 June 2018. Retrieved 23 November 2018.

^ "The Future of C++". Archived from the original on 23 October 2018. Retrieved 23 November 2018 – via channel9.msdn.com.
^ "We have C++14! : Standard C++". isocpp.org. Archived from the original on 19 August 2014. Retrieved 19 August 2014.

^ Sutter, Herb (15 July 2017). "Trip report: Summer ISO C++ standards meeting (Toronto)". Archived from the original on 6 August 2017. Retrieved 4 August 2017.

^ "ISO/IEC TR 18015:2006". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019.

^ "ISO/IEC TR 19768:2007". International Organization for Standardization. Archived from the original on 4 March 2016. Retrieved 15 February 2019.

^ "ISO/IEC TR 29124:2010". International Organization for Standardization. Archived from the original on 12 January 2019. Retrieved 15 February 2019.

^ "ISO/IEC TR 24733:2011". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019.

^ "ISO/IEC TS 18822:2015". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019.

^ "ISO/IEC TS 19570:2015". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019.

^ "ISO/IEC TS 19841:2015". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019.

^ "ISO/IEC TS 19568:2015". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019.

^ "ISO/IEC TS 19217:2015". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019.

^ "ISO/IEC TS 19571:2016". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019.

^ "ISO/IEC TS 19568:2017". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019.

^ "ISO/IEC TS 21425:2017". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019.

^ "ISO/IEC TS 22277:2017". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019.

^ "ISO/IEC TS 19216:2018". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019.

^ "ISO/IEC TS 21544:2018". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019.

^ "ISO/IEC TS 19570:2018". International Organization for Standardization. Archived from the original on 15 January 2019. Retrieved 15 February 2019.

^ "ISO/IEC TS 23619:2021". International Organization for Standardization. Archived from the original on 15 December 2018. Retrieved 11 October 2021.

^ B. Stroustrup (interviewed by Sergio De Simone) (30 April 2015). "Stroustrup: Thoughts on C++17 - An Interview". Archived from the original on 8 July 2015. Retrieved 8 July 2015.

^ Stroustrup, Bjarne (2000). The C++ Programming Language (Special ed.). Addison-Wesley. p. 46. ISBN 0-201-70073-5.

^ Stroustrup, Bjarne. "Open issues for The C++ Programming Language (3rd Edition)". Archived from the original on 5 May 2014. Retrieved 5 May 2014.

^ ISO/IEC. Programming Languages – C++11 Draft (n3797) Archived 2 October 2018 at the Wayback Machine §3.7 Storage duration [basic.stc]

^ ISO/IEC. Programming Languages – C++11 Draft (n3797) Archived 2 October 2018 at the Wayback Machine §3.7.1 Static Storage duration [basic.stc.static]

^ ISO/IEC. Programming Languages – C++11 Draft (n3797) Archived 2 October 2018 at the Wayback Machine §3.7.2 Thread Storage duration [basic.stc.thread]

^ ISO/IEC. Programming Languages – C++11 Draft (n3797) Archived 2 October 2018 at the Wayback Machine §3.7.3 Automatic Storage duration [basic.stc.auto]

^ ISO/IEC. Programming Languages – C++11 Draft (n3797) Archived 2 October 2018 at the Wayback Machine §3.7.4 Dynamic Storage duration [basic.stc.dynamic]

^ "C++ Core Guidelines". isocpp.github.io. Archived from the original on 8 February 2020. Retrieved 9 February 2020.

^ a b "Nobody Understands C++: Part 5: Template Code Bloat". articles.emptycrate.com/: EmptyCrate Software. Travel. Stuff. 6 May 2008. Archived from the original on 25 April 2016. Retrieved 8 March 2010. On occasion you will read or hear someone

2010. On occasion you will read or hear someone talking about C++ templates causing code bloat. I was thinking about it the other day and thought to myself, "self, if the code does exactly the same thing then the compiled code cannot really be any

thing then the compiled code cannot really be any bigger, can it?" [...] And what about compiled code size? Each were compiled with the command g++ <filename>.cpp -O3. Non-template version: 8140 bytes, template version: 8028 bytes!

^ Sutter, Herb; Alexandrescu, Andrei (2004). C++ Coding Standards: 101 Rules, Guidelines, and Best Practices. Addison-Wesley.
^ Henricson, Mats; Nyquist, Erik (1997). Industrial Strength C++. Prentice Hall. ISBN 0-13-120965-5.

^ Stroustrup, Bjarne (2000). The C++ Programming Language (Special ed.). Addison-Wesley. p. 310. ISBN 0-201-70073-5. A virtual member function is sometimes called a method.

^ Mycroft, Alan (2013). "C and C++ Exceptions | Templates" (PDF). Cambridge Computer Laboratory - Course Materials 2013-14. Archived (PDF) from the original on 13 May 2016. Retrieved 30 August 2016.

^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. p. 345. ISBN 9780321563842.
^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. pp. 363–365. ISBN 9780321563842.

^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. pp. 345, 363. ISBN 9780321563842.
^ "Google C++ Style Guide". Archived from the original on 16 March 2019. Retrieved 25 June 2019.

^ "LLVM Coding Standards". LLVM 9 documentation. Archived from the original on 27 June 2019. Retrieved 25 June 2019.
^ "Coding Conventions". Qt Wiki. Archived from the original on 26 June 2019. Retrieved 26 June 2019.

^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. pp. 344, 370. ISBN 9780321563842.
^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. p. 349. ISBN 9780321563842.

^ Graziano Lo Russo (2008). "An Interview with A. Stepanov". stlport.org. Archived from the original on 4 March 2009. Retrieved 8 October 2015.

^ "C++ Core Guidelines". isocpp.github.io. Archived from the original on 16 February 2020. Retrieved 9 February 2020.

^ "Bjarne Stroustrup announces C++ Core Guidelines : Standard C++". isocpp.org. Archived from the original on 11 May 2020. Retrieved 31 March 2020.

^ "microsoft/GSL". 18 July 2021. Archived from the original on 18 July 2021. Retrieved 18 July 2021 – via GitHub.
^ "Using the C++ Core Guidelines checkers". Microsoft Learn. Archived from the original on 13 August 2021. Retrieved 31 March 2020.

^ "C++ ABI Summary". 20 March 2001. Archived from the original on 10 July 2018. Retrieved 30 May 2006.
^ "Bjarne Stroustrup's FAQ – Is C a subset of C++?". Archived from the original on 6 February 2016. Retrieved 5 May 2014.

^ "C9X – The New C Standard". Archived from the original on 21 June 2018. Retrieved 27 December 2008.
^ "C++0x Support in GCC". Archived from the original on 21 July 2010. Retrieved 12 October 2010.

^ "C++0x Core Language Features In VC10: The Table". Archived from the original on 21 August 2010. Retrieved 12 October 2010.

^ "Clang - C++98, C++11, and C++14 Status". Clang.llvm.org. 12 May 2013. Archived from the original on 4 July 2013. Retrieved 10 June 2013.

^ "Re: [RFC] Convert builin-mailinfo.c to use The Better String Library" (Mailing list). 6 September 2007. Archived from the original on 8 March 2021. Retrieved 31 March 2015.

^ "Re: Efforts to attract more users?" (Mailing list). 12 July 2010. Archived from the original on 21 March 2015. Retrieved 31 March 2015.

^ Andrew Binstock (18 May 2011). "Dr. Dobb's: Interview with Ken Thompson". Archived from the original on 13 March 2014. Retrieved 7 February 2014.

^ a b Peter Seibel (16 September 2009). Coders at Work: Reflections on the Craft of Programming. Apress. pp. 475–476. ISBN 978-1-4302-1948-4. Archived from the original on 1 December 2019. Retrieved 9 November 2017.

^ a b "C++ in Coders at Work". 16 October 2009. Archived from the original on 10 November 2017. Retrieved 9 November 2017.
^ a b "An Interview with Donald Knuth". Dr. Dobb's. Archived from the original on 8 March 2021. Retrieved 18 July 2021.

^ a b "(La)TeX Navigator". Archived from the original on 20 November 2017. Retrieved 10 November 2017.
^ Brian Kernighan (18 July 2018). Brian Kernighan Q&A - Computerphile. Archived from the original on 25 September 2021.

^ "Stroustrup: FAQ". www.stroustrup.com. Archived from the original on 6 February 2016. Retrieved 7 June 2013.
^ Pike, Rob (2012). "Less is exponentially more". Archived from the original on 7 July 2017. Retrieved 23 November 2018.

^ Kreinin, Yossi (13 October 2009). "Defective C++". Archived from the original on 5 February 2016. Retrieved 3 February 2016.
Further reading[edit]

Further reading[edit]
Abrahams, David; Gurtovoy, Aleksey (2005). C++ Template Metaprogramming: Concepts, Tools, and Techniques from Boost and Beyond. Addison-Wesley. ISBN 0-321-22725-5.

Alexandrescu, Andrei (2001). Modern C++ Design: Generic Programming and Design Patterns Applied. Addison-Wesley. ISBN 0-201-70431-5.

Alexandrescu, Andrei; Sutter, Herb (2004). C++ Design and Coding Standards: Rules and Guidelines for Writing Programs. Addison-Wesley. ISBN 0-321-11358-6.

Becker, Pete (2006). The C++ Standard Library Extensions : A Tutorial and Reference. Addison-Wesley. ISBN 0-321-41299-0.

Brokken, Frank (2010). C++ Annotations. University of Groningen. ISBN 978-90-367-0470-0. Archived from the original on 28 April 2010. Retrieved 28 April 2010.

Coplien, James O. (1994) [reprinted with corrections, original year of publication 1992]. Advanced C++: Programming Styles and Idioms. Addison-Wesley. ISBN 0-201-54855-0.

Dewhurst, Stephen C. (2005). C++ Common Knowledge: Essential Intermediate Programming. Addison-Wesley. ISBN 0-321-32192-8.

Information Technology Industry Council (15 October 2003). Programming languages – C++ (Second ed.). Geneva: ISO/IEC. 14882:2003(E).

Josuttis, Nicolai M. (2012). The C++ Standard Library, A Tutorial and Reference (Second ed.). Addison-Wesley. ISBN 978-0-321-62321-8.

Koenig, Andrew; Moo, Barbara E. (2000). Accelerated C++ – Practical Programming by Example. Addison-Wesley. ISBN 0-201-70353-X.

Lippman, Stanley B.; Lajoie, Josée; Moo, Barbara E. (2011). C++ Primer (Fifth ed.). Addison-Wesley. ISBN 978-0-321-71411-4.
Lippman, Stanley B. (1996). Inside the C++ Object Model. Addison-Wesley. ISBN 0-201-83454-5.

Meyers, Scott (2005). Effective C++ (Third ed.). Addison-Wesley. ISBN 0-321-33487-6.
Stroustrup, Bjarne (2013). The C++ Programming Language (Fourth ed.). Addison-Wesley. ISBN 978-0-321-56384-2.

Stroustrup, Bjarne (1994). The Design and Evolution of C++. Addison-Wesley. ISBN 0-201-54330-3.
Stroustrup, Bjarne (2014). Programming: Principles and Practice Using C++ (Second ed.). Addison-Wesley. ISBN 978-0-321-99278-9.

Sutter, Herb (2001). More Exceptional C++: 40 New Engineering Puzzles, Programming Problems, and Solutions. Addison-Wesley. ISBN 0-201-70434-X.
Sutter, Herb (2004). Exceptional C++ Style. Addison-Wesley. ISBN 0-201-76042-8.

Vandevoorde, David; Josuttis, Nicolai M. (2003). C++ Templates: The complete Guide. Addison-Wesley. ISBN 0-201-73484-2.
External links[edit]
JTC1/SC22/WG21 – the ISO/IEC C++ Standard Working Group

Standard C++ Foundation – a non-profit organization that promotes the use and understanding of standard C++. Bjarne Stroustrup is a director of the organization.
C++ Keywords
C++ Expressions
C++ Operator Precedence

C++ Expressions
C++ Operator Precedence
C++ at Wikipedia's sister projects:Media from CommonsQuotations from WikiquoteTextbooks from WikibooksResources from Wikiversity
vteC++
C++
Outline
C++98
C++03
C++11
C++14
C++17
C++20
C++23
C++26
Libraries

C++11
C++14
C++17
C++20
C++23
C++26
Libraries
Features
Classes
Concepts
Copy constructor
Exception handling (Exception safety)
Function overloading
Move semantics
new and delete
Operator overloading
Operators
References
Templates
Virtual functions

Operators
References
Templates
Virtual functions
Standard Library
I/O Streams
Smart pointers
STL
Strings
Ideas
As-if rule
Barton–Nackman trick
Curiously recurring template pattern
Most vexing parse
One Definition Rule

Most vexing parse
One Definition Rule
Resource acquisition is initialization
Rule of three
Slicing
Special member functions
Substitution failure is not an error
Template metaprogramming
Compilers
Comparison of C++ compilers
Borland C++

Compilers
Comparison of C++ compilers
Borland C++
Borland Turbo C++
C++Builder
Clang
GCC
Intel C++ Compiler
Oracle Solaris Studio
Visual C++
Watcom C/C++
IDEs
Comparison of C IDEs
Anjuta
CLion
Code::Blocks
CodeLite
Dev-C++
Eclipse
Geany
NetBeans

CodeLite
Dev-C++
Eclipse
Geany
NetBeans
KDevelop
Qt Creator
Visual Studio
Superset languages
Objective-C++
C++/CLI
C++/CX
C++/WinRT
Ch
SYCL
Dialects
Embedded C++
Relative toother languages
Comparison of programming languages

Comparison of programming languages
Comparison of Java and C++
Comparison of ALGOL 68 and C++
Compatibility of C and C++
Criticism of C++
Designer
Bjarne Stroustrup
Category
vteProgramming languages
Comparison
Timeline
History
Ada
ALGOL
Simula
APL

Comparison
Timeline
History
Ada
ALGOL
Simula
APL
Assembly
BASIC
Visual Basic
classic
.NET
C
C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Julia
Kotlin
Lisp
Lua
MATLAB
ML
Pascal
Object Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL

Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Scratch
Shell
Smalltalk
Swift
more...
Lists: Alphabetical
Categorical
Generational
Non-English-based
Category
vteISO standards by standard numberList of ISO standards – ISO romanizations – IEC standards1–9999
1

1
2
3
4
6
7
9
16
17
31
-0
-1
-3
-4
-5
-6
-7
-8
-9
-10
-11
-12
-13
68-1
128
216
217
226
228
233
259
261
262
302
306
361
500
518
519
639
-1
-2
-3
-5
-6
646
657
668
690
704
732
764
838
843
860
898
965
999
1000
1004
1007
1073-1
1073-2
1155
1413
1538

999
1000
1004
1007
1073-1
1073-2
1155
1413
1538
1629
1745
1989
2014
2015
2022
2033
2047
2108
2145
2146
2240
2281
2533
2709
2711
2720
2788
2848
2852
2921
3029
3103
3166
-1
-2
-3
3297
3307
3601
3602
3864
3901
3950
3977
4031
4157
4165
4217
4909
5218

3864
3901
3950
3977
4031
4157
4165
4217
4909
5218
5426
5427
5428
5725
5775
5776
5800
5807
5964
6166
6344
6346
6373
6385
6425
6429
6438
6523
6709
6943
7001
7002
7010
7027
7064
7098
7185
7200
7498
-1
7637
7736
7810
7811
7812
7813
7816
7942
8000
8093

7637
7736
7810
7811
7812
7813
7816
7942
8000
8093
8178
8217
8373
8501-1
8571
8583
8601
8613
8632
8651
8652
8691
8805/8806
8807
8820-5
8859
-1
-2
-3
-4
-5
-6
-7
-8
-8-I
-9
-10
-11
-12
-13
-14
-15
-16
8879
9000/9001
9036
9075
9126
9141
9227
9241
9293

8879
9000/9001
9036
9075
9126
9141
9227
9241
9293
9314
9362
9407
9496
9506
9529
9564
9592/9593
9594
9660
9797-1
9897
9899
9945
9984
9985
9995
10000–19999
10006
10007
10116
10118-3
10160
10161
10165
10179
10206
10218
10279
10303
-11
-21
-22
-28
-238

10206
10218
10279
10303
-11
-21
-22
-28
-238
10383
10585
10589
10628
10646
10664
10746
10861
10957
10962
10967
11073
11170
11172
11179
11404
11544
11783
11784
11785
11801
11889
11898
11940 (-2)
11941
11941 (TR)
11992
12006
12052
12182
12207
12234-2

11941 (TR)
11992
12006
12052
12182
12207
12234-2
12620
13211
-1
-2
13216
13250
13399
13406-2
13450
13485
13490
13567
13568
13584
13616
13816
13818
14000
14031
14224
14289
14396
14443
14496
-2
-3
-6
-10
-11
-12
-14
-17
-20
14617
14644
14649
14651

-10
-11
-12
-14
-17
-20
14617
14644
14649
14651
14698
14764
14882
14971
15022
15189
15288
15291
15398
15408
15444
-3
-9
15445
15438
15504
15511
15686
15693
15706
-2
15707
15897
15919
15924
15926
15926 WIP
15930
15938
16023
16262
16355-1
16485

15926 WIP
15930
15938
16023
16262
16355-1
16485
16612-2
16750
16949 (TS)
17024
17025
17100
17203
17369
17442
17506
17799
18004
18014
18181
18245
18629
18916
19005
19011
19092
-1
-2
19114
19115
19125
19136
19407
19439
19500
19501
19502
19503
19505

19136
19407
19439
19500
19501
19502
19503
19505
19506
19507
19508
19509
19510
19600
19752
19757
19770
19775-1
19794-5
19831
20000–29999
20000
20022
20121
20400
20802
20830
21000
21001
21047
21122
21500
21827
22000
22275
22300
22301
22395
22537
23000

21827
22000
22275
22300
22301
22395
22537
23000
23003
23008
23009
23090-3
23092
23094-1
23094-2
23270
23271
23360
23941
24517
24613
24617
24707
24728
25178
25964
26000
26262
26300
26324
27000 series
27000
27001
27002
27005
27006
27729
28000
29110

27000
27001
27002
27005
27006
27729
28000
29110
29148
29199-2
29500
30000+
30170
31000
32000
37001
38500
39075
40500
42010
45001
50001
55000
56000
80000
Category
vteIEC standardsIEC
60027
60034
60038
60062
60063
60068
60112
60228
60269
60297
60309

60062
60063
60068
60112
60228
60269
60297
60309
60320
60364
60446
60559
60601
60870
60870-5
60870-6
60906-1
60908
60929
60958
61030
61131
61131-3
61131-9
61158
61162
61334
61355
61360
61400
61499
61508
61511
61784
61850
61851
61883
61960
61968
61970

61511
61784
61850
61851
61883
61960
61968
61970
62014-4
62026
62056
62061
62196
62262
62264
62304
62325
62351
62365
62366
62379
62386
62455
62680
62682
62700
63110
63119
63382
ISO/IEC
646
1989
2022
4909
5218
6429
6523
7810
7811
7812
7813
7816
7942

4909
5218
6429
6523
7810
7811
7812
7813
7816
7942
8613
8632
8652
8859
9126
9293
9496
9529
9592
9593
9899
9945
9995
10021
10116
10165
10179
10279
10646
10967
11172
11179
11404
11544
11801
12207
13250
13346
13522-5
13568
13816
13818
14443
14496
14651

13346
13522-5
13568
13816
13818
14443
14496
14651
14882
15288
15291
15408
15444
15445
15504
15511
15693
15897
15938
16262
16485
17024
17025
18004
18014
18181
19752
19757
19770
19788
20000
20802
21000
21827
22275
22537
23000
23003
23008
23270
23360

21827
22275
22537
23000
23003
23008
23270
23360
24707
24727
24744
24752
26300
27000
27000-series
27002
27040
29110
29119
33001
38500
39075
42010
80000
81346
Related
International Electrotechnical Commission

Related
International Electrotechnical Commission
Authority control databases NationalGermanyUnited StatesFranceBnF dataCzech RepublicSpainIsraelOtherIdRef
Retrieved from "https://en.wikipedia.org/w/index.php?title=C%2B%2B&oldid=1249147904"

Categories: C++Algol programming language familyC++ programming language familyClass-based programming languagesCross-platform softwareHigh-level programming languagesObject-oriented programming languagesProgramming languages created in

languagesProgramming languages created in 1983Programming languages with an ISO standardStatically typed programming languagesCompiled programming languagesHidden categories: Webarchive template wayback linksArticles with short descriptionShort

wayback linksArticles with short descriptionShort description matches WikidataWikipedia pages move-protected due to vandalismUse dmy dates from January 2020Articles containing potentially dated statements from 1997All articles containing potentially

from 1997All articles containing potentially dated statementsAll articles with unsourced statementsArticles with unsourced statements from February 2024Articles containing potentially dated statements from December 2022Articles with example C++

from December 2022Articles with example C++ codeArticles with excerpts

This page was last edited on 3 October 2024, at 13:16 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License;

additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policy
About Wikipedia
Disclaimers

Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view

Go (programming language) - Wikipedia
Jump to content
Main menu
Main menu
move to sidebar
hide
Navigation
Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us
Contribute
HelpLearn to editCommunity portalRecent changesUpload file

Search
Search
Donate
Appearance
Create account
Log in
Personal tools
Create account Log in
Pages for logged out editors learn more
ContributionsTalk
Contents
move to sidebar
hide
(Top)
1
History
Toggle History subsection
1.1
Branding and styling
1.2

1.1
Branding and styling
1.2
Generics
1.3
Versioning
2
Design
Toggle Design subsection
2.1
Syntax
2.2
Types
2.2.1
Interface system
2.2.2
Generic code using parameterized types
2.2.3
Enumerated types
2.3
Package system
2.4

2.2.3
Enumerated types
2.3
Package system
2.4
Concurrency: goroutines and channels
2.4.1
Suitability for parallel programming
2.4.2
Lack of data race safety
2.5
Binaries
2.6
Omissions
3
Style
4
Tools
5
Examples
Toggle Examples subsection
5.1

4
Tools
5
Examples
Toggle Examples subsection
5.1
Hello world
5.2
Concurrency
5.3
Testing
5.4
Web app
6
Applications
7
Reception
8
Naming dispute
9
See also
10
Notes
11
References
12
Further reading
13
External links
Toggle the table of contents

13
External links
Toggle the table of contents
Go (programming language)
57 languages

AfrikaansالعربيةAzərbaycancaবাংলা閩南語 / Bân-lâm-gúБеларускаяБългарскиBrezhonegCatalàČeštinaDanskDeutschEestiΕλληνικάEspañolEuskaraفارسیFrançaisગુજરાતી한국어ՀայերենHrvatskiBahasa IndonesiaÍslenskaItalianoעבריתКыргызчаLatviešuMagyarമലയാളംBahasa

MelayuNederlands日本語Norsk bokmålOʻzbekcha / ўзбекчаPolskiPortuguêsQaraqalpaqshaRomânăРусскийShqipසිංහලSimple EnglishSlovenčinaSlovenščinaСрпски / srpskiSuomiSvenskaதமிழ்ТоҷикӣTürkçeУкраїнськаاردوTiếng Việt吴语粵語中文

Edit links
ArticleTalk
English
ReadEditView history
Tools
Tools
move to sidebar
hide
Actions
ReadEditView history
General

hide
Actions
ReadEditView history
General
What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata item
Print/export
Download as PDFPrintable version

Print/export
Download as PDFPrintable version
In other projects
Wikimedia Commons
Appearance
move to sidebar
hide
From Wikipedia, the free encyclopedia
Programming language

Programming language
For the 2003 agent-based programming language, see Go! (programming language).

GoParadigmMulti-paradigm: concurrent imperative, functional[1] object-oriented[2][3]Designed byRobert GriesemerRob PikeKen Thompson[4]DeveloperThe Go Authors[5]First appearedNovember 10, 2009; 14 years ago (2009-11-10)Stable release1.23.2

/ 1 October 2024; 11 days ago (1 October 2024)

Typing disciplineInferred, static, strong,[6] structural,[7][8] nominalMemory managementGarbage collectionImplementation languageGo, Assembly language (gc); C++ (gofrontend)OSDragonFly BSD, FreeBSD, Linux, macOS, NetBSD, OpenBSD,[9] Plan 9,[10]

Linux, macOS, NetBSD, OpenBSD,[9] Plan 9,[10] Solaris, WindowsLicense3-clause BSD[5] + patent grant[11]Filename extensions.goWebsitego.devMajor implementationsgc, gofrontendInfluenced byC, Oberon-2, Limbo, Active Oberon, communicating sequential

Limbo, Active Oberon, communicating sequential processes, Pascal, Oberon, Smalltalk, Newsqueak, Modula-2, Alef, APL, BCPL, Modula, occamInfluencedCrystal, V

Go is a statically typed, compiled high-level programming language designed at Google[12] by Robert Griesemer, Rob Pike, and Ken Thompson.[4] It is syntactically similar to C, but also has memory safety, garbage collection, structural typing,[7] and

garbage collection, structural typing,[7] and CSP-style concurrency.[13] It is often referred to as Golang because of its former domain name, golang.org, but its proper name is Go.[14]

There are two major implementations:
Google's self-hosting[15] "gc" compiler toolchain, targeting multiple operating systems and WebAssembly.[16]

gofrontend, a frontend to other compilers, with the libgo library. With GCC the combination is gccgo;[17] with LLVM the combination is gollvm.[18][a]

A third-party source-to-source compiler, GopherJS,[20] compiles Go to JavaScript for front-end web development.
History[edit]

Go was designed at Google in 2007 to improve programming productivity in an era of multicore, networked machines and large codebases.[21] The designers wanted to address criticisms of other languages in use at Google, but keep their useful

languages in use at Google, but keep their useful characteristics:[22]

Static typing and run-time efficiency (like C)
Readability and usability (like Python)[23]
High-performance networking and multiprocessing
Its designers were primarily motivated by their shared dislike of C++.[24][25][26]

Go was publicly announced in November 2009,[27] and version 1.0 was released in March 2012.[28][29] Go is widely used in production at Google[30] and in many other organizations and open-source projects.
Branding and styling[edit]

Branding and styling[edit]
Mascot of Go programming language is a Gopher shown above.
The Gopher mascot was introduced in 2009 for the open source launch of the language.  The design, by Renée French, borrowed from a c. 2000 WFMU promotion.[31]

In November 2016, the Go and Go Mono fonts were released by type designers Charles Bigelow and Kris Holmes specifically for use by the Go project. Go is a humanist sans-serif resembling Lucida Grande, and Go Mono is monospaced. Both fonts adhere to

and Go Mono is monospaced. Both fonts adhere to the WGL4 character set and were designed to be legible with a large x-height and distinct letterforms. Both Go and Go Mono adhere to the DIN 1450 standard by having a slashed zero, lowercase l with a

by having a slashed zero, lowercase l with a tail, and an uppercase I with serifs.[32][33]

In April 2018, the original logo was redesigned by brand designer Adam Smith. The new logo is a modern, stylized GO slanting right with trailing streamlines. (The Gopher mascot remained the same.[34])
Generics[edit]

The lack of support for generic programming in initial versions of Go drew considerable criticism.[35] The designers expressed an openness to generic programming and noted that built-in functions were in fact type-generic, but are treated as special

in fact type-generic, but are treated as special cases; Pike called this a weakness that might be changed at some point.[36] The Google team built at least one compiler for an experimental Go dialect with generics, but did not release it.[37]

In August 2018, the Go principal contributors published draft designs for generic programming and error handling and asked users to submit feedback.[38][39] However, the error handling proposal was eventually abandoned.[40]

In June 2020, a new draft design document[41] was published that would add the necessary syntax to Go for declaring generic functions and types. A code translation tool, go2go, was provided to allow users to try the new syntax, along with a

allow users to try the new syntax, along with a generics-enabled version of the online Go Playground.[42]

Generics were finally added to Go in version 1.18 on March 15, 2022.[43]
Versioning[edit]

Versioning[edit]
Go 1 guarantees compatibility[44] for the language specification and major parts of the standard library. All versions up through the current Go 1.23 release[45] have maintained this promise.

Go does not follow SemVer; rather, each major Go release is supported until there are two newer major releases. Unlike most software, Go calls the second number in a version the major, i.e., in 1.x x is the major version. [46] This is because Go

x is the major version. [46] This is because Go plans to never reach 2.0, given that compatibility is one of language's major selling points.[47]

Design[edit]
Go is influenced by C (especially the Plan 9 dialect[48][failed verification – see discussion]), but with an emphasis on greater simplicity and safety. It consists of:

A syntax and environment adopting patterns more common in dynamic languages:[49]
Optional concise variable declaration and initialization through type inference (x := 0 instead of var x int = 0; or var x = 0;)
Fast compilation[50]

Fast compilation[50]
Remote package management (go get)[51] and online package documentation[52]
Distinctive approaches to particular problems:
Built-in concurrency primitives: light-weight processes (goroutines), channels, and the select statement

An interface system in place of virtual inheritance, and type embedding instead of non-virtual inheritance
A toolchain that, by default, produces statically linked native binaries without external Go dependencies

A desire to keep the language specification simple enough to hold in a programmer's head,[53] in part by omitting features that are common in similar languages.
Syntax[edit]

Go's syntax includes changes from C aimed at keeping code concise and readable. A combined declaration/initialization operator was introduced that allows the programmer to write i := 3 or s := "Hello, world!", without specifying the types of

"Hello, world!", without specifying the types of variables used. This contrasts with C's int i = 3; and const char *s = "Hello, world!";.

Semicolons still terminate statements;[b] but are implicit when the end of a line occurs.[c]

Methods may return multiple values, and returning a result, err pair is the conventional way a method indicates an error to its caller in Go.[d] Go adds literal syntaxes for initializing struct parameters by name and for initializing maps and

parameters by name and for initializing maps and slices. As an alternative to C's three-statement for loop, Go's range expressions allow concise iteration over arrays, slices, strings, maps, and channels.[56]

Types[edit]

Go has a number of built-in types, including numeric ones (byte, int64, float32, etc.), Booleans, and byte strings (string). Strings are immutable; built-in operators and keywords (rather than functions) provide concatenation, comparison, and UTF-8

provide concatenation, comparison, and UTF-8 encoding/decoding.[57] Record types can be defined with the struct keyword.[58]

For each type T and each non-negative integer constant n, there is an array type denoted [n]T; arrays of differing lengths are thus of different types. Dynamic arrays are available as "slices", denoted []T for some type T. These have a length and a

[]T for some type T. These have a length and a capacity specifying when new memory needs to be allocated to expand the array. Several slices may share their underlying memory.[36][59][60]

Pointers are available for all types, and the pointer-to-T type is denoted *T. Address-taking and indirection use the & and * operators, as in C, or happen implicitly through the method call or attribute access syntax.[61][62] There is no pointer

access syntax.[61][62] There is no pointer arithmetic,[e] except via the special unsafe.Pointer type in the standard library.[63]

For a pair of types K, V, the type map[K]V is the type mapping type-K keys to type-V values, though Go Programming Language specification does not give any performance guarantees or implementation requirements for map types. Hash tables are built

requirements for map types. Hash tables are built into the language, with special syntax and built-in functions. chan  T is a channel that allows sending values of type T between concurrent Go processes.[64]

Aside from its support for interfaces, Go's type system is nominal: the type keyword can be used to define a new named type, which is distinct from other named types that have the same layout (in the case of a struct, the same members in the same

case of a struct, the same members in the same order). Some conversions between types (e.g., between the various integer types) are pre-defined and adding a new type may define additional conversions, but conversions between named types must always

but conversions between named types must always be invoked explicitly.[65] For example, the type keyword can be used to define a type for IPv4 addresses, based on 32-bit unsigned integers as follows:

type ipv4addr uint32
With this type definition, ipv4addr(x) interprets the uint32 value x as an IP address. Simply assigning x to a variable of type ipv4addr is a type error.[66]

Constant expressions may be either typed or "untyped"; they are given a type when assigned to a typed variable if the value they represent passes a compile-time check.[67]

Function types are indicated by the func keyword; they take zero or more parameters and return zero or more values, all of which are typed. The parameter and return values determine a function type; thus, func(string, int32) (int, error) is the type

func(string, int32) (int, error) is the type of functions that take a string and a 32-bit signed integer, and return a signed integer (of default width) and a value of the built-in interface type error.[68]

Any named type has a method set associated with it. The IP address example above can be extended with a method for checking whether its value is a known standard:
// ZeroBroadcast reports whether addr is 255.255.255.255.

func (addr ipv4addr) ZeroBroadcast() bool {
return addr == 0xFFFFFFFF
}

return addr == 0xFFFFFFFF
}
Due to nominal typing, this method definition adds a method to ipv4addr, but not on uint32. While methods have special definition and call syntax, there is no distinct method type.[69]
Interface system[edit]

Interface system[edit]
Go provides two features that replace class inheritance.[citation needed]
The first is embedding, which can be viewed as an automated form of composition.[70]

The second are its interfaces, which provides runtime polymorphism.[71]: 266  Interfaces are a class of types and provide a limited form of structural typing in the otherwise nominal type system of Go. An object which is of an interface type is also

An object which is of an interface type is also of another type, much like C++ objects being simultaneously of a base and derived class. Go interfaces were designed after protocols from the Smalltalk programming language.[72] Multiple sources use

programming language.[72] Multiple sources use the term duck typing when describing Go interfaces.[73][74] Although the term duck typing is not precisely defined and therefore not wrong, it usually implies that type conformance is not statically

implies that type conformance is not statically checked. Because conformance to a Go interface is checked statically by the Go compiler (except when performing a type assertion), the Go authors prefer the term structural typing.[75]

The definition of an interface type lists required methods by name and type. Any object of type T for which functions exist matching all the required methods of interface type I is an object of type I as well. The definition of type T need not (and

I as well. The definition of type T need not (and cannot) identify type I. For example, if Shape, Square and Circle are defined as

import "math"
type Shape interface {
Area() float64
}
type Square struct { // Note: no "implements" declaration
side float64
}
func (sq Square) Area() float64 { return sq.side * sq.side }

type Circle struct { // No "implements" declaration here either
radius float64
}
func (c Circle) Area() float64 { return math.Pi * math.Pow(c.radius, 2) }

then both a Square and a Circle are implicitly a Shape and can be assigned to a Shape-typed variable.[71]: 263–268  In formal language, Go's interface system provides structural rather than nominal typing. Interfaces can embed other interfaces with

Interfaces can embed other interfaces with the effect of creating a combined interface that is satisfied by exactly the types that implement the embedded interface and any methods that the newly defined interface adds.[71]: 270

The Go standard library uses interfaces to provide genericity in several places, including the input/output system that is based on the concepts of Reader and Writer.[71]: 282–283

Besides calling methods via interfaces, Go allows converting interface values to other types with a run-time type check. The language constructs to do so are the type assertion,[76] which checks against a single potential type:var shp Shape =

against a single potential type:var shp Shape = Square{5}

square, ok := shp.(Square) // Asserts Square type on shp, should work
if ok {
fmt.Printf("%#v\n", square)
} else {
fmt.Println("Can't print shape as Square")
}

fmt.Println("Can't print shape as Square")
}
and the type switch,[77] which checks against multiple types:[citation needed]func (sq Square) Diagonal() float64 { return sq.side * math.Sqrt2 }
func (c Circle) Diameter() float64 { return 2 * c.radius }

func LongestContainedLine(shp Shape) float64 {
switch v := shp.(type) {
case Square:
return v.Diagonal() // Or, with type assertion, shp.(Square).Diagonal()
case Circle:
return v.Diameter() // Or, with type assertion, shp.(Circle).Diameter()

default:
return 0 // In practice, this should be handled with errors
}
}

The empty interface interface{} is an important base case because it can refer to an item of any concrete type. It is similar to the Object class in Java or C# and is satisfied by any type, including built-in types like int.[71]: 284  Code using the

built-in types like int.[71]: 284  Code using the empty interface cannot simply call methods (or built-in operators) on the referred-to object, but it can store the interface{} value, try to convert it to a more useful type via a type assertion or

it to a more useful type via a type assertion or type switch, or inspect it with Go's reflect package.[78] Because interface{} can refer to any value, it is a limited way to escape the restrictions of static typing, like void* in C but with

of static typing, like void* in C but with additional run-time type checks.[citation needed]

The interface{} type can be used to model structured data of any arbitrary schema in Go, such as JSON or YAML data, by representing it as a map[string]interface{} (map of string to empty interface). This recursively describes data in the form of a

This recursively describes data in the form of a dictionary with string keys and values of any type.[79]

Interface values are implemented using pointer to data and a second pointer to run-time type information.[80] Like some other types implemented using pointers in Go, interface values are nil if uninitialized.[81]

Generic code using parameterized types[edit]
Since version 1.18, Go supports generic code using parameterized types.[82]

Functions and types now have the ability to be generic using type parameters. These type parameters are specified within square brackets, right after the function or type name.[83] The compiler transforms the generic function or type into

transforms the generic function or type into non-generic by substituting type arguments for the type parameters provided, either explicitly by the user or type inference by the compiler.[84] This transformation process is referred to as type

transformation process is referred to as type instantiation.[85]

Interfaces now can define a set of types (known as type set) using | (Union) operator, as well as a set of methods. These changes were made to support type constraints in generics code. For a generic function or type, a constraint can be thought of

function or type, a constraint can be thought of as the type of the type argument: a meta-type. This new ~T syntax will be the first use of ~ as a token in Go. ~T means the set of all types whose underlying type is T.[86]type Number interface {

~int | ~float64 | ~float32 | ~int32 | ~int64
}
func Add[T Number](nums ...T) T {
var sum T
for _, v := range nums {
sum += v
}
return sum
}
func main() {
add := Add[int]             // Type instantiation
println(add(1, 2, 3, 4, 5)) // 15

println(add(1, 2, 3, 4, 5)) // 15
res := Add(1.1, 2.2, 3.3, 4.4, 5.5) // Type Inference
println(res)                        // +1.650000e+001
}
Enumerated types[edit]
This section is an excerpt from Enumerated type § Go.[edit]

Go uses the iota keyword to create enumerated constants.[87]
type ByteSize float64
const (
_           = iota // ignore first value by assigning to blank identifier
KB ByteSize = 1 << (10 * iota)
MB
GB
)
Package system[edit]

In Go's package system, each package has a path (e.g., "compress/bzip2" or "golang.org/x/net/html") and a name (e.g., bzip2 or html). References to other packages' definitions must always be prefixed with the other package's name, and only the

with the other package's name, and only the capitalized names from other packages are accessible: io.Reader is public but bzip2.reader is not.[88] The go get command can retrieve packages stored in a remote repository[89] and developers are

in a remote repository[89] and developers are encouraged to develop packages inside a base path corresponding to a source repository (such as example.com/user_name/package_name) to reduce the likelihood of name collision with future additions to the

of name collision with future additions to the standard library or other external libraries.[90]

Concurrency: goroutines and channels[edit]

The Go language has built-in facilities, as well as library support, for writing concurrent programs. Concurrency refers not only to CPU parallelism, but also to asynchrony: letting slow operations like a database or network read run while the

like a database or network read run while the program does other work, as is common in event-based servers.[91]

The primary concurrency construct is the goroutine, a type of green thread.[92]: 280–281  A function call prefixed with the go keyword starts a function in a new goroutine. The language specification does not specify how goroutines should be

does not specify how goroutines should be implemented, but current implementations multiplex a Go process's goroutines onto a smaller set of operating-system threads, similar to the scheduling performed in Erlang.[93]: 10

While a standard library package featuring most of the classical concurrency control structures (mutex locks, etc.) is available,[93]: 151–152  idiomatic concurrent programs instead prefer channels, which send messages between goroutines.[94]

which send messages between goroutines.[94] Optional buffers store messages in FIFO order[95]: 43  and allow sending goroutines to proceed before their messages are received.[92]: 233

Channels are typed, so that a channel of type chan T can only be used to transfer messages of type T. Special syntax is used to operate on them; <-ch is an expression that causes the executing goroutine to block until a value comes in over the

to block until a value comes in over the channel ch, while ch <- x sends the value x (possibly blocking until another goroutine receives the value). The built-in switch-like select statement can be used to implement non-blocking communication on

used to implement non-blocking communication on multiple channels; see below for an example. Go has a memory model describing how goroutines must use channels or other operations to safely share data.[96]

The existence of channels does not by itself set Go apart from actor model-style concurrent languages like Erlang, where messages are addressed directly to actors (corresponding to goroutines). In the actor model, channels are themselves actors,

the actor model, channels are themselves actors, therefore addressing a channel just means to address an actor. The actor style can be simulated in Go by maintaining a one-to-one correspondence between goroutines and channels, but the language

between goroutines and channels, but the language allows multiple goroutines to share a channel or a single goroutine to send and receive on multiple channels.[93]: 147

From these tools one can build concurrent constructs like worker pools, pipelines (in which, say, a file is decompressed and parsed as it downloads), background calls with timeout, "fan-out" parallel calls to a set of services, and others.[97]

calls to a set of services, and others.[97] Channels have also found uses further from the usual notion of interprocess communication, like serving as a concurrency-safe list of recycled buffers,[98] implementing coroutines (which helped inspire the

implementing coroutines (which helped inspire the name goroutine),[99] and implementing iterators.[100]

Concurrency-related structural conventions of Go (channels and alternative channel inputs) are derived from Tony Hoare's communicating sequential processes model. Unlike previous concurrent programming languages such as Occam or Limbo (a language on

languages such as Occam or Limbo (a language on which Go co-designer Rob Pike worked),[101] Go does not provide any built-in notion of safe or verifiable concurrency.[102] While the communicating-processes model is favored in Go, it is not the only

model is favored in Go, it is not the only one: all goroutines in a program share a single address space. This means that mutable objects and pointers can be shared between goroutines; see § Lack of data race safety, below.

Suitability for parallel programming[edit]

Although Go's concurrency features are not aimed primarily at parallel processing,[91] they can be used to program shared-memory multi-processor machines. Various studies have been done into the effectiveness of this approach.[103] One of these

effectiveness of this approach.[103] One of these studies compared the size (in lines of code) and speed of programs written by a seasoned programmer not familiar with the language and corrections to these programs by a Go expert (from Google's

to these programs by a Go expert (from Google's development team), doing the same for Chapel, Cilk and Intel TBB. The study found that the non-expert tended to write divide-and-conquer algorithms with one go statement per recursion, while the expert

one go statement per recursion, while the expert wrote distribute-work-synchronize programs using one goroutine per processor core. The expert's programs were usually faster, but also longer.[104]

Lack of data race safety[edit]

Go's approach to concurrency can be summarized as "don't communicate by sharing memory; share memory by communicating".[105] There are no restrictions on how goroutines access shared data, making data races possible. Specifically, unless a program

races possible. Specifically, unless a program explicitly synchronizes via channels or other means, writes from one goroutine might be partly, entirely, or not at all visible to another, often with no guarantees about ordering of writes.[102]

with no guarantees about ordering of writes.[102] Furthermore, Go's internal data structures like interface values, slice headers, hash tables, and string headers are not immune to data races, so type and memory safety can be violated in

so type and memory safety can be violated in multithreaded programs that modify shared instances of those types without synchronization.[106][107] Instead of language support, safe concurrent programming thus relies on conventions; for example,

thus relies on conventions; for example, Chisnall recommends an idiom called "aliases xor mutable", meaning that passing a mutable value (or pointer) over a channel signals a transfer of ownership over the value to its receiver.[93]: 155  The gc

over the value to its receiver.[93]: 155  The gc toolchain has an optional data race detector that can check for unsynchronized access to shared memory during runtime since version 1.1,[108] additionally a best-effort race detector is also included

a best-effort race detector is also included by default since version 1.6 of the gc runtime for access to the map data type.[109]

Binaries[edit]
The linker in the gc toolchain creates statically linked binaries by default; therefore all Go binaries include the Go runtime.[110][111]
Omissions[edit]

Go deliberately omits certain features common in other languages, including (implementation) inheritance, assertions,[f] pointer arithmetic,[e] implicit type conversions, untagged unions,[g] and tagged unions.[h] The designers added only those

tagged unions.[h] The designers added only those facilities that all three agreed on.[114]

Of the omitted language features, the designers explicitly argue against assertions and pointer arithmetic, while defending the choice to omit type inheritance as giving a more useful language, encouraging instead the use of interfaces to achieve

instead the use of interfaces to achieve dynamic dispatch[i] and composition to reuse code. Composition and delegation are in fact largely automated by struct embedding; according to researchers Schmager et al., this feature "has many of the

Schmager et al., this feature "has many of the drawbacks of inheritance: it affects the public interface of objects, it is not fine-grained (i.e, no method-level control over embedding), methods of embedded objects cannot be hidden, and it is

of embedded objects cannot be hidden, and it is static", making it "not obvious" whether programmers will overuse it to the extent that programmers in other languages are reputed to overuse inheritance.[70]

Exception handling was initially omitted in Go due to lack of a "design that gives value proportionate to the complexity".[115] An exception-like panic/recover mechanism that avoids the usual try-catch control structure was proposed[116] and

try-catch control structure was proposed[116] and released in the March 30, 2010 snapshot.[117] The Go authors advise using it for unrecoverable errors such as those that should halt an entire program or server request, or as a shortcut to propagate

or server request, or as a shortcut to propagate errors up the stack within a package.[118][119] Across package boundaries, Go includes a canonical error type, and multi-value returns using this type are the standard idiom.[4]

Style[edit]
The Go authors put substantial effort into influencing the style of Go programs:

Indentation, spacing, and other surface-level details of code are automatically standardized by the gofmt tool. It uses tabs for indentation and blanks for alignment. Alignment assumes that an editor is using a fixed-width font.[120] golint does

is using a fixed-width font.[120] golint does additional style checks automatically, but has been deprecated and archived by the Go maintainers.[121]

Tools and libraries distributed with Go suggest standard approaches to things like API documentation (godoc),[122] testing (go test), building (go build), package management (go get), and so on.

Go enforces rules that are recommendations in other languages, for example banning cyclic dependencies, unused variables[123] or imports,[124] and implicit type conversions.

The omission of certain features (for example, functional-programming shortcuts like map and Java-style try/finally blocks) tends to encourage a particular explicit, concrete, and imperative programming style.

On day one the Go team published a collection of Go idioms,[122] and later also collected code review comments,[125] talks,[126] and official blog posts[127] to teach Go style and coding philosophy.
Tools[edit]

Tools[edit]
The main Go distribution includes tools for building, testing, and analyzing code:
go build, which builds Go binaries using only information in the source files themselves, no separate makefiles

go test, for unit testing and microbenchmarks as well as fuzzing
go fmt, for formatting code
go install, for retrieving and installing remote packages
go vet, a static analyzer looking for potential errors in code

go run, a shortcut for building and executing code
godoc, for displaying documentation or serving it via HTTP
gorename, for renaming variables, functions, and so on in a type-safe way
go generate, a standard way to invoke code generators

go mod, for creating a new module, adding dependencies, upgrading dependencies, etc.

It also includes profiling and debugging support, fuzzing capabilities to detect bugs, runtime instrumentation (for example, to track garbage collection pauses), and a data race detector.

Another tool maintained by the Go team but is not included in Go distributions is gopls, a language server that provides IDE features such as intelligent code completion to Language Server Protocol compatible editors.[128]

An ecosystem of third-party tools adds to the standard distribution, such as gocode, which enables code autocompletion in many text editors, goimports, which automatically adds/removes package imports as needed, and errcheck, which detects code that

as needed, and errcheck, which detects code that might unintentionally ignore errors.

Examples[edit]
Hello world[edit]
package main
import "fmt"
func main() {
fmt.Println("hello world")
}
where "fmt" is the package for formatted I/O, similar to C's C file input/output.[129]
Concurrency[edit]

The following simple program demonstrates Go's concurrency features to implement an asynchronous program. It launches two lightweight threads ("goroutines"): one waits for the user to type some text, while the other implements a timeout. The select

while the other implements a timeout. The select statement waits for either of these goroutines to send a message to the main routine, and acts on the first message to arrive (example adapted from David Chisnall's book).[93]: 152

package main
import (
"fmt"
"time"
)
func readword(ch chan string) {
fmt.Println("Type a word, then hit Enter.")
var word string
fmt.Scanf("%s", &word)
ch <- word
}
func timeout(t chan bool) {
time.Sleep(5 * time.Second)
t <- false
}
func main() {

t <- false
}
func main() {
t := make(chan bool)
go timeout(t)
ch := make(chan string)
go readword(ch)
select {
case word := <-ch:
fmt.Println("Received", word)
case <-t:
fmt.Println("Timeout.")
}
}
Testing[edit]

fmt.Println("Timeout.")
}
}
Testing[edit]
The testing package provides support for automated testing of go packages.[130] Target function example:
func ExtractUsername(email string) string {
at := strings.Index(email, "@")
return email[:at]
}

return email[:at]
}
Test code (note that assert keyword is missing in Go; tests live in <filename>_test.go at the same package):
import (
"testing"
)
func TestExtractUsername(t *testing.T) {
t.Run("withoutDot", func(t *testing.T) {

t.Run("withoutDot", func(t *testing.T) {
username := ExtractUsername("r@google.com")
if username != "r" {
t.Fatalf("Got: %v\n", username)
}
})
t.Run("withDot", func(t *testing.T) {
username := ExtractUsername("jonh.smith@example.com")

if username != "jonh.smith" {
t.Fatalf("Got: %v\n", username)
}
})
}
It is possible to run tests in parallel.
Web app[edit]
The net/http package provides support for creating web applications.

This example would show "Hello world!" when localhost:8080 is visited.
package main
import (
"fmt"
"log"
"net/http"
)
func helloFunc(w http.ResponseWriter, r *http.Request) {
fmt.Fprintf(w, "Hello world!")
}
func main() {

fmt.Fprintf(w, "Hello world!")
}
func main() {
http.HandleFunc("/", helloFunc)
log.Fatal(http.ListenAndServe(":8080", nil))
}
Applications[edit]

}
Applications[edit]
Go has found widespread adoption in various domains due to its robust standard library and ease of use.[131]

Popular applications include: Caddy, a web server that automates the process of setting up HTTPS,[132] Docker, which provides a platform for containerization, aiming to ease the complexities of software development and deployment,[133] Kubernetes,

development and deployment,[133] Kubernetes, which automates the deployment, scaling, and management of containerized applications,[134] CockroachDB, a distributed SQL database engineered for scalability and strong consistency,[135] and Hugo, a

and strong consistency,[135] and Hugo, a static site generator that prioritizes speed and flexibility, allowing developers to create websites efficiently.[136]

Reception[edit]

The interface system, and the deliberate omission of inheritance, were praised by Michele Simionato, who likened these characteristics to those of Standard ML, calling it "a shame that no popular language has followed [this] particular route".[137]

Dave Astels at Engine Yard wrote in 2009:[138]
Go is extremely easy to dive into. There are a minimal number of fundamental language concepts and the syntax is clean and designed to be clear and unambiguous.

Go is still experimental and still a little rough around the edges.

Go was named Programming Language of the Year by the TIOBE Programming Community Index in its first year, 2009, for having a larger 12-month increase in popularity (in only 2 months, after its introduction in November) than any other language that

in November) than any other language that year, and reached 13th place by January 2010,[139] surpassing established languages like Pascal. By June 2015, its ranking had dropped to below 50th in the index, placing it lower than COBOL and

in the index, placing it lower than COBOL and Fortran.[140] But as of January 2017, its ranking had surged to 13th, indicating significant growth in popularity and adoption. Go was again awarded TIOBE Programming Language of the Year in 2016.[141]

Bruce Eckel has stated:[142]

The complexity of C++ (even more complexity has been added in the new C++), and the resulting impact on productivity, is no longer justified. All the hoops that the C++ programmer had to jump through in order to use a C-compatible language make no

in order to use a C-compatible language make no sense anymore -- they're just a waste of time and effort. Go makes much more sense for the class of problems that C++ was originally intended to solve.

A 2011 evaluation of the language and its gc implementation in comparison to C++ (GCC), Java and Scala by a Google engineer found:

Go offers interesting language features, which also allow for a concise and standardized notation. The compilers for this language are still immature, which reflects in both performance and binary sizes.— R. Hundt[143]

The evaluation got a rebuttal from the Go development team. Ian Lance Taylor, who had improved the Go code for Hundt's paper, had not been aware of the intention to publish his code, and says that his version was "never intended to be an example of

version was "never intended to be an example of idiomatic or efficient Go"; Russ Cox then optimized the Go code, as well as the C++ code, and got the Go code to run almost as fast as the C++ version and more than an order of magnitude faster than

and more than an order of magnitude faster than the code in the paper.[144]

Go's nil combined with the lack of algebraic types leads to difficulty handling failures and base cases.[145][146]
Go does not allow an opening brace to appear on its own line, which forces all Go programmers to use the same brace style.[147]

Go has been criticized for focusing on simplicity of implementation rather than correctness and flexibility; as an example, the language uses POSIX file semantics on all platforms, and therefore provides incorrect information on platforms such as

incorrect information on platforms such as Windows (which do not follow the aforementioned standard).[148][149]

A study showed that it is as easy to make concurrency bugs with message passing as with shared memory, sometimes even more.[150]
Naming dispute[edit]

On November 10, 2009, the day of the general release of the language, Francis McCabe, developer of the Go! programming language (note the exclamation point), requested a name change of Google's language to prevent confusion with his language, which

to prevent confusion with his language, which he had spent 10 years developing.[151] McCabe raised concerns that "the 'big guy' will end up steam-rollering over" him, and this concern resonated with the more than 120 developers who commented on

the more than 120 developers who commented on Google's official issues thread saying they should change the name, with some[152] even saying the issue contradicts Google's motto of: Don't be evil.[153]

On October 12, 2010, the filed public issue ticket was closed by Google developer Russ Cox (@rsc) with the custom status "Unfortunate" accompanied by the following comment: "There are many computing products and services named Go. In the 11 months

products and services named Go. In the 11 months since our release, there has been minimal confusion of the two languages."[153]

See also[edit]
Free and open-source software portal
Fat pointer
Comparison of programming languages
Notes[edit]

Comparison of programming languages
Notes[edit]
^ Using alternative backends reduces compilation speed and Go's control over garbage collection but provides better machine-code optimization.[19]

^ But "To allow complex statements to occupy a single line, a semicolon may be omitted before a closing ) or }".[54]
^ "if the newline comes after a token that could end a statement, [the lexer will] insert a semicolon".[55]

^ Usually, exactly one of the result and error values has a value other than the type's zero value; sometimes both do, as when a read or write can only be partially completed, and sometimes neither, as when a read returns 0 bytes. See Semipredicate

as when a read returns 0 bytes. See Semipredicate problem: Multivalued return.

^ a b Language FAQ "Why is there no pointer arithmetic? Safety ... never derive an illegal address that succeeds incorrectly ... using array indices can be as efficient as ... pointer arithmetic ... simplify the implementation of the garbage

... simplify the implementation of the garbage collector...."[4]

^ Language FAQ "Why does Go not have assertions? ...our experience has been that programmers use them as a crutch to avoid thinking about proper error handling and reporting...."[4]

^ Language FAQ "Why are there no untagged unions...? [they] would violate Go's memory safety guarantees."[4]

^ Language FAQ "Why does Go not have variant types? ... We considered [them but] they overlap in confusing ways with interfaces.... [S]ome of what variant types address is already covered, ... although not as elegantly."[4] (The tag of an interface

not as elegantly."[4] (The tag of an interface type[112] is accessed with a type assertion[113]).

^ Questions "How do I get dynamic dispatch of methods?" and "Why is there no type inheritance?" in the language FAQ.[4]
References[edit]

References[edit]
This article incorporates material from the official Go tutorial, which is licensed under the Creative Commons Attribution 3.0 license.

^ "Codewalk: First-Class Functions in Go". Go supports first class functions, higher-order functions, user-defined function types, function literals, closures, and multiple return values. This rich feature set supports a functional programming style

set supports a functional programming style in a strongly typed language.

^ "Is Go an object-oriented language?". Retrieved April 13, 2019. Although Go has types and methods and allows an object-oriented style of programming, there is no type hierarchy.

^ "Go: code that grows with grace". Retrieved June 24, 2018. Go is Object Oriented, but not in the usual way.
^ a b c d e f g h "Language Design FAQ". The Go Programming Language. January 16, 2010. Retrieved February 27, 2010.

^ a b "Text file LICENSE". The Go Programming Language. Retrieved October 5, 2012.
^ "The Go Programming Language Specification - the Go Programming Language".

^ a b "Why doesn't Go have "implements" declarations?". The Go Programming Language. Retrieved October 1, 2015.

^ Pike, Rob (December 22, 2014). "Rob Pike on Twitter". Archived from the original on April 7, 2022. Retrieved March 13, 2016. Go has structural typing, not duck typing. Full interface satisfaction is checked and required.

^ "lang/go: go-1.4". OpenBSD ports. December 23, 2014. Retrieved January 19, 2015.
^ "Go Porting Efforts". Go Language Resources. cat-v. January 12, 2010. Retrieved January 18, 2010.

^ "Additional IP Rights Grant". The Go Programming Language. Retrieved October 5, 2012.
^ Kincaid, Jason (November 10, 2009). "Google's Go: A New Programming Language That's Python Meets C++". TechCrunch. Retrieved January 18, 2010.

^ Metz, Cade (May 5, 2011). "Google Go boldly goes where no code has gone before". The Register.
^ "Is the language called Go or Golang?". Retrieved March 16, 2022. The language is called Go.

^ "Go 1.5 Release Notes". Retrieved January 28, 2016. The compiler and runtime are now implemented in Go and assembler, without C.
^ "Go 1.11 is Released". August 24, 2018. Retrieved January 1, 2019.

^ "Installing GCC: Configuration". Retrieved December 3, 2011. Ada, Go and Objective-C++ are not default languages
^ "FAQ: Implementation". The Go Programming Language. August 2, 2021. Retrieved August 2, 2021.

^ "gollvm § Is gollvm a replacement for the main Go compiler? (gc)". Git at Google.
^ "A compiler from Go to JavaScript for running Go code in a browser: Gopherjs/Gopherjs". GitHub. Archived from the original on December 12, 2023.

^ "Go at Google: Language Design in the Service of Software Engineering". Retrieved October 8, 2018.
^ Pike, Rob (April 28, 2010). "Another Go at Language Design". Stanford EE Computer Systems Colloquium. Stanford University. Video available.

^ "Frequently Asked Questions (FAQ) - The Go Programming Language". The Go Programming Language. Retrieved February 26, 2016.

^ Binstock, Andrew (May 18, 2011). "Dr. Dobb's: Interview with Ken Thompson". Archived from the original on January 5, 2013. Retrieved February 7, 2014.
^ Pike, Rob (2012). "Less is exponentially more".

^ Pike, Rob (2012). "Less is exponentially more".
^ Griesemer, Robert (2015). "The Evolution of Go".

^ Griesemer, Robert; Pike, Rob; Thompson, Ken; Taylor, Ian; Cox, Russ; Kim, Jini; Langley, Adam. "Hey! Ho! Let's Go!". Google Open Source. Retrieved May 17, 2018.

^ Shankland, Stephen (March 30, 2012). "Google's Go language turns one, wins a spot at YouTube: The lower-level programming language has matured enough to sport the 1.0 version number. And it's being used for real work at Google". News. CNet. CBS

used for real work at Google". News. CNet. CBS Interactive Inc. Retrieved August 6, 2017. Google has released version 1 of its Go programming language, an ambitious attempt to improve upon giants of the lower-level programming world such as C and

the lower-level programming world such as C and C++.

^ "Release History". The Go Programming Language.
^ "Go FAQ: Is Google using Go internally?". Retrieved March 9, 2013.
^ "The Go Gopher - The Go Programming Language". go.dev. Retrieved February 9, 2023.

^ "Go fonts". Go. November 16, 2016. Retrieved March 12, 2019.
^ "Go Font TTFs". GitHub. Retrieved April 2, 2019.
^ "Go's New Brand". The Go Blog. Retrieved November 9, 2018.

^ Merrick, Alice (March 9, 2021). "Go Developer Survey 2020 Results". Go Programming Language. Retrieved March 16, 2022.

^ a b Pike, Rob (September 26, 2013). "Arrays, slices (and strings): The mechanics of 'append'". The Go Blog. Retrieved March 7, 2015.
^ "E2E: Erik Meijer and Robert Griesemer". Channel 9. Microsoft. May 7, 2012.

^ "Go 2 Draft Designs". Retrieved September 12, 2018.
^ "The Go Blog: Go 2 Draft Designs". August 28, 2018.
^ "Proposal: A built-in Go error check function, "try"". Go repository on GitHub. Retrieved March 16, 2022.

^ "Type Parameters — Draft Design". go.googlesource.com.
^ "Generics in Go". bitfieldconsulting.com. December 17, 2021.
^ "Go 1.18 is released!". Go Programming Language. March 15, 2022. Retrieved March 16, 2022.

^ "Go 1 and the Future of Go Programs". The Go Programming Language.
^ "Go 1.23 Release Notes". The Go Programming Language.
^ "Release History". The Go Programming Language.

^ "Release History". The Go Programming Language.
^ "Backward Compatibility, Go 1.21, and Go 2". The Go Programming Language.
^ "A Quick Guide to Go's Assembler". go.dev. Retrieved December 31, 2021.

^ Pike, Rob. "The Go Programming Language". YouTube. Retrieved July 1, 2011.
^ Pike, Rob (November 10, 2009). The Go Programming Language (flv) (Tech talk). Google.  Event occurs at 8:53.

^ "Download and install packages and dependencies". See godoc.org for addresses and documentation of some packages.
^ "GoDoc". godoc.org.

^ "GoDoc". godoc.org.
^ Pike, Rob. "The Changelog" (Podcast). Archived from the original on October 20, 2013. Retrieved October 7, 2013.
^ "Go Programming Language Specification, §Semicolons". The Go Programming Language.

^ "Effective Go, §Semicolons". The Go Programming Language.
^ "The Go Programming Language Specification". The Go Programming Language.
^ Pike, Rob (October 23, 2013). "Strings, bytes, runes and characters in Go".

^ Doxsey, Caleb. "Structs and Interfaces — An Introduction to Programming in Go". www.golang-book.com. Retrieved October 15, 2018.
^ Gerrand, Andrew. "Go Slices: usage and internals".
^ The Go Authors. "Effective Go: Slices".

^ The Go Authors. "Effective Go: Slices".
^ The Go authors. "Selectors".
^ The Go authors. "Calls".
^ "Go Programming Language Specification, §Package unsafe". The Go Programming Language.

^ "The Go Programming Language Specification". go.dev. Retrieved December 31, 2021.
^ "The Go Programming Language Specification". The Go Programming Language.
^ "A tour of go". go.dev.

^ "A tour of go". go.dev.
^ "The Go Programming Language Specification". The Go Programming Language.
^ "The Go Programming Language Specification". go.dev. Retrieved December 31, 2021.

^ "The Go Programming Language Specification". The Go Programming Language.

^ a b Schmager, Frank; Cameron, Nicholas; Noble, James (2010). GoHotDraw: evaluating the Go programming language with design patterns. Evaluation and Usability of Programming Languages and Tools. ACM.

^ a b c d e Balbaert, Ivo (2012). The Way to Go: A Thorough Introduction to the Go Programming Language. iUniverse.
^ "The Evolution of Go". talks.golang.org. Retrieved March 13, 2016.

^ Diggins, Christopher (November 24, 2009). "Duck Typing and the Go Programming Language". Dr. Dobb's, The world of software development. Retrieved March 10, 2016.
^ Ryer, Mat (December 1, 2015). "Duck typing in Go". Retrieved March 10, 2016.

^ "Frequently Asked Questions (FAQ) - The Go Programming Language". The Go Programming Language.
^ "The Go Programming Language Specification". The Go Programming Language.
^ "The Go Programming Language Specification". The Go Programming Language.

^ "reflect package". pkg.go.dev.
^ "map[string]interface{} in Go". bitfieldconsulting.com. June 6, 2020.
^ "Go Data Structures: Interfaces". Retrieved November 15, 2012.
^ "The Go Programming Language Specification". The Go Programming Language.

^ "Go 1.18 Release Notes: Generics". Go Programming Language. March 15, 2022. Retrieved March 16, 2022.
^ "Type Parameters Proposal". go.googlesource.com. Retrieved June 25, 2023.

^ "The Go Programming Language Specification - The Go Programming Language". go.dev. Retrieved June 25, 2023.
^ "An Introduction To Generics - The Go Programming Language". go.dev. Retrieved June 25, 2023.

^ "Type Parameters Proposal". go.googlesource.com. Retrieved June 25, 2023.
^ "Effective Go". golang.org. The Go Authors. Retrieved May 13, 2014.

^ "A Tutorial for the Go Programming Language". The Go Programming Language. Retrieved March 10, 2013. In Go the rule about visibility of information is simple: if a name (of a top-level type, function, method, constant or variable, or of a

function, method, constant or variable, or of a structure field or method) is capitalized, users of the package may see it. Otherwise, the name and hence the thing being named is visible only inside the package in which it is declared.

^ "go". The Go Programming Language.

^ "How to Write Go Code". The Go Programming Language. The packages from the standard library are given short import paths such as "fmt" and "net/http". For your own packages, you must choose a base path that is unlikely to collide with future

base path that is unlikely to collide with future additions to the standard library or other external libraries. If you keep your code in a source repository somewhere, then you should use the root of that source repository as your base path. For

of that source repository as your base path. For instance, if you have an Example account at example.com/user, that should be your base path

^ a b Pike, Rob (September 18, 2012). "Concurrency is not Parallelism".

^ a b Donovan, Alan A. A.; Kernighan, Brian W. (2016). The Go programming language. Addison-Wesley professional computing series. New York, Munich: Addison-Wesley. ISBN 978-0-13-419044-0.

^ a b c d e Chisnall, David (2012). The Go Programming Language Phrasebook. Addison-Wesley. ISBN 9780132919005.
^ "Effective Go". The Go Programming Language.

^ "Effective Go". The Go Programming Language.
^ Summerfield, Mark (2012). Programming in Go: Creating Applications for the 21st Century. Addison-Wesley.
^ "The Go Memory Model". Retrieved April 10, 2017.

^ "Go Concurrency Patterns". The Go Programming Language.
^ Graham-Cumming, John (August 24, 2013). "Recycling Memory Buffers in Go".
^ "tree.go".
^ Cheslack-Postava, Ewen. "Iterators in Go".
^ Kernighan, Brian W. "A Descent Into Limbo".

^ Kernighan, Brian W. "A Descent Into Limbo".
^ a b "The Go Memory Model". Retrieved January 5, 2011.

^ Tang, Peiyi (2010). Multi-core parallel programming in Go (PDF). Proc. First International Conference on Advanced Computing and Communications. Archived from the original (PDF) on September 9, 2016. Retrieved May 14, 2015.

^ Nanz, Sebastian; West, Scott; Soares Da Silveira, Kaue. Examining the expert gap in parallel programming (PDF). Euro-Par 2013. CiteSeerX 10.1.1.368.6137.
^ Go Authors. "Share Memory By Communicating".
^ Cox, Russ. "Off to the Races".

^ Cox, Russ. "Off to the Races".
^ Pike, Rob (October 25, 2012). "Go at Google: Language Design in the Service of Software Engineering". Google, Inc. "There is one important caveat: Go is not purely memory safe in the presence of concurrency."

^ "Introducing the Go Race Detector". The Go Blog. Retrieved June 26, 2013.
^ "Go 1.6 Release Notes - The Go Programming Language". go.dev. Retrieved November 17, 2023.
^ "Frequently Asked Questions (FAQ) - the Go Programming Language".

^ "A Story of a Fat Go Binary". September 21, 2018.
^ "Go Programming Language Specification, §Interface types". The Go Programming Language.
^ "Go Programming Language Specification, §Type assertions". The Go Programming Language.

^ "All Systems Are Go". informIT (Interview). August 17, 2010. Retrieved June 21, 2018.
^ "Language Design FAQ". November 13, 2009. Archived from the original on November 13, 2009.

^ "Proposal for an exception-like mechanism". golang-nuts. March 25, 2010. Retrieved March 25, 2010.
^ "Weekly Snapshot History". The Go Programming Language.
^ "Panic And Recover". Go wiki.
^ "Effective Go". The Go Programming Language.

^ "Effective Go". The Go Programming Language.
^ "gofmt". The Go Programming Language. Retrieved February 5, 2021.
^ "golang/lint public archive". github.com. November 30, 2022.
^ a b "Effective Go". The Go Programming Language.

^ "Unused local variables". yourbasic.org. Retrieved February 11, 2021.
^ "Unused package imports". yourbasic.org. Retrieved February 11, 2021.
^ "Code Review Comments". GitHub. Retrieved July 3, 2018.
^ "Talks". Retrieved July 3, 2018.

^ "Talks". Retrieved July 3, 2018.
^ "Errors Are Values". Retrieved July 3, 2018.
^ "tools/gopls/README.md at master · golang/tools". GitHub. Retrieved November 17, 2023.
^ "fmt". The Go Programming Language. Retrieved April 8, 2019.

^ "testing". The Go Programming Language. Retrieved December 27, 2020.

^ Lee, Wei-Meng (November 24, 2022). "Introduction to the Go Programming Language". Component Developer Magazine. Archived from the original on June 5, 2023. Retrieved September 8, 2023.

^ Hoffmann, Frank; Neumeyer, Mandy (August 2018). "Simply Secure". Linux Magazine. No. 213. Archived from the original on May 28, 2023. Retrieved September 8, 2023.

^ Lee, Wei-Meng (August 31, 2022). "Introduction to Containerization Using Docker". CODE Magazine. Archived from the original on May 30, 2023. Retrieved September 8, 2023.

^ Pirker, Alexander (February 24, 2023). "Kubernetes Security for Starters". CODE Magazine. Archived from the original on April 1, 2023. Retrieved September 8, 2023.

^ Taft, Rebecca; Sharif, Irfan; Matei, Andrei; Van Benschoten, Nathan; Lewis, Jordan; Grieger, Tobias; Niemi, Kai; Woods, Andy; Birzin, Anne; Poss, Raphael; Bardea, Paul; Ranade, Amruta; Darnell, Ben; Gruneir, Bram; Jaffray, Justin; Zhang, Lucy;

Ben; Gruneir, Bram; Jaffray, Justin; Zhang, Lucy; Mattis, Peter (June 11, 2020). "CockroachDB: The Resilient Geo-Distributed SQL Database". Proceedings of the 2020 ACM SIGMOD International Conference on Management of Data. SIGMOD '20. pp. 1493–1509.

on Management of Data. SIGMOD '20. pp. 1493–1509. doi:10.1145/3318464.3386134. ISBN 978-1-4503-6735-6.

^ Hopkins, Brandon (September 13, 2022). "Static Site Generation with Hugo". Linux Journal. Archived from the original on April 8, 2023. Retrieved September 8, 2023.

^ Simionato, Michele (November 15, 2009). "Interfaces vs Inheritance (or, watch out for Go!)". artima. Retrieved November 15, 2009.

^ Astels, Dave (November 9, 2009). "Ready, Set, Go!". engineyard. Archived from the original on October 19, 2018. Retrieved November 9, 2009.

^ jt (January 11, 2010). "Google's Go Wins Programming Language Of The Year Award". jaxenter. Retrieved December 5, 2012.
^ "TIOBE Programming Community Index for June 2015". TIOBE Software. June 2015. Retrieved July 5, 2015.

^ "TIOBE Index". TIOBE. Retrieved July 15, 2024.
^ Eckel, Bruce (August 27, 2011). "Calling Go from Python via JSON-RPC". Retrieved August 29, 2011.
^ Hundt, Robert (2011). Loop recognition in C++/Java/Go/Scala (PDF). Scala Days.

^ Metz, Cade (July 1, 2011). "Google Go strikes back with C++ bake-off". The Register.
^ Yager, Will. "Why Go is not Good". Retrieved November 4, 2018.
^ Dobronszki, Janos. "Everyday Hassles in Go". Retrieved November 4, 2018.

^ "Why are there braces but no semicolons? And why can't I put the opening brace on the next line?". Retrieved March 26, 2020. The advantages of a single, programmatically mandated format for all Go programs greatly outweigh any perceived

all Go programs greatly outweigh any perceived disadvantages of the particular style.

^ "I want off Mr. Golang's Wild Ride". February 28, 2020. Retrieved November 17, 2020.
^ "proposal: os: Create/Open/OpenFile() set FILE_SHARE_DELETE on windows #32088". GitHub. May 16, 2019. Retrieved November 17, 2020.

^ Tu, Tengfei (2019). "Understanding Real-World Concurrency Bugs in Go" (PDF). For example, around 58% of blocking bugs are caused by message passing. In addition to the violation of Go's channel usage rules (e.g., waiting on a channel that no one

rules (e.g., waiting on a channel that no one sends data to or close), many concurrency bugs are caused by the mixed usage of message passing and other new semantics and new libraries in Go, which can easily be overlooked but hard to detect

^ Brownlee, John (November 13, 2009). "Google didn't google "Go" before naming their programming language'". Archived from the original on December 8, 2015. Retrieved May 26, 2016.

^ Claburn, Thomas (November 11, 2009). "Google 'Go' Name Brings Accusations Of Evil'". InformationWeek. Archived from the original on July 22, 2010. Retrieved January 18, 2010.

^ a b "Issue 9 - go — I have already used the name for *MY* programming language". Github. Google Inc. Retrieved October 12, 2010.
Further reading[edit]

Further reading[edit]
Donovan, Alan; Kernighan, Brian (October 2015). The Go Programming Language (1st ed.). Addison-Wesley Professional. p. 400. ISBN 978-0-13-419044-0.

Bodner, Jon (March 2021). Learning Go (1st ed.). O'Reilly. p. 352. ISBN 9781492077213.
External links[edit]
Wikimedia Commons has media related to Go (programming language).
Official website
vteProgramming languages
Comparison
Timeline
History
Ada

Comparison
Timeline
History
Ada
ALGOL
Simula
APL
Assembly
BASIC
Visual Basic
classic
.NET
C
C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Julia
Kotlin
Lisp
Lua
MATLAB
ML
Pascal
Object Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL

Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Scratch
Shell
Smalltalk
Swift
more...
Lists: Alphabetical
Categorical
Generational
Non-English-based
Category
vteGoogle free and open-source softwareSoftwareApplications
Chromium
Gemma
OpenRefine
Tesseract

Chromium
Gemma
OpenRefine
Tesseract
Programming languages
Carbon
Dart
Go
Sawzall
Frameworks anddevelopment tools
AMP
Angular
AngularJS
Beam
Bazel
Blockly
Closure Tools
Cpplint
FlatBuffers
Flutter
Gears
Gerrit
Guava
gRPC
Gson
Guetzli
Guice
gVisor

Gears
Gerrit
Guava
gRPC
Gson
Guetzli
Guice
gVisor
Kubernetes
LevelDB
libvpx
NaCl
OR-Tools
Polymer
Protocol Buffers
TensorFlow
V8
Operating systems
AOSP
ChromiumOS
Fuchsia
gLinux
Goobuntu
Related
Code-in
Google LLC v. Oracle America, Inc.

Code-in
Google LLC v. Oracle America, Inc.
Open Source Security Foundation
Summer of Code
vteRob PikeOperating systems
Plan 9 from Bell Labs
Inferno
Programming languages
Newsqueak
Limbo
Sawzall
Go
Software
acme
Blit
sam
rio
8½
Publications

Go
Software
acme
Blit
sam
rio
8½
Publications
The Practice of Programming
The Unix Programming Environment
Other
Renée French
Mark V. Shaney
UTF-8
vteKen ThompsonOperating systems
Unix
Plan 9 from Bell Labs
Inferno
Programming languages
B
Go

Inferno
Programming languages
B
Go
Software
Belle
ed
grep
sam
Space Travel
Thompson shell
Associated institutions
Bell Labs
Google
Other
UTF-8
Authority control databases InternationalFASTNationalGermanyUnited StatesIsrael

Retrieved from "https://en.wikipedia.org/w/index.php?title=Go_(programming_language)&oldid=1248866625"

Categories: Go (programming language)American inventionsC programming language familyConcurrent programming languagesCross-platform free softwareCross-platform softwareFree compilers and interpretersGoogle softwareHigh-level programming

interpretersGoogle softwareHigh-level programming languagesProcedural programming languagesProgramming languagesProgramming languages created in 2009Software using the BSD licenseStatically typed programming languagesSystems programming

typed programming languagesSystems programming languagesHidden categories: Articles with short descriptionShort description is different from WikidataUse American English from August 2022All Wikipedia articles written in American EnglishUse mdy

articles written in American EnglishUse mdy dates from October 2018All articles with failed verificationArticles with failed verification from June 2022All articles with unsourced statementsArticles with unsourced statements from December

with unsourced statements from December 2016Articles with excerptsCommons category link is on WikidataArticles prone to spam from June 2013

This page was last edited on 1 October 2024, at 21:46 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License;

additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policy
About Wikipedia
Disclaimers

Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view

Visual Basic (.NET) - Wikipedia
Jump to content
Main menu
Main menu
move to sidebar
hide
Navigation
Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us
Contribute
HelpLearn to editCommunity portalRecent changesUpload file
Search

Search
Search
Donate
Appearance
Create account
Log in
Personal tools
Create account Log in
Pages for logged out editors learn more
ContributionsTalk
Contents
move to sidebar
hide
(Top)
1
Use in making GUI programs
2
Syntax
Toggle Syntax subsection

2
Syntax
Toggle Syntax subsection
2.1
Simple example
2.2
Complex example
2.3
Comparison with the classic Visual Basic
2.3.1
Comparative examples
2.4
Comparison with C#
3
Examples
Toggle Examples subsection
3.1
Hello World!
3.1.1

Toggle Examples subsection
3.1
Hello World!
3.1.1
Windows Forms Application
3.1.2
Console Application
3.2
Speaking
3.2.1
Windows Forms Application
3.2.2
Console Application
4
Version history
Toggle Version history subsection
4.1
2002 (VB 7.0)
4.2

4.1
2002 (VB 7.0)
4.2
2003 (VB 7.1)
4.3
2005 (VB 8.0)
4.4
2008 (VB 9.0)
4.5
2010 (VB 10.0)
4.6
2012 (VB 11.0)
4.7
2013 (VB 12.0)
4.8
2015 (VB 14.0)
4.9
2017 (VB 15.x)
4.10
2019 (VB 16.0)
5
Cross-platform and open-source development
6
See also
7

6
See also
7
References
8
Further reading
9
External links
Toggle the table of contents
Visual Basic (.NET)
42 languages

العربيةAzərbaycancaবাংলাČeštinaDanskDeutschEestiEspañolفارسیFrançais한국어Հայերենहिन्दीBahasa IndonesiaÍslenskaItalianoעבריתລາວMagyarമലയാളംمصرىBahasa MelayuNederlands日本語Norsk bokmålOʻzbekcha / ўзбекчаភាសាខ្មែរPolskiPortuguêsРусскийසිංහලSimple

ўзбекчаភាសាខ្មែរPolskiPortuguêsРусскийසිංහලSimple EnglishSvenskaதமிழ்ไทยТоҷикӣTürkçeУкраїнськаTiếng Việtייִדיש粵語中文

Edit links
ArticleTalk
English
ReadEditView history
Tools
Tools
move to sidebar
hide
Actions
ReadEditView history
General

hide
Actions
ReadEditView history
General
What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata item
Print/export
Download as PDFPrintable version

Print/export
Download as PDFPrintable version
In other projects
Wikimedia CommonsWikibooksWikiversity
Appearance
move to sidebar
hide
From Wikipedia, the free encyclopedia
Object-oriented computer programming language

Object-oriented computer programming language
This article is about the modern programming language for .NET. For the original Visual Basic, the last version of which was Visual Basic 6.0, see Visual Basic (classic).

Visual BasicParadigmMulti-paradigm: structured, imperative, object-oriented, declarative, generic, reflective and event-drivenDesigned byMicrosoftDeveloperMicrosoftFirst appeared2001; 23 years ago (2001)Stable release17.9.2[1]

/ 27 February 2024; 7 months ago (27 February 2024)

Typing disciplineStatic, both strong and weak,[2] both safe and unsafe,[2] nominativePlatform.NET Framework, Mono, .NET[3][4]OSChiefly WindowsAlso on Android, BSD, iOS, Linux, macOS, Solaris, and UnixLicenseRoslyn compiler: Apache License

and UnixLicenseRoslyn compiler: Apache License 2.0[5]Filename extensions.vbWebsitedocs.microsoft.com/dotnet/visual-basic/Major implementations.NET Framework SDK, Roslyn Compiler and MonoDialectsMicrosoft Visual BasicInfluenced byClassic Visual

Visual BasicInfluenced byClassic Visual BasicInfluencedSmall Basic, Mercury

Visual Basic (VB), originally called Visual Basic .NET (VB.NET), is a multi-paradigm, object-oriented programming language, implemented on .NET, Mono, and the .NET Framework. Microsoft launched VB.NET in 2002 as the successor to its original Visual

in 2002 as the successor to its original Visual Basic language, the last version of which was Visual Basic 6.0. Although the ".NET" portion of the name was dropped in 2005, this article uses "Visual Basic [.NET]" to refer to all Visual Basic

Basic [.NET]" to refer to all Visual Basic languages released since 2002, in order to distinguish between them and the classic Visual Basic. Along with C# and F#, it is one of the three main languages targeting the .NET ecosystem. Microsoft updated

targeting the .NET ecosystem. Microsoft updated its VB language strategy on 6 February 2023, stating that VB is a stable language now and Microsoft will keep maintaining it.[6]

Microsoft's integrated development environment (IDE) for developing in Visual Basic is Visual Studio. Most Visual Studio editions are commercial; the only exceptions are Visual Studio Express and Visual Studio Community, which are freeware. In

Visual Studio Community, which are freeware. In addition, the .NET Framework SDK includes a freeware command-line compiler called vbc.exe. Mono also includes a command-line VB.NET compiler.

Visual Basic is often used in conjunction with the Windows Forms GUI library to make desktop apps for Windows. Programming for Windows Forms with Visual Basic involves dragging and dropping controls on a form using a GUI designer and writing

on a form using a GUI designer and writing corresponding code for each control.

Use in making GUI programs[edit]
See also: Windows Forms

The Windows Forms library is most commonly used to create GUI interfaces in Visual Basic. All visual elements in the Windows Forms class library derive from the Control class. This provides the minimal functionality of a user interface element such

functionality of a user interface element such as location, size, color, font, text, as well as common events like click and drag/drop. The Control class also has docking support to let a control rearrange its position under its parent.

Forms are typically designed in the Visual Studio IDE. In Visual Studio, forms are created using drag-and-drop techniques. A tool is used to place controls (e.g., text boxes, buttons, etc.) on the form (window).  Controls have attributes and event

(window).  Controls have attributes and event handlers associated with them.  Default values are provided when the control is created, but may be changed by the programmer.  Many attribute values can be modified during run time based on user actions

be modified during run time based on user actions or changes in the environment, providing a dynamic application.  For example, code can be inserted into the form resize event handler to reposition a control so that it remains centered on the form,

control so that it remains centered on the form, expands to fill up the form, etc. By inserting code into the event handler for a keypress in a text box, the program can automatically translate the case of the text being entered, or even prevent

case of the text being entered, or even prevent certain characters from being inserted.

Syntax[edit]
This section needs expansion. You can help by adding to it.  (April 2014)

Visual Basic uses statements to specify actions. The most common statement is an expression statement, consisting of an expression to be evaluated, on a single line. As part of that evaluation, functions or subroutines may be called and variables

or subroutines may be called and variables may be assigned new values. To modify the normal sequential execution of statements, Visual Basic provides several control-flow statements identified by reserved keywords. Structured programming is

by reserved keywords. Structured programming is supported by several constructs including two conditional execution constructs (If ... Then ... Else ... End If and  Select Case ...  Case ...  End Select ) and four iterative execution (loop)

End Select ) and four iterative execution (loop) constructs (Do ... Loop, For ... To, For Each, and While ... End While) . The For ... To statement has separate initialisation and testing sections, both of which must be present. (See examples

both of which must be present. (See examples below.) The For Each statement steps through each value in a list.

In addition, in Visual Basic:

There is no unified way of defining blocks of statements. Instead, certain keywords, such as "If … Then" or "Sub" are interpreted as starters of sub-blocks of code and have matching termination keywords such as "End If" or "End Sub".

Statements are terminated either with a colon (":") or with the end of line. Multiple-line statements in Visual Basic are enabled with " _" at the end of each such line.  The need for the underscore continuation character was largely removed in

continuation character was largely removed in version 10 and later versions.[7]

The equals sign ("=") is used in both assigning values to variables and in comparison.

Round brackets (parentheses) are used with arrays, both to declare them and to get a value at a given index in one of them. Visual Basic uses round brackets to define the parameters of subroutines or functions.

A single quotation mark (') or the keyword REM, placed at the beginning of a line or after any number of space or tab characters at the beginning of a line, or after other code on a line, indicates that the (remainder of the) line is a comment.

Simple example[edit]
The following is a very simple Visual Basic program, a version of the classic "Hello, World!" example created as a console application:
Module Module1
Sub Main()
' The classic "Hello, World!" demonstration program

Console.WriteLine("Hello, World!")
End Sub
End Module
It prints "Hello, World!" on a command-line window. Each line serves a specific purpose, as follows:
Module Module1

This is a module definition. Modules are a division of code, which can contain any kind of object, like constants or variables, functions or methods, or classes, but can not be instantiated as objects like classes and cannot inherit from other

like classes and cannot inherit from other modules. Modules serve as containers of code that can be referenced from other parts of a program.[8]It is common practice for a module and the code file which contains it to have the same name. However,

which contains it to have the same name. However, this is not required, as a single code file may contain more than one module or class.

Sub Main()
This line defines a subroutine called "Main". "Main" is the entry point, where the program begins execution.[9]
Console.WriteLine("Hello, world!")

This line performs the actual task of writing the output. Console is a system object, representing a command-line interface (also known as a "console") and granting programmatic access to the operating system's standard streams. The program calls

system's standard streams. The program calls the Console method WriteLine, which causes the string passed to it to be displayed on the console.

Instead of Console.WriteLine, one could use MsgBox, which prints the message in a dialog box instead of a command-line window.[10]
Complex example[edit]
This piece of code outputs Floyd's Triangle to the console:
Imports System.Console

Imports System.Console
Module Program
Sub Main()
Dim rows As Integer
' Input validation.
Do Until Integer.TryParse(ReadLine("Enter a value for how many rows to be displayed: " & vbcrlf), rows) AndAlso rows >= 1

WriteLine("Allowed range is 1 and {0}", Integer.MaxValue)
Loop
' Output of Floyd's Triangle
Dim current As Integer = 1
Dim row As Integer
Dim column As Integer
For row = 1 To rows
For column = 1 To row
Write("{0,-2} ", current)
current += 1
Next

Write("{0,-2} ", current)
current += 1
Next
WriteLine()
Next
End Sub
''' <summary>
''' Like Console.ReadLine but takes a prompt string.
''' </summary>
Function ReadLine(Optional prompt As String = Nothing) As String
If prompt IsNot Nothing Then

If prompt IsNot Nothing Then
Write(prompt)
End If
Return Console.ReadLine()
End Function
End Module
Comparison with the classic Visual Basic[edit]
Main article: Comparison of Visual Basic and Visual Basic .NET

Whether Visual Basic .NET should be considered as just another version of Visual Basic or a completely different language is a topic of debate. There are new additions to support new features, such as structured exception handling and

such as structured exception handling and short-circuited expressions. Also, two important data-type changes occurred with the move to VB.NET: compared to Visual Basic 6, the Integer data type has been doubled in length from 16 bits to 32 bits, and

doubled in length from 16 bits to 32 bits, and the Long data type has been doubled in length from 32 bits to 64 bits. This is true for all versions of VB.NET. A 16-bit integer in all versions of VB.NET is now known as a Short. Similarly, the Windows

is now known as a Short. Similarly, the Windows Forms editor is very similar in style and function to the Visual Basic form editor.

The things that have changed significantly are the semantics—from those of an object-based programming language running on a deterministic, reference-counted engine based on COM to a fully object-oriented language backed by the .NET Framework, which

language backed by the .NET Framework, which consists of a combination of the Common Language Runtime (a virtual machine using generational garbage collection and a just-in-time compilation engine) and a far larger class library. The increased

and a far larger class library. The increased breadth of the latter is also a problem that VB developers have to deal with when coming to the language, although this is somewhat addressed by the My feature in Visual Studio 2005.

The changes have altered many underlying assumptions about the "right" thing to do with respect to performance and maintainability. Some functions and libraries no longer exist; others are available, but not as efficient as the "native" .NET

but not as efficient as the "native" .NET alternatives. Even if they compile, most converted Visual Basic 6 applications will require some level of refactoring to take full advantage of the new language. Documentation is available to cover changes

Documentation is available to cover changes in the syntax, debugging applications, deployment and terminology.[11]

Comparative examples[edit]

The following simple examples compare VB and VB.NET syntax. They assume that the developer has created a form, placed a button on it and has associated the subroutines demonstrated in each example with the click event handler of the mentioned

with the click event handler of the mentioned button. Each example creates a "Hello, World" message box after the button on the form is clicked.

Visual Basic 6:
Private Sub Command1_Click()
MsgBox "Hello, World"
End Sub
VB.NET (MsgBox or MessageBox class can be used):
Private Sub Button1_Click(sender As object, e As EventArgs) Handles Button1.Click
MsgBox("Hello, World")
End Sub

Both Visual Basic 6 and Visual Basic .NET automatically generate the Sub and End Sub statements when the corresponding button is double-clicked in design view. Visual Basic .NET will also generate the necessary Class and End Class statements. The

the necessary Class and End Class statements. The developer need only add the statement to display the "Hello, World" message box.

All procedure calls must be made with parentheses in VB.NET, whereas in Visual Basic 6 there were different conventions for functions (parentheses required) and subs (no parentheses allowed, unless called using the keyword Call).

The names Command1 and Button1 are not obligatory. However, these are default names for a command button in Visual Basic 6 and VB.NET respectively.

In VB.NET, the Handles keyword is used to make the sub Button1_Click a handler for the Click event of the object Button1. In Visual Basic 6, event handler subs must have a specific name consisting of the object's name (Command1), an underscore (_),

the object's name (Command1), an underscore (_), and the event's name (Click, hence Command1_Click).

There is a function called MessageBox.Show in the Microsoft.VisualBasic namespace which can be used (instead of MsgBox) similarly to the corresponding function in Visual Basic 6. There is a controversy[12] about which function to use as a best

about which function to use as a best practice (not only restricted to showing message boxes but also regarding other features of the Microsoft.VisualBasic namespace). Some programmers prefer to do things "the .NET way", since the Framework classes

"the .NET way", since the Framework classes have more features and are less language-specific. Others argue that using language-specific features makes code more readable (for example, using int (C#) or Integer (VB.NET) instead of System.Int32).

In Visual Basic 2008, the inclusion of ByVal sender as Object, ByVal e as EventArgs has become optional.
The following example demonstrates a difference between Visual Basic 6 and VB.NET. Both examples close the active window.
Visual Basic 6:

Visual Basic 6:
Sub cmdClose_Click()
Unload Me
End Sub
VB.NET:
Sub btnClose_Click(sender As Object, e As EventArgs) Handles btnClose.Click
Close()
End Sub

Close()
End Sub
The 'cmd' prefix is replaced by the 'btn' prefix, conforming to the new convention previously mentioned.[which?]
Visual Basic 6 did not provide common operator shortcuts. The following are equivalent:
Visual Basic 6:

Visual Basic 6:
Sub Timer1_Timer()
'Reduces Form Height by one pixel per tick
Me.Height = Me.Height - 1
End Sub
VB.NET:
Sub Timer1_Tick(sender As Object, e As EventArgs) Handles Timer1.Tick
Me.Height -= 1
End Sub
Comparison with C#[edit]

Me.Height -= 1
End Sub
Comparison with C#[edit]
Main article: Comparison of C Sharp and Visual Basic .NET

C# and Visual Basic are Microsoft's first languages made to program on the .NET Framework (later adding F# and more; others have also added languages). Though C# and Visual Basic are syntactically different, that is where the differences mostly end.

that is where the differences mostly end. Microsoft developed both of these languages to be part of the same .NET Framework development platform.  They are both developed, managed, and supported by the same language development team at

by the same language development team at Microsoft.[13]  They compile to the same intermediate language (IL), which runs against the same .NET Framework runtime libraries.[14]  Although there are some differences in the programming constructs, their

differences in the programming constructs, their differences are primarily syntactic and, assuming one avoids the Visual Basic "Compatibility" libraries provided by Microsoft to aid conversion from Visual Basic 6, almost every feature in VB has an

Visual Basic 6, almost every feature in VB has an equivalent feature in C# and vice versa.  Lastly, both languages reference the same Base Classes of the .NET Framework to extend their functionality.   As a result, with few exceptions, a program

As a result, with few exceptions, a program written in either language can be run through a simple syntax converter to translate to the other.  There are many open source and commercially available products for this task.

Examples[edit]
Hello World![edit]
Windows Forms Application[edit]
Requires a button called Button1.Public Class Form1
Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click

MsgBox("Hello world!", MsgBoxStyle.Information, "Hello world!") ' Show a message that says "Hello world!".
End Sub
End Class
Hello world! window
Console Application[edit]
Module Module1
Sub Main()

Module Module1
Sub Main()
Console.WriteLine("Hello world!") ' Write in the console "Hello world!" and start a new line.
Console.ReadKey() ' The user must press any key before the application ends.
End Sub
End Module
Speaking[edit]

End Sub
End Module
Speaking[edit]
Windows Forms Application[edit]
Requires a TextBox titled 'TextBox1' and a button called Button1.Public Class Form1
Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click

CreateObject("Sapi.Spvoice").Speak(TextBox1.Text)
End Sub
End Class
Console Application[edit]
Module Module1
Private Voice = CreateObject("Sapi.Spvoice")
Private Text As String
Sub Main()

Private Text As String
Sub Main()
Console.Write("Enter the text to speak: ") ' Say "Enter the text to speak: "
Text = Console.ReadLine() ' The user must enter the text to speak.
Voice.Speak(Text) ' Speak the text the user has entered.
End Sub

End Sub
End Module
Version history[edit]
This section needs to be updated. The reason given is: give update about Visual Studio 2022 release. Please help update this article to reflect recent events or newly available information. (June 2022)

Succeeding the classic Visual Basic version 6.0, the first version of Visual Basic .NET debuted in 2002. As of 2020[update], ten versions of Visual Basic .NET are released.
2002 (VB 7.0)[edit]

2002 (VB 7.0)[edit]
The first version, Visual Basic .NET, relies on .NET Framework 1.0. The most important feature is managed code, which contrasts with the classic Visual Basic.
2003 (VB 7.1)[edit]

Visual Basic .NET 2003 was released with .NET Framework 1.1. New features included support for the .NET Compact Framework and a better VB upgrade wizard. Improvements were also made to the performance and reliability of .NET IDE (particularly the

and reliability of .NET IDE (particularly the background compiler) and runtime. In addition, Visual Basic .NET 2003 was available in the Visual Studio.NET Academic Edition, distributed to a certain number of scholars[weasel words] from each country

of scholars[weasel words] from each country without cost.

2005 (VB 8.0)[edit]
After Visual Basic .NET 2003, Microsoft dropped ".NET" from the name of the product, calling the next version Visual Basic 2005.

For this release, Microsoft added many features intended to reinforce Visual Basic .NET's focus as a rapid application development platform and further differentiate it from C#., including:
Edit and Continue feature[further explanation needed]

Design-time expression evaluation[further explanation needed]
A pseudo-namespace called "My", which provides:[15][16]

Easy access to certain areas of the .NET Framework that otherwise require significant code to access like using My.Form2.Text = " MainForm " rather than System.WindowsApplication1.Forms.Form2.text = " MainForm "

Dynamically generated classes (e.g. My.Forms)
Improved VB-to-VB.NET converter[17]
A "using" keyword, simplifying the use of objects that require the Dispose pattern to free resources

Just My Code feature, which hides (steps over) boilerplate code written by the Visual Studio .NET IDE and system library code during debugging
Data Source binding, easing database client/server development

To bridge the gaps between itself and other .NET languages, this version added:
Generics[18]

Generics[18]
Partial classes, a method of defining some parts of a class in one file and then adding more definitions later; particularly useful for integrating user code with auto-generated code
Operator overloading and nullable types[19]

Operator overloading and nullable types[19]
Support for unsigned integer data types commonly used in other languages

Visual Basic 2005 introduced the IsNot operator that makes 'If X IsNot Y' equivalent to 'If Not X Is Y'. It gained notoriety[20] when it was found to be the subject of a Microsoft patent application.[21][22]
2008 (VB 9.0)[edit]

2008 (VB 9.0)[edit]
Visual Basic 9.0 was released along with .NET Framework 3.5 on November 19, 2007.
For this release, Microsoft added many features, including:

A true conditional operator, "If(condition as Boolean, truepart, falsepart)", to replace the "IIf" function.
Anonymous types
Support for LINQ
Lambda expressions
XML Literals
Type Inference
Extension methods
2010 (VB 10.0)[edit]

In April 2010, Microsoft released Visual Basic 2010. Microsoft had planned to use Dynamic Language Runtime (DLR) for that release[23] but shifted to a co-evolution strategy between Visual Basic and sister language C# to bring both languages into

sister language C# to bring both languages into closer parity with one another. Visual Basic's innate ability to interact dynamically with CLR and COM objects has been enhanced to work with dynamic languages built on the DLR such as IronPython and

languages built on the DLR such as IronPython and IronRuby.[24] The Visual Basic compiler was improved to infer line continuation in a set of common contexts, in many cases removing the need for the " _" line continuation characters. Also, existing

" _" line continuation characters. Also, existing support of inline Functions was complemented with support for inline Subs as well as multi-line versions of both Sub and Function lambdas.[25]

2012 (VB 11.0)[edit]
Visual Basic 2012 was released alongside .NET Framework 4.5. Major features introduced in this version include:[further explanation needed]
Asynchronous programming with "async" and "await" statements
Iterators
Call hierarchy

Iterators
Call hierarchy
Caller information
"Global" keyword in "namespace" statements
2013 (VB 12.0)[edit]

2013 (VB 12.0)[edit]
Visual Basic 2013 was released alongside .NET Framework 4.5.1 with Visual Studio 2013. Can also build .NET Framework 4.5.2 applications by installing Developer Pack.[26]
2015 (VB 14.0)[edit]

Visual Basic 2015 (code named VB "14.0") was released with Visual Studio 2015. Language features include a new "?." operator to perform inline null checks, and a new string interpolation feature is included to format strings inline.[27]

2017 (VB 15.x)[edit]
Visual Basic 2017 (code named VB "15.0") was released with Visual Studio 2017.

Extends support for new Visual Basic 15 language features with revision 2017, 15.3, 15.5, 15.8. Introduces new refactorings that allow organizing source code with one action.[28][29]
2019 (VB 16.0)[edit]

2019 (VB 16.0)[edit]
Visual Basic 2019 (code named VB "16.0") was released with Visual Studio 2019.[30] It is the first version of Visual Basic focused on .NET Core.[31]
Cross-platform and open-source development[edit]

The official Visual Basic compiler is written in Visual Basic and is available on GitHub as a part of the .NET Compiler Platform.[32] The creation of open-source tools for Visual Basic development has been slow compared to C#, although the Mono

has been slow compared to C#, although the Mono development platform provides an implementation of Visual Basic-specific libraries and a Visual Basic 2005 compatible compiler written in Visual Basic,[33] as well as standard framework libraries such

as well as standard framework libraries such as Windows Forms GUI library.

MonoDevelop was an open-source alternative IDE. The Gambas environment is also similar but distinct from Visual Basic, as is the Visual FB Editor for FreeBasic.
See also[edit]
Free and open-source software portalComputer programming portal

Microsoft Visual Studio Express
List of .NET libraries and frameworks
Comparison of C# and Visual Basic .NET
Visual Basic for Applications
Microsoft Small Basic
Comparison of programming languages
References[edit]

References[edit]
^ "Visual Studio 2022 version 17.9.2 Release Notes". February 27, 2024. Retrieved February 27, 2024.

^ a b "Option Explicit and Option Strict in Visual Basic .NET and in Visual Basic". Support. Microsoft. March 19, 2008. Archived from the original on April 4, 2015. Retrieved August 22, 2013.

^ Dollard, Kathleen (November 13, 2018). "Visual Basic in .NET Core 3.0". blogs.msdn.microsoft.com. Archived from the original on November 19, 2018. Retrieved November 21, 2018.

^ "Visual Basic support planned for .NET 5.0 | Visual Basic Blog". Blogs.msdn.microsoft.com. March 11, 2020. Archived from the original on January 5, 2022. Retrieved August 26, 2020.

^ "Dotnet/Roslyn". GitHub. November 2, 2022. Archived from the original on May 2, 2019. Retrieved April 14, 2019.

^ KathleenDollard (February 6, 2023). "Visual Basic language strategy - Visual Basic". learn.microsoft.com. Archived from the original on March 31, 2023. Retrieved March 31, 2023.

^ "New Features in Visual Basic 10". June 3, 2010. Archived from the original on March 4, 2016. Retrieved September 5, 2015.
^ "Module Statement". MSDN – Developer Center. Archived from the original on January 9, 2010. Retrieved January 20, 2010.

^ "Main Procedure in Visual Basic". MSDN – Developer Center. Archived from the original on January 28, 2010. Retrieved January 20, 2010.

^ "Visual Basic Version of Hello, World". MSDN – Developer Center. Archived from the original on January 11, 2010. Retrieved January 20, 2010.

^ "Microsoft Visual Basic 6.0 Migration Resource Center". MSDN. Microsoft. Archived from the original on November 9, 2014. Retrieved November 9, 2014.

^ "Visual Studio 2003 Retired Technical documentation". Microsoft Download Center. Archived from the original on December 30, 2014. Retrieved July 24, 2018.

^ Krill, Paul (February 27, 2009). "Microsoft converging programming languages | Developer World". InfoWorld. Archived from the original on January 26, 2013. Retrieved August 18, 2013.

^ "Microsoft Intermediate Language". Dotnet-guide.com. Archived from the original on June 2, 2013. Retrieved August 18, 2013.

^ Mackenzie, Duncan (2006). "Navigate The .NET Framework And Your Projects With The My Namespace". MSDN Magazine Visual Studio 2005 Guided Tour 2006. Microsoft. Archived from the original on February 15, 2014. Retrieved February 6, 2014.

^ Whitney, Tyler (November 2005). "My.Internals: Examining the Visual Basic My Feature". MSDN. Microsoft. Archived from the original on June 14, 2012. Retrieved February 6, 2014.

^ "What's New with the Visual Basic Upgrade Wizard in Visual Basic 2005". msdn2.microsoft.com. Archived from the original on April 6, 2008. Retrieved January 29, 2008.

^ "Defining and Using Generics in Visual Basic 2005". msdn2.microsoft.com. Archived from the original on April 23, 2008. Retrieved January 29, 2008.

^ "Operator Overloading in Visual Basic 2005". msdn2.microsoft.com. Archived from the original on April 23, 2008. Retrieved January 29, 2008.

^ Sherriff, Lucy (February 22, 2005). "Real Software slams MS IsNot patent application". The Register. Archived from the original on August 3, 2009. Retrieved April 6, 2009.

^ Taft, Darryl K. (February 21, 2005). "Real Software Slams Microsofts Patent Effort". eWeek. Archived from the original on July 31, 2012. Retrieved April 6, 2009.

^ Vick, Paul A. Jr.; Barsan, Costica Corneliu; Silver, Amanda K. (May 14, 2003). "United States Patent Application: 20040230959". Patent Application Full Text and Image Database. US Patent & Trademark Office. Archived from the original on February

Office. Archived from the original on February 11, 2006. Retrieved April 6, 2009.

^ "What the heck is "VBx"?". May 1, 2007. Archived from the original on May 25, 2009. Retrieved August 12, 2009. With the new DLR, we have support for IronPython, IronRuby, Javascript, and the new dynamic VBx compile

^ "What is New in Visual Basic 2010". Microsoft. 2009. Archived from the original on August 4, 2009. Retrieved August 12, 2009. Visual Basic binds to objects from dynamic languages such as IronPython and IronRuby

^ "What's New in Visual Basic 2010". Microsoft. 2010. Archived from the original on July 26, 2010. Retrieved August 1, 2010.

^ "Download Microsoft .NET Framework 4.5.2 Developer Pack for Windows Vista SP2, Windows 7 SP1, Windows 8, Windows 8.1, Windows Server 2008 SP2 Windows Server 2008 R2 SP1, Windows Server 2012 and Windows Server 2012 R2 from Official Microsoft

Windows Server 2012 R2 from Official Microsoft Download Center". Microsoft. Archived from the original on January 9, 2020. Retrieved January 11, 2020.

^ "New Language Features in Visual Basic 14". msdn.com. Archived from the original on December 25, 2014. Retrieved February 5, 2015.

^ reshmim. "Visual Studio 2017 Release Notes". www.visualstudio.com. Archived from the original on January 22, 2018. Retrieved April 5, 2017.

^ reshmim. "What's new for Visual Basic 2017,15.3,15.5,15.8". www.visualstudio.com. Archived from the original on September 1, 2019. Retrieved January 11, 2020.

^ reshmim. "Visual Studio 2019 Release Notes". www.visualstudio.com. Archived from the original on November 29, 2021. Retrieved August 2, 2019.

^ reshmim. "What's new for Visual Basic 16.0". www.visualstudio.com. Archived from the original on September 1, 2019. Retrieved January 11, 2020.

^ Roslyn, .NET Foundation, April 13, 2019, archived from the original on February 22, 2021, retrieved April 14, 2019
^ "Redirecting…". www.mono-project.com. Archived from the original on January 30, 2021. Retrieved June 30, 2008.

Further reading[edit]
"Visual Basic Language Specification 8.0". Microsoft Corporation. November 15, 2005. Archived from the original on January 21, 2011. Retrieved December 10, 2010.

"Visual Basic Language Specification 9.0". Microsoft Corporation. December 19, 2007. Retrieved September 28, 2011.

"Visual Basic Language Specification 11.0". Microsoft Corporation. June 7, 2013. Archived from the original on March 5, 2012. Retrieved September 22, 2013.
External links[edit]
Wikibooks has a book on the topic of: Visual Basic .NET

Wikiversity has learning resources about VB.NET
Official website
The Visual Basic Team Blog
vteDialects of the BASIC programming language (list)ClassicMicrosoft
Microsoft BASIC
TRS-80 BASICs (Level I, Level II/III)
Thomson BASIC 1.0

Thomson BASIC 1.0
Texas Instruments
TI-BASIC (calculators)
TI Extended BASIC (aka XBasic)
TI-BASIC 83
Hewlett-Packard
HP Time-Shared BASIC
Rocky Mountain BASIC
HP Basic
Locomotive Software
Locomotive BASIC
Mallard BASIC
Microcomputers
Atom BASIC

Mallard BASIC
Microcomputers
Atom BASIC
Integer BASIC
North Star BASIC
SCELBAL
Minicomputers
BASIC-11
Business Basic (B32, Data General)
Data General Extended BASIC
Southampton BASIC System
Wang BASIC
Time-sharing computers
BASIC-PLUS

Wang BASIC
Time-sharing computers
BASIC-PLUS
Extra! Basic Macro Language
VSI BASIC for OpenVMS
SUPER BASIC
CALL/360:BASIC
Other
AlphaBasic
Astro BASIC
BASICODE
BAL
Casio BASIC
CBASIC
PBASIC
SDS BASIC
Tiny BASIC
UBASIC
ZBasic
ETBASIC [zh]
Extenders

Tiny BASIC
UBASIC
ZBasic
ETBASIC [zh]
Extenders
BASIC 8
Graphics BASIC
Simons' BASIC
Super Expander
Super Expander 64
YS MegaBasic
Procedure-orientedProprietary
AmigaBASIC
AMOS BASIC
ASIC
BasicX
Beta BASIC
FutureBASIC
GRASS
Liberty BASIC
LSE

Beta BASIC
FutureBASIC
GRASS
Liberty BASIC
LSE
MapBasic
Mobile BASIC
OWBasic
PowerBASIC
PureBasic
SmileBASIC
ThinBasic
Tiger-BASIC
True BASIC
Turbo Basic
WordBASIC
Free andopen source
Basic-256
Basic4GL
DarkBASIC
Euphoria
Indic BASIC

Basic-256
Basic4GL
DarkBASIC
Euphoria
Indic BASIC
Open Programming Language
SdlBasic
SmallBASIC
QB64
wxBasic
XBasic
Xblite
Yabasic
With objectextensionsProprietary
AutoIt
Chipmunk Basic
GLBasic
LotusScript
Morfik
PowerBASIC
ProvideX
Run BASIC
VBA

Morfik
PowerBASIC
ProvideX
Run BASIC
VBA
VBScript
VB 5 for Microsoft Excel 5.0
VSTO
VSTA
Embedded Visual Basic
WinWrap Basic
Free andopen source
BlitzMax
FreeBASIC
Microsoft Small Basic
Mono-Basic
OpenOffice Basic
ScriptBasic
Roslyn

Mono-Basic
OpenOffice Basic
ScriptBasic
Roslyn
RADdesignersProprietary
CA-Realizer
Visual Basic (classic)
NS Basic
RapidQ
Visual Basic .NET (Mercury)
Xojo
Free andopen source
B4X (Basic4android, Basic4ppc)
Gambas
WinFBE, Visual FB Editor
Defunct

Gambas
WinFBE, Visual FB Editor
Defunct
Altair BASIC
Applesoft BASIC
Atari BASIC
Atari Microsoft BASIC
Atari ST BASIC
BASIC A+
BASIC XE
BASIC XL
BASIC Programming (Atari 2600)
BBC BASIC
Benton Harbor BASIC
Chinese BASIC
Commodore BASIC
Color BASIC

Chinese BASIC
Commodore BASIC
Color BASIC
Dartmouth BASIC
Disk Extended Color BASIC
Extended Color BASIC
Family BASIC
GFA BASIC
GW-BASIC
IBM BASIC
JR-BASIC
MacBASIC
MBASIC
MSX BASIC
MS BASIC for Macintosh
QBasic
QuickBASIC
S-BASIC
Sinclair BASIC

QBasic
QuickBASIC
S-BASIC
Sinclair BASIC
STOS BASIC
SuperBASIC
TI BASIC (TI 99/4A)
Turbo-BASIC XL
Vilnius BASIC
vte.NET
.NET strategy
Libraries and frameworks
Implementations
.NET (Core)
.NET Framework
Version history
.NET Compact Framework

Version history
.NET Compact Framework
.NET Micro Framework
DotGNU
Mono
XNA Framework
Architecture
Common Language Runtime (CLR)
COM Interop
Framework Class Library (FCL)
Components
ADO.NET
Entity Framework
ASP.NET
Web Forms
AJAX
Core
Dynamic Data

ASP.NET
Web Forms
AJAX
Core
Dynamic Data
MVC
Razor
Avalonia
ClickOnce
Dynamic Language Runtime
Extensible Application Markup Language (XAML)
Language Integrated Query (LINQ)
Managed Extensibility Framework
Microsoft Silverlight
Microsoft XNA

Microsoft Silverlight
Microsoft XNA
Parallel Extensions
Windows Communication Foundation (WCF)
WCF Data Services
Windows Forms (WinForms)
Windows Identity Foundation (WIF)
Windows Presentation Foundation (WPF)
Windows Workflow Foundation (WF)

Windows Workflow Foundation (WF)
.NET Remoting
ToolsDecompilers
.NET Reflector
dotPeek
Obfuscators
Dotfuscator
SmartAssembly
CLR Profiler
ILAsm
.NET Compiler Platform
Native Image Generator (NGen)
XAMLPad
IDEs
Visual Studio
Blend
Express
MonoDevelop

IDEs
Visual Studio
Blend
Express
MonoDevelop
SharpDevelop
Xamarin Studio
Organizations
.NET Foundation
Microsoft
Xamarin
Category
List
Commons
vteCommon Language InfrastructureArchitecture
Application domain
Code Access Security

Application domain
Code Access Security
Common Intermediate Language
instructions
Common Type System
Platform Invocation Services
Virtual Execution System
Components
Assembly
Delegate
Global Assembly Cache
Manifest
Metadata
Standard Libraries

Manifest
Metadata
Standard Libraries
ImplementationsMicrosoft
.NET
.NET Framework
.NET Compact Framework
.NET Micro Framework
Other
Mono
DotGNU
LanguagesMajor languages
C#
Visual Basic
F#
PowerShell
Other
Axum
A#
Boo
Cobra
C++/CLI
IronScheme

Other
Axum
A#
Boo
Cobra
C++/CLI
IronScheme
IronPython
IronRuby
JScript .NET
J#
Nemerle
Oxygene
Phalanger
Q#
Scala
Small Basic
Comparison
C# and Java
C# and Visual Basic .NET
Visual Basic and Visual Basic .NET

Visual Basic and Visual Basic .NET
vteMicrosoft development toolsDevelopmentenvironmentsVisual Studio
Code
Express
Team System Profiler
Tools for Applications
Tools for Office
Others
Blend
Expression Web
FxCop
GW-BASIC
MACRO-80
Macro Assembler

FxCop
GW-BASIC
MACRO-80
Macro Assembler
MSBuild
Pascal
QuickBASIC
QBasic
QuickC
Robotics Developer Studio
Roslyn
SharePoint Designer
FrontPage
Small Basic
WebMatrix
Windows App SDK
Windows App Studio
Windows SDK
CLR Profiler
ILAsm

Windows App Studio
Windows SDK
CLR Profiler
ILAsm
Native Image Generator
WinDiff
XAMLPad
Languages
Dynamics AX
BASIC
Visual Basic
legacy
VB.NET
VBA
VBScript
Bosque
Visual C++
C++/CX
C++/CLI
Managed C++
C++/WinRT
C#
C/AL
Dafny
Dexterity
F#
F*

C++/WinRT
C#
C/AL
Dafny
Dexterity
F#
F*
Visual FoxPro
Java
J++
J#
JavaScript
TypeScript
JScript
IronPython
IronRuby
Lean
P
Power Fx
PowerShell
Project Verona
Q#
Small Basic
VPL
XAML
APIs andframeworksNative
Windows API
Silverlight
XNA
DirectX

Windows API
Silverlight
XNA
DirectX
Managed DirectX
UWP
Xbox Development Kit
Windows Installer
WinUI
.NET
ASP.NET
Core
AJAX
Dynamic Data
MVC
Razor
Web Forms
ADO.NET
Entity Framework
MAUI
CardSpace
Communication Foundation
Identity Foundation
LINQ

Communication Foundation
Identity Foundation
LINQ
Presentation Foundation
Workflow Foundation
Device drivers
WDK
WDF
KMDF
UMDF
Windows HLK
WDM
DatabaseSQL Server
Express
Compact
Management Studio
Business Intelligence Development Studio
MSDE

Business Intelligence Development Studio
MSDE
SQL services
Analysis
Reporting
Integration
Notification
Other
Visual FoxPro
Microsoft Access
Access Database Engine
Extensible Storage Engine
Source control
Visual SourceSafe

Source control
Visual SourceSafe
Team Foundation Version Control
Testing anddebugging
CodeView
OneFuzz
Playwright
Script Debugger
WinDbg
xUnit.net
Delivery
Active Setup
ClickOnce
npm
NuGet
vcpkg
Web Platform Installer
Windows Installer
WiX

Web Platform Installer
Windows Installer
WiX
Windows Package Manager
Microsoft Store
Category
vteMicrosoft free and open-source software (FOSS)Overview
Microsoft and open source
Shared Source Initiative
SoftwareApplications
3D Movie Maker
Atom

SoftwareApplications
3D Movie Maker
Atom
Conference XP
Family.Show
File Manager
Open Live Writer
Microsoft PowerToys
Terminal
Windows Calculator
Windows Console
Windows Package Manager
WorldWide Telescope
XML Notepad
Video games
Allegiance

XML Notepad
Video games
Allegiance
Programminglanguages
Bosque
C#
Dafny
F#
F*
GW-BASIC
IronPython
IronRuby
Lean
P
Power Fx
PowerShell
Project Verona
Q#
Small Basic Online
TypeScript
Visual Basic
Frameworks,development tools
.NET
.NET Framework

Frameworks,development tools
.NET
.NET Framework
.NET Gadgeteer
.NET MAUI
.NET Micro Framework
AirSim
ASP.NET
ASP.NET AJAX
ASP.NET Core
ASP.NET MVC
ASP.NET Razor
ASP.NET Web Forms
Avalonia
Babylon.js
BitFunnel
Blazor
C++/WinRT
CCF
ChakraCore

BitFunnel
Blazor
C++/WinRT
CCF
ChakraCore
CLR Profiler
Dapr
DeepSpeed
DiskSpd
Dryad
Dynamic Language Runtime
eBPF on Windows
Electron
Entity Framework
Fluent Design System
Fluid Framework
Infer.NET
LightGBM
Managed Extensibility Framework

LightGBM
Managed Extensibility Framework
Microsoft Automatic Graph Layout
Microsoft C++ Standard Library
Microsoft Cognitive Toolkit
Microsoft Design Language
Microsoft Detours
Microsoft Enterprise Library
Microsoft SEAL
mimalloc

Microsoft SEAL
mimalloc
Mixed Reality Toolkit
ML.NET
mod_mono
Mono
MonoDevelop
MSBuild
MsQuic
Neural Network Intelligence
npm
NuGet
OneFuzz
Open Management Infrastructure
Open Neural Network Exchange
Open Service Mesh
Open XML SDK
Orleans
Playwright

Open Service Mesh
Open XML SDK
Orleans
Playwright
ProcDump
ProcMon
Python Tools for Visual Studio
R Tools for Visual Studio
RecursiveExtractor
Roslyn
Sandcastle
SignalR
StyleCop
SVNBridge
T2 Temporal Prover
Text Template Transformation Toolkit

Text Template Transformation Toolkit
TLA+ Toolbox
U-Prove
vcpkg
Virtual File System for Git
Voldemort
VoTT
Vowpal Wabbit
Windows App SDK
Windows Communication Foundation
Windows Driver Frameworks
KMDF
UMDF
Windows Forms

Windows Driver Frameworks
KMDF
UMDF
Windows Forms
Windows Presentation Foundation
Windows Template Library
Windows UI Library
WinJS
WinObjC
WiX
XDP for Windows
XSP
xUnit.net
Z3 Theorem Prover
Operating systems
MS-DOS (v1.25, v2.0 & v4.0)
Barrelfish

MS-DOS (v1.25, v2.0 & v4.0)
Barrelfish
SONiC
Azure Linux
Other
ChronoZoom
Extensible Storage Engine
FlexWiki
FourQ
Gollum
Project Mu
ReactiveX
SILK
TLAPS
TPM 2.0 Reference Implementation
WikiBhasha
Licenses
Microsoft Public License

WikiBhasha
Licenses
Microsoft Public License
Microsoft Reciprocal License
Forges
CodePlex
GitHub
Related
.NET Foundation
F# Software Foundation
Microsoft Open Specification Promise
Open Letter to Hobbyists
Open Source Security Foundation

Open Source Security Foundation
Outercurve Foundation
Category
vteProgramming languages
Comparison
Timeline
History
Ada
ALGOL
Simula
APL
Assembly
BASIC
Visual Basic
classic
.NET
C
C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Julia

Forth
Fortran
Go
Haskell
Java
JavaScript
Julia
Kotlin
Lisp
Lua
MATLAB
ML
Pascal
Object Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Scratch
Shell
Smalltalk
Swift
more...
Lists: Alphabetical
Categorical
Generational
Non-English-based
Category

Generational
Non-English-based
Category
Retrieved from "https://en.wikipedia.org/w/index.php?title=Visual_Basic_(.NET)&oldid=1248726604"

Categories: .NET programming languages2001 softwareBASIC programming language familyMicrosoft BASICMicrosoft programming languagesMicrosoft Visual StudioObject-oriented programming languagesHidden categories: Articles with short descriptionShort

categories: Articles with short descriptionShort description is different from WikidataUse mdy dates from September 2019Articles to be expanded from April 2014All articles to be expandedAll articles with specifically marked weasel-worded

articles with specifically marked weasel-worded phrasesArticles with specifically marked weasel-worded phrases from November 2014Wikipedia articles in need of updating from June 2022All Wikipedia articles in need of updatingArticles containing

articles in need of updatingArticles containing potentially dated statements from 2020All articles containing potentially dated statementsArticles with specifically marked weasel-worded phrases from February 2014Wikipedia articles needing

from February 2014Wikipedia articles needing clarification from February 2014Official website different in Wikidata and WikipediaArticles with example BASIC code

This page was last edited on 1 October 2024, at 03:59 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike License 4.0;

additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policy
About Wikipedia
Disclaimers

Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view

Fortran - Wikipedia
Jump to content
Main menu
Main menu
move to sidebar
hide
Navigation
Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us
Contribute
HelpLearn to editCommunity portalRecent changesUpload file
Search
Search
Donate

Search
Search
Donate
Appearance
Create account
Log in
Personal tools
Create account Log in
Pages for logged out editors learn more
ContributionsTalk
Contents
move to sidebar
hide
(Top)
1
Naming
2
Origins
Toggle Origins subsection
2.1
FORTRAN
2.1.1

Toggle Origins subsection
2.1
FORTRAN
2.1.1
Fixed layout and punched cards
3
Evolution
Toggle Evolution subsection
3.1
FORTRAN II
3.1.1
Simple FORTRAN II program
3.2
FORTRAN III
3.3
FORTRAN IV
3.4
FORTRAN 66
3.5
FORTRAN 77
3.6

3.3
FORTRAN IV
3.4
FORTRAN 66
3.5
FORTRAN 77
3.6
Transition to ANSI Standard Fortran
3.7
Fortran 90
3.7.1
Obsolescence and deletions
3.7.2
"Hello, World!" example
3.8
Fortran 95
3.8.1
Conditional compilation and varying length strings
4

4
Modern Fortran
Toggle Modern Fortran subsection
4.1
Fortran 2003
4.2
Fortran 2008
4.3
Fortran 2018
4.4
Fortran 2023
5
Language features
6
Science and engineering
7
Portability
8
Obsolete variants
Toggle Obsolete variants subsection
8.1

Toggle Obsolete variants subsection
8.1
Fortran-based languages
9
Code examples
10
Humor
11
See also
12
References
13
Further reading
14
External links
Toggle the table of contents
Fortran
77 languages

العربيةAsturianuAzərbaycancaবাংলা閩南語 / Bân-lâm-gúБашҡортсаБеларускаяБългарскиBosanskiCatalàЧӑвашлаČeštinaDanskDeutschEestiΕλληνικάEspañolEsperantoEuskaraفارسیFrançaisGaeilge한국어Հայերենहिन्दीHrvatskiIdoBahasa

IndonesiaInterlinguaÍslenskaItalianoעבריתҚазақшаKurdîLatinaLatviešuLietuviųMagyarമലയാളംमराठीBahasa MelayuMirandésМонголမြန်မာဘာသာNederlands日本語Norsk bokmålNorsk nynorskOccitanOʻzbekcha / ўзбекчаPolskiPortuguêsRomânăРусскийСаха тылаScotsShqipSimple

тылаScotsShqipSimple EnglishSlovenčinaSlovenščinaکوردیСрпски / srpskiSrpskohrvatski / српскохрватскиSuomiSvenskaதமிழ்TaqbaylitతెలుగుไทยТоҷикӣTürkçeУкраїнськаVènetoTiếng Việt吴语粵語中文

Edit links
ArticleTalk
English
ReadEditView history
Tools
Tools
move to sidebar
hide
Actions
ReadEditView history
General

hide
Actions
ReadEditView history
General
What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata item
Print/export
Download as PDFPrintable version

Print/export
Download as PDFPrintable version
In other projects
Wikimedia CommonsWikibooksWikiquote
Appearance
move to sidebar
hide
From Wikipedia, the free encyclopedia
General-purpose programming language

FortranParadigmMulti-paradigm: structured, imperative (procedural, object-oriented), generic, arrayDesigned byJohn BackusDeveloperJohn Backus and IBMFirst appeared1957; 67 years ago (1957)Stable releaseFortran 2023 (ISO/IEC 1539:2023)

/ November 17, 2023; 10 months ago (2023-11-17)

Typing disciplinestrong, static, manifestFilename extensions.f90, .f, .forWebsitefortran-lang.orgMajor implementationsAbsoft, Cray, GFortran, G95, IBM XL Fortran, Intel, Hitachi, Lahey/Fujitsu, Numerical Algorithms Group, Open Watcom, PathScale,

Algorithms Group, Open Watcom, PathScale, PGI, Silverfrost, Oracle Solaris Studio, othersInfluenced bySpeedcodingInfluencedALGOL 58, BASIC, C, Chapel,[1] CMS-2, DOPE, Fortress, MATLAB, PL/I, PACT I, MUMPS, IDL, Ratfor, SAKO[2]

Fortran (/ˈfɔːrtræn/; formerly FORTRAN) is a third generation, compiled, imperative programming language that is especially suited to numeric computation and scientific computing.

Fortran was originally developed by IBM.[3] It first compiled correctly in 1958.[4] Fortran computer programs have been written to support scientific and engineering applications, such as numerical weather prediction, finite element analysis,

weather prediction, finite element analysis, computational fluid dynamics, geophysics, computational physics, crystallography and computational chemistry. It is a popular language for high-performance computing[5] and is used for programs that

computing[5] and is used for programs that benchmark and rank the world's fastest supercomputers.[6][7]

The IBM Blue Gene/P supercomputer installation in 2007 at the Argonne Leadership Angela Yang Computing Facility located in the Argonne National Laboratory, in Lemont, Illinois, US

Fortran has evolved through numerous versions and dialects. In 1966, the American National Standards Institute (ANSI) developed a standard for Fortran to limit proliferation of compilers using slightly different syntax.[8] Successive versions have

different syntax.[8] Successive versions have added support for a character data type (Fortran 77), structured programming, array programming, modular programming, generic programming (Fortran 90), parallel computing (Fortran 95), object-oriented

parallel computing (Fortran 95), object-oriented programming (Fortran 2003), and concurrent programming (Fortran 2008).

FORTRAN and COBOL genealogy tree
Since April 2024, Fortran has ranked among the top ten languages in the TIOBE index, a measure of the popularity of programming languages.[9]
Naming[edit]

Naming[edit]
The first manual for FORTRAN describes it as a Formula Translating System, and printed the name with small caps, Fortran.[10]: p.2 [11]  Other sources suggest the name stands for Formula Translator,[12] or Formula Translation.[13]

Early IBM computers did not support lowercase letters, and the names of versions of the language through FORTRAN 77 were usually spelled in all-uppercase.[14] FORTRAN 77 was the last version in which the Fortran character set included only uppercase

the Fortran character set included only uppercase letters.[15]

The official language standards for Fortran have referred to the language as "Fortran" with initial caps since Fortran 90.[citation needed]
Origins[edit]

Origins[edit]
John Backus (1924–2007) proposed the FORTRAN project in December 1953 and received the A.M. Turing Award in 1977.

In late 1953, John W. Backus submitted a proposal to his superiors at IBM to develop a more practical alternative to assembly language for programming their IBM 704 mainframe computer.[11]: 69  Backus' historic FORTRAN team consisted of programmers

historic FORTRAN team consisted of programmers Richard Goldberg, Sheldon F. Best, Harlan Herrick, Peter Sheridan, Roy Nutt, Robert Nelson, Irving Ziller, Harold Stern, Lois Haibt, and David Sayre.[16] Its concepts included easier entry of equations

Its concepts included easier entry of equations into a computer, an idea developed by J. Halcombe Laning and demonstrated in the Laning and Zierler system of 1952.[17]

The Fortran Automatic Coding System for the IBM 704 (October 15, 1956), the first programmer's reference manual for Fortran[10]

A draft specification for The IBM Mathematical Formula Translating System was completed by November 1954.[11]: 71  The first manual for FORTRAN appeared in October 1956,[10][11]: 72  with the first FORTRAN compiler delivered in April 1957.[11]: 75

compiler delivered in April 1957.[11]: 75  Fortran produced efficient enough code for assembly language programmers to accept a high-level programming language replacement.[18]

John Backus said during a 1979 interview with Think, the IBM employee magazine, "Much of my work has come from being lazy. I didn't like writing programs, and so, when I was working on the IBM 701, writing programs for computing missile

IBM 701, writing programs for computing missile trajectories, I started work on a programming system to make it easier to write programs."[19]

The language was widely adopted by scientists for writing numerically intensive programs, which encouraged compiler writers to produce compilers that could generate faster and more efficient code.  The inclusion of a complex number data type in the

inclusion of a complex number data type in the language made Fortran especially suited to technical applications such as electrical engineering.[20]

By 1960, versions of FORTRAN were available for the IBM 709, 650, 1620, and 7090 computers.  Significantly, the increasing popularity of FORTRAN spurred competing computer manufacturers to provide FORTRAN compilers for their machines, so that by

FORTRAN compilers for their machines, so that by 1963 over 40 FORTRAN compilers existed.

FORTRAN was provided for the IBM 1401 computer by an innovative 63-phase compiler that ran entirely in its core memory of only 8000 (six-bit) characters.  The compiler could be run from tape, or from a 2200-card deck; it used no further tape or disk

a 2200-card deck; it used no further tape or disk storage.  It kept the program in memory and loaded overlays that gradually transformed it, in place, into executable form, as described by Haines.[21]

This article was reprinted, edited, in both editions of Anatomy of a Compiler[22] and in the IBM manual "Fortran Specifications and Operating Procedures, IBM 1401".[23]  The executable form was not entirely machine language; rather, floating-point

entirely machine language; rather, floating-point arithmetic, sub-scripting, input/output, and function references were interpreted, preceding UCSD Pascal P-code by two decades. GOTRAN, a simplified, interpreted version of FORTRAN I (with only 12

interpreted version of FORTRAN I (with only 12 statements not 32) for "load and go" operation was available (at least for the early IBM 1620 computer).[24] Modern Fortran, and almost all later versions, are fully compiled, as done for other

versions, are fully compiled, as done for other high-performance languages.

The development of Fortran paralleled the early evolution of compiler technology, and many advances in the theory and design of compilers were specifically motivated by the need to generate efficient code for Fortran programs.
FORTRAN[edit]

FORTRAN[edit]
The initial release of FORTRAN for the IBM 704[10] contained 32 statements, including:
DIMENSION and EQUIVALENCE statements
Assignment statements

Assignment statements
Three-way arithmetic IF statement, which passed control to one of three locations in the program depending on whether the result of the arithmetic expression was negative, zero, or positive

Control statements for checking exceptions (IF ACCUMULATOR OVERFLOW, IF QUOTIENT OVERFLOW, and IF DIVIDE CHECK); and control statements for manipulating sense switches and sense lights (IF (SENSE SWITCH), IF (SENSE LIGHT), and SENSE LIGHT)

GO TO, computed GO TO, ASSIGN, and assigned GO TO
DO loops
Formatted I/O: FORMAT, READ, READ INPUT TAPE, WRITE OUTPUT TAPE, PRINT, and PUNCH
Unformatted I/O: READ TAPE, READ DRUM, WRITE TAPE, and WRITE DRUM
Other I/O: END FILE, REWIND, and BACKSPACE

Other I/O: END FILE, REWIND, and BACKSPACE
PAUSE, STOP, and CONTINUE
FREQUENCY statement (for providing optimization hints to the compiler).

The arithmetic IF statement was reminiscent of (but not readily implementable by) a three-way comparison instruction (CAS—Compare Accumulator with Storage) available on the 704. The statement provided the only way to compare numbers—by testing their

the only way to compare numbers—by testing their difference, with an attendant risk of overflow. This deficiency was later overcome by "logical" facilities introduced in FORTRAN IV.

The FREQUENCY statement was used originally (and optionally) to give branch probabilities for the three branch cases of the arithmetic IF statement. It could also be used to suggest how many iterations a DO loop might run. The first FORTRAN compiler

a DO loop might run. The first FORTRAN compiler used this weighting to perform at compile time a Monte Carlo simulation of the generated code, the results of which were used to optimize the placement of basic blocks in memory—a very sophisticated

of basic blocks in memory—a very sophisticated optimization for its time. The Monte Carlo technique is documented in Backus et al.'s paper on this original implementation, The FORTRAN Automatic Coding System:

The fundamental unit of program is the basic block; a basic block is a stretch of program which has one entry point and one exit point. The purpose of section 4 is to prepare for section 5 a table of predecessors (PRED table) which enumerates the

of predecessors (PRED table) which enumerates the basic blocks and lists for every basic block each of the basic blocks which can be its immediate predecessor in flow, together with the absolute frequency of each such basic block link. This table is

of each such basic block link. This table is obtained by running the program once in Monte-Carlo fashion, in which the outcome of conditional transfers arising out of IF-type statements and computed GO TO's is determined by a random number generator

TO's is determined by a random number generator suitably weighted according to whatever FREQUENCY statements have been provided.[16]

The first FORTRAN compiler reported diagnostic information by halting the program when an error was found and outputting an error code on its console. That code could be looked up by the programmer in an error messages table in the operator's

in an error messages table in the operator's manual, providing them with a brief description of the problem.[10]: p.19–20 [25] Later, an error-handling subroutine to handle user errors such as division by zero, developed by NASA,[26] was

as division by zero, developed by NASA,[26] was incorporated, informing users of which line of code contained the error.

Fixed layout and punched cards[edit]
See also: Computer programming in the punched card era
FORTRAN code on a punched card, showing the specialized uses of columns 1–5, 6 and 73–80

A reproduction of a FORTRAN coding form, printed on paper and intended to be used by programmers to prepare programs for punching onto cards by keypunch operators. Now obsolete.

Before the development of disk files, text editors and terminals, programs were most often entered on a keypunch keyboard onto 80-column punched cards, one line to a card. The resulting deck of cards would be fed into a card reader to be compiled.

would be fed into a card reader to be compiled. Punched card codes included no lower-case letters or many special characters, and special versions of the IBM 026 keypunch were offered that would correctly print the re-purposed special characters

print the re-purposed special characters used in FORTRAN.

Reflecting punched card input practice, Fortran programs were originally written in a fixed-column format, with the first 72 columns read into twelve 36-bit words.

A letter "C" in column 1 caused the entire card to be treated as a comment and ignored by the compiler. Otherwise, the columns of the card were divided into four fields:

1 to 5 were the label field: a sequence of digits here was taken as a label for use in DO or control statements such as GO TO and IF, or to identify a FORMAT statement referred to in a WRITE or READ statement. Leading zeros are ignored and 0 is not

statement. Leading zeros are ignored and 0 is not a valid label number.

6 was a continuation field: a character other than a blank or a zero here caused the card to be taken as a continuation of the statement on the prior card. The continuation cards were usually numbered 1, 2, etc. and the starting card might therefore

1, 2, etc. and the starting card might therefore have zero in its continuation column—which is not a continuation of its preceding card.

7 to 72 served as the statement field.
73 to 80 were ignored (the IBM 704's card reader only used 72 columns).[27]

Columns 73 to 80 could therefore be used for identification information, such as punching a sequence number or text, which could be used to re-order cards if a stack of cards was dropped; though in practice this was reserved for stable, production

practice this was reserved for stable, production programs. An IBM 519 could be used to copy a program deck and add sequence numbers. Some early compilers, e.g., the IBM 650's, had additional restrictions due to limitations on their card

restrictions due to limitations on their card readers.[28] Keypunches could be programmed to tab to column 7 and skip out after column 72. Later compilers relaxed most fixed-format restrictions, and the requirement was eliminated in the Fortran 90

the requirement was eliminated in the Fortran 90 standard.

Within the statement field, whitespace characters (blanks) were ignored outside a text literal. This allowed omitting spaces between tokens for brevity or including spaces within identifiers for clarity. For example, AVG OF X was a valid identifier,

For example, AVG OF X was a valid identifier, equivalent to AVGOFX, and 101010DO101I=1,101 was a valid statement, equivalent to 10101  DO 101 I = 1, 101 because the zero in column 6 is treated as if it were a space (!), while 101010DO101I=1.101 was

it were a space (!), while 101010DO101I=1.101 was instead 10101  DO101I = 1.101, the assignment of 1.101 to a variable called DO101I. Note the slight visual difference between a comma and a period.

Hollerith strings, originally allowed only in FORMAT and DATA statements, were prefixed by a character count and the letter H (e.g., 26HTHIS IS ALPHANUMERIC DATA.), allowing blanks to be retained within the character string. Miscounts were a

within the character string. Miscounts were a problem.

Evolution[edit]
Timeline of Fortran language
Year
Informal name
ANSI Standard
ISO/IEC Standard
1957
FORTRAN
—
—
1958
FORTRAN II
—
—
1958
FORTRAN III
—
—
1961
FORTRAN IV
—
—
1966
FORTRAN 66
X3.9-1966
—
1978
FORTRAN 77
X3.9-1978
—
1991
Fortran 90

—
1978
FORTRAN 77
X3.9-1978
—
1991
Fortran 90
X3.198-1992
1539:1991
1997
Fortran 95
—
1539-1:1997
2004
Fortran 2003
—
1539-1:2004
2010
Fortran 2008
—
1539-1:2010
2018
Fortran 2018
—
1539-1:2018
2023
Fortran 2023
—
1539-1:2023
FORTRAN II[edit]

IBM's FORTRAN II appeared in 1958.  The main enhancement was to support procedural programming by allowing user-written subroutines and functions which returned values with parameters passed by reference.  The COMMON statement provided a way for

The COMMON statement provided a way for subroutines to access common (or global) variables. Six new statements were introduced:[29]

SUBROUTINE, FUNCTION, and END
CALL and RETURN
COMMON
Over the next few years, FORTRAN II added support for the DOUBLE PRECISION and COMPLEX data types.

Early FORTRAN compilers supported no recursion in subroutines. Early computer architectures supported no concept of a stack, and when they did directly support subroutine calls, the return location was often stored in one fixed location adjacent to

often stored in one fixed location adjacent to the subroutine code (e.g. the IBM 1130) or a specific machine register (IBM 360 et seq), which only allows recursion if a stack is maintained by software and the return address is stored on the stack

and the return address is stored on the stack before the call is made and restored after the call returns. Although not specified in FORTRAN 77, many F77 compilers supported recursion as an option, and the Burroughs mainframes, designed with

and the Burroughs mainframes, designed with recursion built-in, did so by default. It became a standard in Fortran 90 via the new keyword RECURSIVE.[30]

Simple FORTRAN II program[edit]

This program, for Heron's formula, reads data on a tape reel containing three 5-digit integers A, B, and C as input. There are no "type" declarations available: variables whose name starts with I, J, K, L, M, or N are "fixed-point" (i.e. integers),

K, L, M, or N are "fixed-point" (i.e. integers), otherwise floating-point. Since integers are to be processed in this example, the names of the variables start with the letter "I". The name of a variable must start with a letter and can continue

must start with a letter and can continue with both letters and digits, up to a limit of six characters in FORTRAN II.  If A, B, and C cannot represent the sides of a triangle in plane geometry, then the program's execution will end with an error

the program's execution will end with an error code of "STOP 1".  Otherwise, an output line will be printed showing the input values for A, B, and C, followed by the computed AREA of the triangle as a floating-point number occupying ten spaces along

floating-point number occupying ten spaces along the line of output and showing 2 digits after the decimal point, the .2 in F10.2 of the FORMAT statement with label 601.

C AREA OF A TRIANGLE WITH A STANDARD SQUARE ROOT FUNCTION
C INPUT - TAPE READER UNIT 5, INTEGER INPUT
C OUTPUT - LINE PRINTER UNIT 6, REAL OUTPUT
C INPUT ERROR DISPLAY ERROR OUTPUT CODE 1 IN JOB CONTROL LISTING
READ INPUT TAPE 5, 501, IA, IB, IC

READ INPUT TAPE 5, 501, IA, IB, IC
501 FORMAT (3I5)
C IA, IB, AND IC MAY NOT BE NEGATIVE OR ZERO
C FURTHERMORE, THE SUM OF TWO SIDES OF A TRIANGLE
C MUST BE GREATER THAN THE THIRD SIDE, SO WE CHECK FOR THAT, TOO
IF (IA) 777, 777, 701

IF (IA) 777, 777, 701
701 IF (IB) 777, 777, 702
702 IF (IC) 777, 777, 703
703 IF (IA+IB-IC) 777, 777, 704
704 IF (IA+IC-IB) 777, 777, 705
705 IF (IB+IC-IA) 777, 777, 799
777 STOP 1
C USING HERON'S FORMULA WE CALCULATE THE
C AREA OF THE TRIANGLE

C AREA OF THE TRIANGLE
799 S = FLOATF (IA + IB + IC) / 2.0
AREA = SQRTF( S * (S - FLOATF(IA)) * (S - FLOATF(IB)) *
+     (S - FLOATF(IC)))
WRITE OUTPUT TAPE 6, 601, IA, IB, IC, AREA
601 FORMAT (4H A= ,I5,5H  B= ,I5,5H  C= ,I5,8H  AREA= ,F10.2,

+        13H SQUARE UNITS)
STOP
END
FORTRAN III[edit]

IBM also developed a FORTRAN III in 1958 that allowed for inline assembly code among other features; however, this version was never released as a product.  Like the 704 FORTRAN and FORTRAN II, FORTRAN III included machine-dependent features that

III included machine-dependent features that made code written in it unportable from machine to machine.[11]: 76   Early versions of FORTRAN provided by other vendors suffered from the same disadvantage.

FORTRAN IV[edit]

IBM began development of FORTRAN IV starting in 1961, as a result of customer demands. FORTRAN IV removed the machine-dependent features of FORTRAN II (such as READ INPUT TAPE), while adding new features such as a LOGICAL data type, logical Boolean

such as a LOGICAL data type, logical Boolean expressions and the logical IF statement as an alternative to the arithmetic IF statement.  FORTRAN IV was eventually released in 1962, first for the IBM 7030 ("Stretch") computer, followed by versions

7030 ("Stretch") computer, followed by versions for the IBM 7090, IBM 7094, and later for the IBM 1401 in 1966.[31]

By 1965, FORTRAN IV was supposed to be compliant with the standard being developed by the American Standards Association X3.4.3 FORTRAN Working Group.[32]

Between 1966 and 1968, IBM offered several FORTRAN IV compilers for its System/360, each named by letters that indicated the minimum amount of memory the compiler needed to run.
[33]

[33]
The letters (F, G, H) matched the codes used with System/360 model numbers to indicate memory size, each letter increment being a factor of two larger:[34]: p. 5
1966 : FORTRAN IV F for DOS/360 (64K bytes)

1966 : FORTRAN IV F for DOS/360 (64K bytes)
1966 : FORTRAN IV G for OS/360 (128K bytes)
1968 : FORTRAN IV H for OS/360 (256K bytes)

Digital Equipment Corporation maintained DECSYSTEM-10 Fortran IV (F40) for PDP-10 from 1967 to 1975.[35] Compilers were also available for the UNIVAC 1100 series and the Control Data 6000 series and 7000 series systems.[36]

At about this time FORTRAN IV had started to become an important educational tool and implementations such as the University of Waterloo's WATFOR and WATFIV were created to simplify the complex compile and link processes of earlier compilers.

In the FORTRAN IV programming environment of the era, except for that used on Control Data Corporation (CDC) systems, only one instruction was placed per line. The CDC version allowed for multiple instructions per line if separated by a $ (dollar)

per line if separated by a $ (dollar) character. The FORTRAN sheet was divided into four fields, as described above.

Two compilers of the time, IBM "G" and UNIVAC, allowed comments to be written on the same line as instructions, separated by a special character: "master space": V (perforations 7 and 8) for UNIVAC and perforations 12/11/0/7/8/9 (hexadecimal FF) for

perforations 12/11/0/7/8/9 (hexadecimal FF) for IBM. These comments were not to be inserted in the middle of continuation cards.[35][36]

FORTRAN 66[edit]

Perhaps the most significant development in the early history of FORTRAN was the decision by the American Standards Association (now American National Standards Institute (ANSI)) to form a committee sponsored by the Business Equipment Manufacturers

sponsored by the Business Equipment Manufacturers Association (BEMA) to develop an American Standard Fortran.  The resulting two standards, approved in March 1966, defined two languages, FORTRAN (based on FORTRAN IV, which had served as a de facto

on FORTRAN IV, which had served as a de facto standard), and Basic FORTRAN (based on FORTRAN II, but stripped of its machine-dependent features).  The FORTRAN defined by the first standard, officially denoted X3.9-1966, became known as FORTRAN 66

denoted X3.9-1966, became known as FORTRAN 66 (although many continued to term it FORTRAN IV, the language on which the standard was largely based).  FORTRAN 66 effectively became the first industry-standard version of FORTRAN. FORTRAN 66 included:

Main program, SUBROUTINE, FUNCTION, and BLOCK DATA program units
INTEGER, REAL, DOUBLE PRECISION, COMPLEX, and LOGICAL data types
COMMON, DIMENSION, and EQUIVALENCE statements
DATA statement for specifying initial values

DATA statement for specifying initial values
Intrinsic and EXTERNAL (e.g., library) functions
Assignment statement
GO TO, computed GO TO, assigned GO TO, and ASSIGN statements
Logical IF and arithmetic (three-way) IF statements
DO loop statement

DO loop statement
READ, WRITE, BACKSPACE, REWIND, and ENDFILE statements for sequential I/O
FORMAT statement and assigned format
CALL, RETURN, PAUSE, and STOP statements

CALL, RETURN, PAUSE, and STOP statements
Hollerith constants in DATA and FORMAT statements, and as arguments to procedures
Identifiers of up to six characters in length
Comment lines
END line

The above Fortran II version of the Heron program needs several modifications to compile as a Fortran 66 program.  Modifications include using the more machine independent versions of the READ and WRITE statements, and removal of the unneeded FLOATF

statements, and removal of the unneeded FLOATF type conversion functions.  Though not required, the arithmetic IF statements can be re-written to use logical IF statements and expressions in a more structured fashion.

C AREA OF A TRIANGLE WITH A STANDARD SQUARE ROOT FUNCTION
C INPUT - TAPE READER UNIT 5, INTEGER INPUT
C OUTPUT - LINE PRINTER UNIT 6, REAL OUTPUT
C INPUT ERROR DISPLAY ERROR OUTPUT CODE 1 IN JOB CONTROL LISTING
READ (5, 501) IA, IB, IC

READ (5, 501) IA, IB, IC
501 FORMAT (3I5)
C
C IA, IB, AND IC MAY NOT BE NEGATIVE OR ZERO
C FURTHERMORE, THE SUM OF TWO SIDES OF A TRIANGLE
C MUST BE GREATER THAN THE THIRD SIDE, SO WE CHECK FOR THAT, TOO

IF (IA .GT. 0 .AND. IB .GT. 0 .AND. IC .GT. 0) GOTO 10
WRITE (6, 602)
602   FORMAT (42H IA, IB, AND IC MUST BE GREATER THAN ZERO.)
STOP 1
10 CONTINUE
C
IF (IA+IB-IC .GT. 0
+    .AND. IA+IC-IB .GT. 0
+    .AND. IB+IC-IA .GT. 0) GOTO 20
WRITE (6, 603)

WRITE (6, 603)
603   FORMAT (50H SUM OF TWO SIDES MUST BE GREATER THAN THIRD SIDE.)
STOP 1
20 CONTINUE
C
C USING HERON'S FORMULA WE CALCULATE THE
C AREA OF THE TRIANGLE
S = (IA + IB + IC) / 2.0
AREA = SQRT ( S * (S - IA) * (S - IB) * (S - IC))

AREA = SQRT ( S * (S - IA) * (S - IB) * (S - IC))
WRITE (6, 601) IA, IB, IC, AREA
601 FORMAT (4H A= ,I5,5H  B= ,I5,5H  C= ,I5,8H  AREA= ,F10.2,
+        13H SQUARE UNITS)
STOP
END
FORTRAN 77[edit]

STOP
END
FORTRAN 77[edit]
FORTRAN-77 program with compiler output, written on a CDC 175 at RWTH Aachen University, Germany, in 1987
4.3 BSD for the Digital Equipment Corporation (DEC) VAX, displaying the manual for FORTRAN 77 (f77) compiler

After the release of the FORTRAN 66 standard, compiler vendors introduced several extensions to Standard Fortran, prompting ANSI committee X3J3 in 1969 to begin work on revising the 1966 standard, under sponsorship of CBEMA, the Computer Business

under sponsorship of CBEMA, the Computer Business Equipment Manufacturers Association (formerly BEMA).  Final drafts of this revised standard circulated in 1977, leading to formal approval of the new FORTRAN standard in April 1978.  The new

the new FORTRAN standard in April 1978.  The new standard, called FORTRAN 77 and officially denoted X3.9-1978, added a number of significant features to address many of the shortcomings of FORTRAN 66:

Block IF and END IF statements, with optional ELSE IF and ELSE clauses, to provide improved language support for structured programming
DO loop extensions, including parameter expressions, negative increments, and zero trip counts

OPEN, CLOSE, and INQUIRE statements for improved I/O capability
Direct-access file I/O
IMPLICIT statement, to override implicit conventions that undeclared variables are INTEGER if their name begins with I, J, K, L, M, or N (and REAL otherwise)

CHARACTER data type, replacing Hollerith strings with vastly expanded facilities for character input and output and processing of character-based data
PARAMETER statement for specifying constants
SAVE statement for persistent local variables

SAVE statement for persistent local variables
Generic names for intrinsic functions (e.g. SQRT also accepts arguments of other types, such as COMPLEX or REAL*16).

A set of intrinsics (LGE, LGT, LLE, LLT) for lexical comparison of strings, based upon the ASCII collating sequence. (These ASCII functions were demanded by the U.S. Department of Defense, in their conditional approval vote.[citation needed])

A maximum of seven dimensions in arrays, rather than three.  Allowed subscript expressions were also generalized.

In this revision of the standard, a number of features were removed or altered in a manner that might invalidate formerly standard-conforming programs.

(Removal was the only allowable alternative to X3J3 at that time, since the concept of "deprecation" was not yet available for ANSI standards.)

While most of the 24 items in the conflict list (see Appendix A2 of X3.9-1978) addressed loopholes or pathological cases permitted by the prior standard but rarely used, a small number of specific capabilities were deliberately removed, such as:

Hollerith constants and Hollerith data, such as GREET = 12HHELLO THERE!
Reading into an H edit (Hollerith field) descriptor in a FORMAT specification
Overindexing of array bounds by subscripts       DIMENSION A(10,5)
Y = A(11,1)

Y = A(11,1)
Transfer of control out of and back into the range of a DO loop (also known as "Extended Range")

A Fortran 77 version of the Heron program requires no modifications to the Fortran 66 version.  However this example demonstrates additional cleanup of the I/O statements, including using list-directed I/O, and replacing the Hollerith edit

I/O, and replacing the Hollerith edit descriptors in the FORMAT statements with quoted strings.  It also uses structured IF and END IF statements, rather than GOTO/CONTINUE.

PROGRAM HERON
C AREA OF A TRIANGLE WITH A STANDARD SQUARE ROOT FUNCTION
C INPUT - DEFAULT STANDARD INPUT UNIT, INTEGER INPUT
C OUTPUT - DEFAULT STANDARD OUTPUT UNIT, REAL OUTPUT
C INPUT ERROR DISPLAY ERROR OUTPUT CODE 1 IN JOB CONTROL LISTING

READ (*, *) IA, IB, IC
C
C IA, IB, AND IC MAY NOT BE NEGATIVE OR ZERO
C FURTHERMORE, THE SUM OF TWO SIDES OF A TRIANGLE
C MUST BE GREATER THAN THE THIRD SIDE, SO WE CHECK FOR THAT, TOO
IF (IA .LE. 0 .OR. IB .LE. 0 .OR. IC .LE. 0) THEN

IF (IA .LE. 0 .OR. IB .LE. 0 .OR. IC .LE. 0) THEN
WRITE (*, *) 'IA, IB, and IC must be greater than zero.'
STOP 1
END IF
C
IF (IA+IB-IC .LE. 0
+    .OR. IA+IC-IB .LE. 0
+    .OR. IB+IC-IA .LE. 0) THEN

+    .OR. IB+IC-IA .LE. 0) THEN
WRITE (*, *) 'Sum of two sides must be greater than third side.'
STOP 1
END IF
C
C USING HERON'S FORMULA WE CALCULATE THE
C AREA OF THE TRIANGLE
S = (IA + IB + IC) / 2.0

C AREA OF THE TRIANGLE
S = (IA + IB + IC) / 2.0
AREA = SQRT ( S * (S - IA) * (S - IB) * (S - IC))
WRITE (*, 601) IA, IB, IC, AREA
601 FORMAT ('A= ', I5, '  B= ', I5, '  C= ', I5, '  AREA= ', F10.2,
+        ' square units')
STOP
END

+        ' square units')
STOP
END
Transition to ANSI Standard Fortran[edit]

The development of a revised standard to succeed FORTRAN 77 would be repeatedly delayed as the standardization process struggled to keep up with rapid changes in computing and programming practice.  In the meantime, as the "Standard FORTRAN" for

In the meantime, as the "Standard FORTRAN" for nearly fifteen years, FORTRAN 77 would become the historically most important dialect.

An important practical extension to FORTRAN 77 was the release of MIL-STD-1753 in 1978.[37] This specification, developed by the U.S. Department of Defense, standardized a number of features implemented by most FORTRAN 77 compilers but not included

by most FORTRAN 77 compilers but not included in the ANSI FORTRAN 77 standard. These features would eventually be incorporated into the Fortran 90 standard.

DO WHILE and END DO statements
INCLUDE statement
IMPLICIT NONE variant of the IMPLICIT statement
Bit manipulation intrinsic functions, based on similar functions included in Industrial Real-Time Fortran (ANSI/ISA S61.1 (1976))

The IEEE 1003.9 POSIX Standard, released in 1991, provided a simple means for FORTRAN 77 programmers to issue POSIX system calls.[38] Over 100 calls were defined in the document –  allowing access to POSIX-compatible process control, signal

to POSIX-compatible process control, signal handling, file system control, device control, procedure pointing, and stream I/O in a portable manner.

Fortran 90[edit]

The much-delayed successor to FORTRAN 77, informally known as Fortran 90 (and prior to that, Fortran 8X), was finally released as ISO/IEC standard 1539:1991 in 1991 and an ANSI Standard in 1992.  In addition to changing the official spelling from

addition to changing the official spelling from FORTRAN to Fortran, this major revision added many new features to reflect the significant changes in programming practice that had evolved since the 1978 standard:

Free-form source input removed the need to skip the first six character positions before entering statements.
Lowercase Fortran keywords
Identifiers up to 31 characters in length (In the previous standard, it was only six characters).

Inline comments
Ability to operate on arrays (or array sections) as a whole, thus greatly simplifying math and engineering computations.
whole, partial and masked array assignment statements and array expressions, such as X(1:N)=R(1:N)*COS(A(1:N))

WHERE statement for selective array assignment
array-valued constants and expressions,
user-defined array-valued functions and array constructors.
RECURSIVE procedures

RECURSIVE procedures
Modules, to group related procedures and data together, and make them available to other program units, including the capability to limit the accessibility to only specific parts of the module.

A vastly improved argument-passing mechanism, allowing interfaces to be checked at compile time
User-written interfaces for generic procedures
Operator overloading
Derived (structured) data types

Derived (structured) data types
New data type declaration syntax, to specify the data type and other attributes of variables
Dynamic memory allocation by means of the ALLOCATABLE attribute and the ALLOCATE and DEALLOCATE statements

POINTER attribute, pointer assignment, and NULLIFY statement to facilitate the creation and manipulation of dynamic data structures

Structured looping constructs, with an END DO statement for loop termination, and EXIT and CYCLE statements for terminating normal DO loop iterations in an orderly way

SELECT CASE, CASE, . . . CASE DEFAULT, END SELECT construct for multi-way selection
Portable specification of numerical precision under the user's control
New and enhanced intrinsic procedures.
Obsolescence and deletions[edit]

Unlike the prior revision, Fortran 90 removed no features.[39] Any standard-conforming FORTRAN 77 program was also standard-conforming under Fortran 90, and either standard should have been usable to define its behavior.

A small set of features were identified as "obsolescent" and were expected to be removed in a future standard.  All of the functionalities of these early-version features can be performed by newer Fortran features.  Some are kept to simplify porting

features.  Some are kept to simplify porting of old programs but many were deleted in Fortran 95.

Obsolescence and deletions
Obsolescent feature
Current Status
Arithmetic IF-statement
Obsolescent in F90, deleted in F2018
Non-integer DO parameters or control variables
Obsolescent in F90, deleted in F95

Obsolescent in F90, deleted in F95
Shared DO-loop termination or termination with a statement other than END DO or CONTINUE
Obsolescent in F90, deleted in F2018
Branching to END IF from outside a block
Obsolescent in F90, deleted in F95

Obsolescent in F90, deleted in F95
PAUSE statement
Obsolescent in F90, deleted in F95
ASSIGN statement and assigned GO TO statement
Obsolescent in F90, deleted in F95
Assigned statement numbers and FORMAT specifiers

Assigned statement numbers and FORMAT specifiers
Obsolescent in F90, deleted in F95
H edit descriptor
Obsolescent in F90, deleted in F95
Vertical format control
Deleted in F2003
Alternate return
Obsolescent in F90
Computed GO TO statement

Obsolescent in F90
Computed GO TO statement
Obsolescent in F90
Statement functions
Obsolescent in F90
DATA statements among executable statements
Obsolescent in F90
Assumed length character functions
Obsolescent in F90
Fixed form source code

Obsolescent in F90
Fixed form source code
Obsolescent in F90
CHARACTER* form of CHARACTER declaration
Obsolescent in F90
ENTRY statements
Obsolescent in F2008
Label form of DO statement
Obsolescent in F2018

Label form of DO statement
Obsolescent in F2018
COMMON and EQUIVALENCE statements, and the BLOCK DATA program unit
Obsolescent in F2018
Specific names for intrinsic function
Obsolescent in F2018
FORALL construct and statement
Obsolescent in F2018

Obsolescent in F2018
"Hello, World!" example[edit]
program helloworld
print *, "Hello, World!"
end program helloworld
Fortran 95[edit]
"F95" redirects here. For other uses, see F95 (disambiguation).
Main article: Fortran 95 language features

Fortran 95, published officially as ISO/IEC 1539-1:1997, was a minor revision, mostly to resolve some outstanding issues from the Fortran 90 standard.  Nevertheless, Fortran 95 also added a number of extensions, notably from the High Performance

of extensions, notably from the High Performance Fortran specification:

FORALL and nested WHERE constructs to aid vectorization
User-defined PURE and ELEMENTAL procedures
Default initialization of derived type components, including pointer initialization

Expanded the ability to use initialization expressions for data objects
Initialization of pointers to NULL()
Clearly defined that ALLOCATABLE arrays are automatically deallocated when they go out of scope.

A number of intrinsic functions were extended (for example a dim argument was added to the maxloc intrinsic).
Several features noted in Fortran 90 to be "obsolescent" were removed from Fortran 95:

DO statements using REAL and DOUBLE PRECISION index variables
Branching to an END IF statement from outside its block
PAUSE statement
ASSIGN and assigned GO TO statement, and assigned format specifiers
H Hollerith edit descriptor.

An important supplement to Fortran 95 was the ISO technical report TR-15581: Enhanced Data Type Facilities, informally known as the Allocatable TR.  This specification defined enhanced use of ALLOCATABLE arrays, prior to the availability of fully

arrays, prior to the availability of fully Fortran 2003-compliant Fortran compilers.  Such uses include ALLOCATABLE arrays as derived type components, in procedure dummy argument lists, and as function return values.  (ALLOCATABLE arrays are

function return values.  (ALLOCATABLE arrays are preferable to POINTER-based arrays because ALLOCATABLE arrays are guaranteed by Fortran 95 to be deallocated automatically when they go out of scope, eliminating the possibility of memory leakage.  In

the possibility of memory leakage.  In addition, elements of allocatable arrays are contiguous, and aliasing is not an issue for optimization of array references, allowing compilers to generate faster code than in the case of pointers.[40])

Another important supplement to Fortran 95 was the ISO technical report TR-15580: Floating-point exception handling, informally known as the IEEE TR.  This specification defined support for IEEE floating-point arithmetic and floating-point exception

arithmetic and floating-point exception handling.

Conditional compilation and varying length strings[edit]
In addition to the mandatory "Base language" (defined in ISO/IEC 1539-1 : 1997), the Fortran 95 language also included two optional modules:

Varying length character strings (ISO/IEC 1539-2 : 2000)
Conditional compilation (ISO/IEC 1539-3 : 1998)
which, together, compose the multi-part International Standard (ISO/IEC 1539).

According to the standards developers, "the optional parts describe self-contained features which have been requested by a substantial body of users and/or implementors, but which are not deemed to be of sufficient generality for them to be required

of sufficient generality for them to be required in all standard-conforming Fortran compilers." Nevertheless, if a standard-conforming Fortran does provide such options, then they "must be provided in accordance with the description of those

in accordance with the description of those facilities in the appropriate Part of the Standard".

Modern Fortran[edit]

The language defined by the twenty-first century standards, in particular because of its incorporation of object-oriented programming support and subsequently Coarray Fortran, is often referred to as 'Modern Fortran', and the term is increasingly

as 'Modern Fortran', and the term is increasingly used in the literature.[41]

Fortran 2003[edit]

Fortran 2003, officially published as ISO/IEC 1539-1:2004, was a major revision introducing many new features.[42] A comprehensive summary of the new features of Fortran 2003 is available at the Fortran Working Group (ISO/IEC JTC1/SC22/WG5) official

Working Group (ISO/IEC JTC1/SC22/WG5) official Web site.[43]

From that article, the major enhancements for this revision include:
Derived type enhancements: parameterized derived types, improved control of accessibility, improved structure constructors, and finalizers

Object-oriented programming support: type extension and inheritance, polymorphism, dynamic type allocation, and type-bound procedures, providing complete support for abstract data types

Data manipulation enhancements: allocatable components (incorporating TR 15581), deferred type parameters, VOLATILE attribute, explicit type specification in array constructors and allocate statements, pointer enhancements, extended initialization

pointer enhancements, extended initialization expressions, and enhanced intrinsic procedures

Input/output enhancements: asynchronous transfer, stream access, user specified transfer operations for derived types, user specified control of rounding during format conversions, named constants for preconnected units, the FLUSH statement,

for preconnected units, the FLUSH statement, regularization of keywords, and access to error messages

Procedure pointers
Support for IEEE floating-point arithmetic and floating-point exception handling (incorporating TR 15580)
Interoperability with the C programming language

Interoperability with the C programming language
Support for international usage: access to ISO 10646 4-byte characters and choice of decimal or comma in numeric formatted input/output

Enhanced integration with the host operating system: access to command-line arguments, environment variables, and processor error messages

An important supplement to Fortran 2003 was the ISO technical report TR-19767: Enhanced module facilities in Fortran.  This report provided sub-modules, which make Fortran modules more similar to Modula-2 modules.  They are similar to Ada private

modules.  They are similar to Ada private child sub-units.  This allows the specification and implementation of a module to be expressed in separate program units, which improves packaging of large libraries, allows preservation of trade secrets

libraries, allows preservation of trade secrets while publishing definitive interfaces, and prevents compilation cascades.

Fortran 2008[edit]

ISO/IEC 1539-1:2010, informally known as Fortran 2008, was approved in September 2010.[44][45] As with Fortran 95, this is a minor upgrade, incorporating clarifications and corrections to Fortran 2003, as well as introducing some new capabilities.

as well as introducing some new capabilities.  The new capabilities include:

Sub-modules – additional structuring facilities for modules; supersedes ISO/IEC TR 19767:2005
Coarray Fortran – a parallel execution model
The DO CONCURRENT construct – for loop iterations with no interdependencies

The CONTIGUOUS attribute – to specify storage layout restrictions
The BLOCK construct – can contain declarations of objects with construct scope
Recursive allocatable components – as an alternative to recursive pointers in derived types

The Final Draft international Standard (FDIS) is available as document N1830.[46]

A supplement to Fortran 2008 is the International Organization for Standardization (ISO) Technical Specification (TS) 29113 on Further Interoperability of Fortran with C,[47][48] which has been submitted to ISO in May 2012 for approval. The

submitted to ISO in May 2012 for approval. The specification adds support for accessing the array descriptor from C and allows ignoring the type and rank of arguments.

Fortran 2018[edit]
The Fortran 2018 revision of the language was earlier referred to as Fortran 2015.[49] It was a significant revision and was released on November 28, 2018.[50]

Fortran 2018 incorporates two previously published Technical Specifications:
ISO/IEC TS 29113:2012 Further Interoperability with C[51]
ISO/IEC TS 18508:2015 Additional Parallel Features in Fortran[52]

Additional changes and new features include support for ISO/IEC/IEEE 60559:2011 (the version of the IEEE floating-point standard before the latest minor revision IEEE 754–2019), hexadecimal input/output, IMPLICIT NONE enhancements and other

IMPLICIT NONE enhancements and other changes.[53][54][55][56]

Fortran 2018 deleted the arithmetic IF statement.  It also deleted non-block DO constructs - loops which do not end with an END DO or CONTINUE statement.  These had been an obsolescent part of the language since Fortran 90.

New obsolescences are: COMMON and EQUIVALENCE statements and the BLOCK DATA program unit, labelled DO loops, specific names for intrinsic functions, and the FORALL statement and construct.
Fortran 2023[edit]

Fortran 2023[edit]
Fortran 2023 (ISO/IEC 1539-1:2023) was published in November 2023, and can be purchased from the ISO.[57]
Fortran 2023 is a minor extension of Fortran 2018 that focuses on correcting errors and omissions

in Fortran 2018.  It also adds some small features, including an enumerated type capability.
Language features[edit]
Main article: Fortran 95 language features

A full description of the Fortran language features brought by Fortran 95 is covered in the related article, Fortran 95 language features. The language versions defined by later standards are often referred to collectively as 'Modern Fortran' and

referred to collectively as 'Modern Fortran' and are described in the literature.

Science and engineering[edit]
General relativistic magnetohydrodynamic Fortran simulation of black hole accretion using the BHAC code with cartesian adaptive mesh
Flow around a cylinder computed in Fortran with OpenCL (University of Bristol, UK)

Velocity and sea surface temperature in the oceans, computed with the NEMO Fortran code (Nucleus for European Modeling of the Ocean, https://www.nemo-ocean.eu) in the Barcelona Supercomputing Center (2020)

Although a 1968 journal article by the authors of BASIC already described FORTRAN as "old-fashioned",[58] programs have been written in Fortran for many decades and there is a vast body of Fortran software in daily use throughout the scientific and

in daily use throughout the scientific and engineering communities.[59] Jay Pasachoff wrote in 1984 that "physics and astronomy students simply have to learn FORTRAN.  So much exists in FORTRAN that it seems unlikely that scientists will change to

it seems unlikely that scientists will change to Pascal, Modula-2, or whatever."[60] In 1993, Cecil E. Leith called FORTRAN the "mother tongue of scientific computing", adding that its replacement by any other possible language "may remain a forlorn

any other possible language "may remain a forlorn hope".[61]

It is the primary language for some of the most intensive super-computing tasks, such as in astronomy, climate modeling, computational chemistry, computational economics, computational fluid dynamics, computational physics, data analysis,[62]

computational physics, data analysis,[62] hydrological modeling, numerical linear algebra and numerical libraries (LAPACK, IMSL and NAG), optimization, satellite simulation, structural engineering, and weather prediction.[63]  Many of the

and weather prediction.[63]  Many of the floating-point benchmarks to gauge the performance of new computer processors, such as the floating-point components of the SPEC benchmarks (e.g., CFP2006, CFP2017) are written in Fortran. Math algorithms are

are written in Fortran. Math algorithms are well documented in Numerical Recipes.

Apart from this, more modern codes in computational science generally use large program libraries, such as METIS for graph partitioning, PETSc or Trilinos for linear algebra capabilities, deal.II or FEniCS for mesh and finite element support, and

FEniCS for mesh and finite element support, and other generic libraries.  Since the early 2000s, many of the widely used support libraries have also been implemented in C and more recently, in C++. On the other hand, high-level languages such as the

the other hand, high-level languages such as the Wolfram Language, MATLAB, Python, and R have become popular in particular areas of computational science. Consequently, a growing fraction of scientific programs are also written in such higher-level

programs are also written in such higher-level scripting languages. For this reason, facilities for inter-operation with C were added to Fortran 2003 and enhanced by the ISO/IEC technical specification 29113, which was incorporated into Fortran 2018

29113, which was incorporated into Fortran 2018 to allow more flexible interoperation with other programming languages.

Portability[edit]

Portability was a problem in the early days because there was no agreed upon standard—not even IBM's reference manual—and computer companies vied to differentiate their offerings from others by providing incompatible features.  Standards have

providing incompatible features.  Standards have improved portability.  The 1966 standard provided a reference syntax and semantics, but vendors continued to provide incompatible extensions.  Although careful programmers were coming to realize that

careful programmers were coming to realize that use of incompatible extensions caused expensive portability problems, and were therefore using programs such as The PFORT Verifier,[64][65] it was not until after the 1977 standard, when the National

until after the 1977 standard, when the National Bureau of Standards (now NIST) published FIPS PUB 69, that processors purchased by the U.S. Government were required to diagnose extensions of the standard.  Rather than offer two processors,

the standard.  Rather than offer two processors, essentially every compiler eventually had at least an option to diagnose extensions.[66][67]

Incompatible extensions were not the only portability problem.  For numerical calculations, it is important to take account of the characteristics of the arithmetic.  This was addressed by Fox et al. in the context of the 1966 standard by the PORT

in the context of the 1966 standard by the PORT library.[65] The ideas therein became widely used, and were eventually incorporated into the 1990 standard by way of intrinsic inquiry functions.  The widespread (now almost universal) adoption of the

widespread (now almost universal) adoption of the IEEE 754 standard for binary floating-point arithmetic has essentially removed this problem.

Access to the computing environment (e.g., the program's command line, environment variables, textual explanation of error conditions) remained a problem until it was addressed by the 2003 standard.

Large collections of library software that could be described as being loosely related to engineering and scientific calculations, such as graphics libraries, have been written in C, and therefore access to them presented a portability problem.

access to them presented a portability problem.  This has been addressed by incorporation of C interoperability into the 2003 standard.

It is now possible (and relatively easy) to write an entirely portable program in Fortran, even without recourse to a preprocessor.
Obsolete variants[edit]

Obsolete variants[edit]
Until the Fortran 66 standard was developed, each compiler supported its own variant of Fortran.  Some were more divergent from the mainstream than others.

The first Fortran compiler set a high standard of efficiency for compiled code.  This goal made it difficult to create a compiler so it was usually done by the computer manufacturers to support hardware sales. This left an important niche: compilers

sales. This left an important niche: compilers that were fast and provided good diagnostics for the programmer (often a student).  Examples include Watfor, Watfiv, PUFFT, and on a smaller scale, FORGO, Wits Fortran, and Kingston Fortran 2.

Fortran 5 was marketed by Data General Corp from the early 1970s to the early 1980s, for the Nova, Eclipse, and MV line of computers.  It had an optimizing compiler that was quite good for minicomputers of its time.  The language most closely

of its time.  The language most closely resembles FORTRAN 66.

FORTRAN V was distributed by Control Data Corporation in 1968 for the CDC 6600 series. The language was based upon FORTRAN IV.[68]

Univac also offered a compiler for the 1100 series known as FORTRAN V.  A spinoff of Univac Fortran V was Athena FORTRAN.

Specific variants produced by the vendors of high-performance scientific computers (e.g., Burroughs, Control Data Corporation (CDC), Cray, Honeywell, IBM, Texas Instruments, and UNIVAC) added extensions to Fortran to take advantage of special

to Fortran to take advantage of special hardware features such as instruction cache, CPU pipelines, and vector arrays.  For example, one of IBM's FORTRAN compilers (H Extended IUP) had a level of optimization which reordered the machine code

of optimization which reordered the machine code instructions to keep multiple internal arithmetic units busy simultaneously.  Another example is CFD, a special variant of FORTRAN designed specifically for the ILLIAC IV supercomputer, running at

for the ILLIAC IV supercomputer, running at NASA's Ames Research Center.

IBM Research Labs also developed an extended FORTRAN-based language called VECTRAN for processing vectors and matrices.

Object-Oriented Fortran was an object-oriented extension of Fortran, in which data items can be grouped into objects, which can be instantiated and executed in parallel.  It was available for Sun, Iris, iPSC, and nCUBE, but is no longer supported.

Such machine-specific extensions have either disappeared over time or have had elements incorporated into the main standards. The major remaining extension is OpenMP, which is a cross-platform extension for shared memory programming.  One new

extension for shared memory programming.  One new extension, Coarray Fortran, is intended to support parallel programming.

FOR TRANSIT was the name of a reduced version of the IBM 704 FORTRAN language, which was implemented for the IBM 650, using a translator program developed at Carnegie in the late 1950s.[69] The following comment appears in the IBM Reference Manual

comment appears in the IBM Reference Manual (FOR TRANSIT Automatic Coding System C28-4038, Copyright 1957, 1959 by IBM):

The FORTRAN system was designed for a more complex machine than the 650, and consequently some of the 32 statements found in the FORTRAN Programmer's Reference Manual are not acceptable to the FOR TRANSIT system.  In addition, certain restrictions

system.  In addition, certain restrictions to the FORTRAN language have been added.  However, none of these restrictions make a source program written for FOR TRANSIT incompatible with the FORTRAN system for the 704.

The permissible statements were:
Arithmetic assignment statements, e.g., a = b
GO to n
GO TO (n1, n2, ..., nm), i
IF (a) n1, n2, n3
PAUSE
STOP
DO n i = m1, m2
CONTINUE
END
READ n, list
PUNCH n, list
DIMENSION V, V, V, ...

READ n, list
PUNCH n, list
DIMENSION V, V, V, ...
EQUIVALENCE (a,b,c), (d,c), ...
Up to ten subroutines could be used in one program.

FOR TRANSIT statements were limited to columns 7 through 56, only. Punched cards were used for input and output on the IBM 650.  Three passes were required to translate source code to the "IT" language, then to compile the IT statements into SOAP

then to compile the IT statements into SOAP assembly language, and finally to produce the object program, which could then be loaded into the machine to run the program (using punched cards for data input, and outputting results onto punched cards).

Two versions existed for the 650s with a 2000 word memory drum:  FOR TRANSIT I (S) and FOR TRANSIT II, the latter for machines equipped with indexing registers and automatic floating-point decimal (bi-quinary) arithmetic.  Appendix A of the manual

arithmetic.  Appendix A of the manual included wiring diagrams for the IBM 533 card reader/punch control panel.

Fortran-based languages[edit]

Prior to FORTRAN 77, many preprocessors were commonly used to provide a friendlier language, with the advantage that the preprocessed code could be compiled on any machine with a standard FORTRAN compiler. [70]These preprocessors would typically

compiler. [70]These preprocessors would typically support structured programming, variable names longer than six characters, additional data types, conditional compilation, and even macro capabilities.  Popular preprocessors included EFL, FLECS,

Popular preprocessors included EFL, FLECS, iftran, MORTRAN, SFtran, S-Fortran, Ratfor, and Ratfiv.  EFL, Ratfor and Ratfiv, for example, implemented C-like languages, outputting preprocessed code in standard FORTRAN 66.  The PFORT preprocessor was

standard FORTRAN 66.  The PFORT preprocessor was often used to verify that code conformed to a portable subset of the language.  Despite advances in the Fortran language, preprocessors continue to be used for conditional compilation and macro

to be used for conditional compilation and macro substitution.

One of the earliest versions of FORTRAN, introduced in the '60s, was popularly used in colleges and universities.  Developed, supported, and distributed by the University of Waterloo, WATFOR was based largely on FORTRAN IV.  A student using WATFOR

largely on FORTRAN IV.  A student using WATFOR could submit their batch FORTRAN job and, if there were no syntax errors, the program would move straight to execution.  This simplification allowed students to concentrate on their program's syntax and

to concentrate on their program's syntax and semantics, or execution logic flow, rather than dealing with submission Job Control Language (JCL), the compile/link-edit/execution successive process(es), or other complexities of the

process(es), or other complexities of the mainframe/minicomputer environment.  A down side to this simplified environment was that WATFOR was not a good choice for programmers needing the expanded abilities of their host processor(s), e.g., WATFOR

of their host processor(s), e.g., WATFOR typically had very limited access to I/O devices. WATFOR was succeeded by WATFIV and its later versions.

program; s=0 i=1,n; s=s+1; stop i; s='s'  Stop
(line programming)

LRLTRAN was developed at the Lawrence Radiation Laboratory to provide support for vector arithmetic and dynamic storage, among other extensions to support systems programming.  The distribution included the Livermore Time Sharing System (LTSS)

included the Livermore Time Sharing System (LTSS) operating system.

The Fortran-95 Standard includes an optional Part 3 which defines an optional conditional compilation capability.  This capability is often referred to as "CoCo".

Many Fortran compilers have integrated subsets of the C preprocessor into their systems.
SIMSCRIPT is an application specific Fortran preprocessor for modeling and simulating large discrete systems.

The F programming language was designed to be a clean subset of Fortran 95 that attempted to remove the redundant, unstructured, and deprecated features of Fortran, such as the EQUIVALENCE statement.  F retains the array features added in Fortran

F retains the array features added in Fortran 90, and removes control statements that were made obsolete by structured programming constructs added to both FORTRAN 77 and Fortran 90.  F is described by its creators as "a compiled, structured, array

by its creators as "a compiled, structured, array programming language especially well suited to education and scientific computing".[71] Essential Lahey Fortran 90 (ELF90) was a similar subset.

Lahey and Fujitsu teamed up to create Fortran for the Microsoft .NET Framework.[72] Silverfrost FTN95 is also capable of creating .NET code.[73]
Code examples[edit]
Further information: Wikibooks:Fortran/Fortran examples

The following program illustrates dynamic memory allocation and array-based operations, two features introduced with Fortran 90.  Particularly noteworthy is the absence of DO loops and IF/THEN statements in manipulating the array; mathematical

in manipulating the array; mathematical operations are applied to the array as a whole.  Also apparent is the use of descriptive variable names and general code formatting that conform with contemporary programming style.  This example computes an

programming style.  This example computes an average over data entered interactively.

program average
! Read in some numbers and take the average
! As written, if there are no data points, an average of zero is returned
! While this may not be desired behavior, it keeps this example simple
implicit none
real, allocatable :: points(:)

implicit none
real, allocatable :: points(:)
integer           :: number_of_points
real              :: average_points, positive_average, negative_average
average_points   = 0.
positive_average = 0.
negative_average = 0.

positive_average = 0.
negative_average = 0.
write (*,*) "Input number of points to average:"
read  (*,*) number_of_points
allocate (points(number_of_points))
write (*,*) "Enter the points to average:"
read  (*,*) points

read  (*,*) points
! Take the average by summing points and dividing by number_of_points
if (number_of_points > 0) average_points = sum(points) / number_of_points
! Now form average over positive and negative points only

if (count(points > 0.) > 0) positive_average = sum(points, points > 0.) / count(points > 0.)
if (count(points < 0.) > 0) negative_average = sum(points, points < 0.) / count(points < 0.)
! Print result to terminal stdout unit 6

! Print result to terminal stdout unit 6
write (*,'(a,g12.4)') 'Average = ', average_points
write (*,'(a,g12.4)') 'Average of positive points = ', positive_average
write (*,'(a,g12.4)') 'Average of negative points = ', negative_average

deallocate (points) ! free memory
end program average
Humor[edit]

During the same FORTRAN standards committee meeting at which the name "FORTRAN 77" was chosen, a satirical technical proposal was incorporated into the official distribution bearing the title "Letter O Considered Harmful".  This proposal purported

O Considered Harmful".  This proposal purported to address the confusion that sometimes arises between the letter "O" and the numeral zero, by eliminating the letter from allowable variable names.  However, the method proposed was to eliminate the

However, the method proposed was to eliminate the letter from the character set entirely (thereby retaining 48 as the number of lexical characters, which the colon had increased to 49).  This was considered beneficial in that it would promote

considered beneficial in that it would promote structured programming, by making it impossible to use the notorious GO TO statement as before. (Troublesome FORMAT statements would also be eliminated.) It was noted that this "might invalidate some

It was noted that this "might invalidate some existing programs" but that most of these "probably were non-conforming, anyway".[74][unreliable source?][75]

When X3J3 debated whether the minimum trip count for a DO loop should be zero or one in Fortran 77, Loren Meissner suggested a minimum trip count of two—reasoning (tongue-in-cheek) that if it were less than two, then there would be no reason for a

than two, then there would be no reason for a loop.

When assumed-length arrays were being added, there was a dispute as to the appropriate character to separate upper and lower bounds. In a comment examining these arguments, Walt Brainerd penned an article entitled "Astronomy vs. Gastroenterology"

article entitled "Astronomy vs. Gastroenterology" because some proponents had suggested using the star or asterisk ("*"), while others favored the colon (":").[citation needed]

Variable names beginning with the letters I–N have a default type of integer, while variables starting with any other letters defaulted to real, although programmers could override the defaults with an explicit declaration.[76] This led to the joke:

explicit declaration.[76] This led to the joke: "In FORTRAN, GOD is REAL (unless declared INTEGER)."

See also[edit]
Computer programming portal
f2c – program to convert Fortran 77 to C codePages displaying wikidata descriptions as a fallback
F2PY – Python library for numerical programming

F2PY – Python library for numerical programming
FORMAC – computer algebra system based on FORTRANPages displaying wikidata descriptions as a fallback
List of Fortran compilers
List of Fortran numerical libraries
List of programming languages

List of programming languages
Matrix representation – storage method in computer memoryPages displaying wikidata descriptions as a fallback
Spaghetti code – Software source code with poor structure
References[edit]

References[edit]
^ "Chapel spec (Acknowledgements)" (PDF). Cray Inc. October 1, 2015. Archived (PDF) from the original on February 5, 2016. Retrieved January 14, 2016.

^ Report of a Visit to Discuss Common Programming Languages in Czechoslowakia and Poland, 1963, John A. Gosden (Editor), Roger E. Gay, John L. Jones, Jack N. Merner, Christopher J. Shaw

^ John Backus. "The history of FORTRAN I, II and III" (PDF). Softwarepreservation.org. Archived (PDF) from the original on July 26, 2007. Retrieved November 19, 2014.

^ Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p. 16. ISBN 0-201-71012-9. The manual for Fortran I was released in 1956, but it was 1958 before successful compilers were running programs correctly.

^ Loh, Eugene (June 18, 2010). "The Ideal HPC Programming Language". ACM Queue. 8 (6): 30–38. doi:10.1145/1810226.1820518.

^ "HPL –  A Portable Implementation of the High-Performance Linpack Benchmark for Distributed-Memory Computers". Retrieved February 21, 2015.
^ "Q13. What are the benchmarks?". Overview – CPU 2017. SPEC. Retrieved November 13, 2019.

^ Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p. 18. ISBN 0-201-71012-9. Another problem was that there was no standard for Fortran and so slightly different versions ... would likely fail when used

versions ... would likely fail when used with a different compiler.

^ TIOBE Software BV (May 2024). "TIOBE Index". TIOBE.com. TIOBE. Retrieved May 6, 2024.

^ a b c d e Backus, John Warner; Beeber, R. J.; Best, Sheldon F.; Goldberg, Richard; Herrick, Harlan L.; Hughes, R. A.; Mitchell, L. B.; Nelson, Robert A.; Nutt, Roy; Sayre, David; Sheridan, Peter B.; Stern, Harold; Ziller, Irving (October 15,

B.; Stern, Harold; Ziller, Irving (October 15, 1956). Sayre, David (ed.). The FORTRAN Automatic Coding System for the IBM 704 EDPM: Programmer's Reference Manual (PDF). New York, USA: Applied Science Division and Programming Research Department,

Division and Programming Research Department, International Business Machines Corporation. pp. 2, 19–20. Archived (PDF) from the original on July 4, 2022. Retrieved July 4, 2022. (2+51+1 pages)

^ a b c d e f Backus, John (October–December 1998). "The History of Fortran I, II, and III" (PDF). IEEE Annals of the History of Computing. 20 (4): 68–78. doi:10.1109/85.728232. Archived (PDF) from the original on March 3, 2016. Retrieved June 17,

the original on March 3, 2016. Retrieved June 17, 2020. [1][2]

^ "FORTRAN: The Pioneering Programming Language". IBM. March 7, 2012. Retrieved July 19, 2017.
^ "FORTRAN". Encyclopedia Britannica. June 14, 2021. Retrieved July 19, 2021.

^ Chapman, Stephen J. (2018). Fortran for Scientists and Engineers (Fourth ed.). New York: McGraw-Hill Education. p. 13. ISBN 978-0-07-338589-1.

^ The "Fortran character set" defined by the FORTRAN 77 standard was the minimal character set that standard-compliant compilers were required to support; in practice, many FORTRAN 77 compilers supported the full ASCII character set.

^ a b J. W. Backus; R. J. Beeber; S. Best; R. Goldberg; L. M. Haibt; H. L. Herrick; R. A. Nelson; D. Sayre; P. B. Sheridan; H. Stern; L. Ziller; R. A. Hughes; R. Nutt (February 1957). The FORTRAN Automatic Coding System (PDF). Western Joint Computer

Coding System (PDF). Western Joint Computer Conference. pp. 188–198. doi:10.1145/1455567.1455599.

^ Mindell, David (2008). Digital Apollo. Cambridge, MA: MIT Press. p. 99. ISBN 978-0-262-13497-2. JSTOR j.ctt5hhn02. OCLC 228031739.

^ Padua, David (January–February 2000). "The Fortran I Compiler" (PDF). Computing in Science & Engineering. 2 (1): 70–75. Bibcode:2000CSE.....2a..70P. doi:10.1109/5992.814661. Archived from the original (PDF) on June 17, 2020. The Fortran I compiler

(PDF) on June 17, 2020. The Fortran I compiler was the first major project in code optimization. It tackled problems of crucial importance whose general solution was an important research focus in compiler technology for several decades. Many

in compiler technology for several decades. Many classical techniques for compiler analysis and optimization can trace their origins and inspiration to the Fortran I compiler.

^ Brian Bergstein (May 20, 2007). "Fortran creator John Backus dies". MSNBC. Retrieved October 29, 2018.
^ "FORTRAN – The First Programming Language for Numeric Calculations". SciHi Blog. October 15, 2019.

^ Haines, L. H. (1965). "Serial compilation and the 1401 FORTRAN compiler". IBM Systems Journal. 4 (1): 73–80. doi:10.1147/sj.41.0073.
^ Lee, John A. N. (1967). Anatomy of a Compiler. Van Nostrand Reinhold.

^ Fortran Specifications and Operating Procedures, IBM 1401 (PDF). IBM. C24-1455-2. Archived (PDF) from the original on September 23, 2017.

^ "Subject: GOTRAN ON THE IBM 1316 DISK STORAGE PACK (Serial No. K7402)". Archived from the original on February 21, 2006. Retrieved March 3, 2006.

^ The FORTRAN Automatic Coding System for the IBM 704 EDPM : Preliminary Operator's Manual (PDF). Programming Research Department, International Business Machines Corporation. April 8, 1957. pp. 6–37. Archived (PDF) from the original on February 26,

Archived (PDF) from the original on February 26, 2014.

^ Armstead, Betty Jo (January 21, 2015). "My Years at NASA" (PDF). Denver Museum of Nature & Science. Archived from the original (PDF) on December 24, 2019. Retrieved June 15, 2019.

^ Reference Manual, IBM 7090 Data Processing System (PDF). 1961. A22-6528-3. Archived (PDF) from the original on December 1, 2008.

^ Fortran II General Information Manual (PDF). 1963. Archived (PDF) from the original on April 26, 2005. Retrieved November 19, 2014.

^ Reference Manual, FORTRAN II for the IBM 704 Data Processing System (PDF). 1958. C28-6000-2. Archived (PDF) from the original on October 30, 2005.
^ "Ibibilio.org". Ibiblio.org. Retrieved September 15, 2014.

^ Fortran IV Language Specifications, Program Specifications, and Operating Procedures, IBM 1401, 1440, and 1460 (PDF). IBM. April 1966. C24-3322-2. Archived (PDF) from the original on September 23, 2017.

^ McCracken, Daniel D. (1965). "Preface". A Guide to FORTRAN IV Programming. New York: Wiley. p. v. ISBN 978-0-471-58281-6.
^ "List of FORTRAN Implementations 1957 – 1967". BCS Fortran Specialist Group. IEEE Annals. 2017. Retrieved October 17, 2017.

^ IBM System/360 Model 50 Functional Characteristics (PDF). IBM. 1967. A22-6898-1. Archived (PDF) from the original on October 29, 2021 – via bitsavers.

^ a b "DECSYSTEM-10 FORTRAN IV (F40) Programmers Reference Manual" (PDF). Github. Digital Equipment Corporation. Retrieved April 15, 2022.
^ a b "FORTRAN IV". WorldCat.org. Retrieved December 10, 2023.

^ MIL-STD 1753 - FORTRAN, DoD Supplement To American National Standard X3.9-1978. United States Government Printing Office. November 9, 1978. Retrieved April 21, 2024.

^ IEEE 1003.9-1992 – IEEE Standard for InformationTechnology – POSIX(R) FORTRAN 77 Language Interfaces – Part 1: Binding for System Application Program Interface (API). IEEE. Retrieved November 24, 2018.
^ Appendix B.1

^ Appendix B.1
^ "Fortran 95 Reference". Gnu.Org. Retrieved May 10, 2014.
^ Lionel, Steve (December 30, 2013). "Doctor Fortran in "It's a Modern Fortran World"". Intel (was DEC) Fortran forum discussion group. Intel. Retrieved April 11, 2022.

^ "Fortran 2003– Last Working Draft". Gnu.Org. Retrieved May 10, 2014.

^ "WG5 Completes Processing Fortran 2003 and the TR". nag.co.uk. May 14, 2004. Archived from the original on August 5, 2004. Retrieved April 3, 2023.. It may also be downloaded as a PDF file at "The New Features of Fortran 2003" (PDF). Archived

New Features of Fortran 2003" (PDF). Archived (PDF) from the original on January 15, 2018. Retrieved April 3, 2023.

^ "N1836, Summary of Voting/Table of Replies on ISO/IEC FDIS 1539-1, Information technology – Programming languages – Fortran – Part 1: Base language" (PDF). Archived (PDF) from the original on January 15, 2018.

^ "Fortran 2008 – Last Working Draft" (PDF). Gnu.Org. Archived (PDF) from the original on May 12, 2014. Retrieved May 10, 2014.
^ N1830, Information technology – Programming languages – Fortran – Part 1: Base language [3][dead link]

^ ISO/IEC TS 29113:2012 – Information technology – Further interoperability of Fortran with C.
^ "Draft of the Technical Specification (TS) 29113" (PDF). wg5-fortran.org. Archived (PDF) from the original on January 15, 2018.

^ "Doctor Fortran in "Eighteen is the new Fifteen"". Software.intel.com. Retrieved November 20, 2017.
^ "Fortran 2018". ISO. Retrieved November 30, 2018.

^ "Further Interoperability with C" (PDF). ISO. Archived (PDF) from the original on December 1, 2017. Retrieved November 20, 2017.
^ "Additional Parallel Features in Fortran". ISO. Retrieved November 20, 2017.

^ "The New Features of Fortran 2015". ISO. Retrieved June 23, 2017.
^ "Doctor Fortran in "One Door Closes"". Software.intel.com. Retrieved September 21, 2015.

^ "Doctor Fortran Goes Dutch: Fortran 2015". Software.intel.com. Retrieved November 19, 2014.
^ Fortran 2018 Interpretation Document (PDF). October 9, 2018.
^ "Fortran 2023". wg5-fortran.org. Retrieved November 30, 2023.

^ Kemeny, John G.; Kurtz, Thomas E. (October 11, 1968). "Dartmouth Time-Sharing". Science. 162 (3850): 223–228. Bibcode:1968Sci...162..223K. doi:10.1126/science.162.3850.223. PMID 5675464.

^ Phillips, Lee (May 8, 2014). "Scientific computing's future: Can any coding language top a 1950s behemoth?". Ars Technica. Retrieved May 8, 2014.

^ Pasachoff, Jay M. (April 1984). "Scientists: FORTRAN vs. Modula-2". BYTE (letter). p. 404. Retrieved February 6, 2015.

^ Galperin, Boris (1993). "26". Large Eddy Simulation of Complex Engineering and Geophysical Flows. London: Cambridgey. p. 573. ISBN 978-0-521-43009-8.

^ Brandt, Siegmund (1970). Statistical and Computational Methods in Data Analysis. North-Holland Publishing Company. pp. Preface. ISBN 0-7204-2033-4.

^ Curcic, Milan (November 24, 2020). Modern Fortran: Building efficient parallel applications. Simon and Schuster. ISBN 978-1-61729-528-7.

^ Gaffney, P W; Wooten, J W (May 1, 1980). Methods to ensure the standardization of FORTRAN software (Report). Oak Ridge National Laboratory. OSTI 5361454. PFORT ... Library ...

^ a b P. A. Fox (1977). "Port — A portable mathematical subroutine library". A portable mathematical subroutine library. Lecture Notes in Computer Science. Vol. 57. pp. 165–177. doi:10.1007/3-540-08446-0_42. ISBN 978-3-540-08446-4. PORT ... written

ISBN 978-3-540-08446-4. PORT ... written in (PFORT) .. ANS Fortran

^ Whitten, Douglas E.; Demaine, Paul A. D. (1975). "A machine and configuration independent Fortran: Portable Fortran {PFortran}". IEEE Transactions on Software Engineering. SE-1 (1). Institute of Electrical and Electronics Engineers (IEEE):

of Electrical and Electronics Engineers (IEEE): 111–124. doi:10.1109/tse.1975.6312825. ISSN 0098-5589. S2CID 16485156.

^ "Portability Issues". .. discusses .. portability of .. Fortran
^ Healy, MJR (1968). "Towards FORTRAN VI". Advanced scientific Fortran by CDC. CDC. pp. 169–172. Archived from the original on July 5, 2009. Retrieved April 10, 2009.

^ Perlis, A. J.; Smith, J. W.; Van Zoeren, H. R. Internal Translator (IT) A Compiler for the IBM 650 (PDF). Computation Center, Carnegie Institute of Technology. Archived (PDF) from the original on October 2, 2012.

^ Meissner, Loren (September 1, 1975). "On extending Fortran control structures to facilitate structured programming". ACM SIGPLAN Notices. acm.org.

^ "F Programming Language Homepage". Fortran.com. Archived from the original on January 9, 2015. Retrieved November 19, 2014.
^ "Fortran for .NET Language System". Archived from the original on October 18, 2014.

^ "FTN95: Fortran 95 for Windows". Silverfrost.com. Retrieved November 19, 2014.
^ X3J3 post-meeting distribution for meeting held at Brookhaven National Laboratory in November 1976.
^ "The obliteration of O". Computer Weekly. March 3, 1977.

^ Rules for Data Typing (FORTRAN 77 Language Reference). Retrieved September 29, 2016.
Further reading[edit]
Language standards

Further reading[edit]
Language standards
ANSI x3.9-1966. USA Standard FORTRAN (PDF). American National Standards Institute. Archived from the original (PDF) on May 15, 2011. Retrieved May 5, 2010. Informally known as FORTRAN 66.

ANSI x3.9-1978. American National Standard – Programming Language FORTRAN. American National Standards Institute. Archived from the original on October 29, 2013. Retrieved December 11, 2007. Also known as ISO 1539–1980, informally known as FORTRAN

as ISO 1539–1980, informally known as FORTRAN 77.

ANSI X3.198-1992 (R1997) / ISO/IEC 1539:1991. American National Standard – Programming Language Fortran Extended. American National Standards Institute / ISO/IEC. Archived from the original on May 1, 2002. Informally known as Fortran 90.

ISO/IEC 1539-1:1997. Information technology – Programming languages – Fortran – Part 1: Base language (PDF). Archived from the original (PDF) on August 18, 2011. Retrieved December 13, 2007. Informally known as Fortran 95.  There are a further two

known as Fortran 95.  There are a further two parts to this standard.  Part 1 has been formally adopted by ANSI.

ISO/IEC 1539-1:2004. Information technology – Programming languages – Fortran – Part 1: Base language (PDF). Archived from the original (PDF) on July 31, 2023. Informally known as Fortran 2003.

ISO/IEC 1539-1:2010 (Final Draft International Standard). Information technology – Programming languages – Fortran – Part 1: Base language (PDF).[permanent dead link] Informally known as Fortran 2008.
Related standards

Related standards
Kneis, Wilfried (October 1981). "Draft standard Industrial Real-Time FORTRAN". ACM SIGPLAN Notices. 16 (7): 45–60. doi:10.1145/947864.947868. ISSN 0362-1340. S2CID 8662381.

ISO 8651-1:1988 Information processing systems – Computer graphics – Graphical Kernel System (GKS) language bindings – Part 1: FORTRAN. Geneva, Switzerland: ISO. 1988.
Other reference material

Other reference material
ECMA Standard on FORTRAN (PDF). European Computer Manufacturers Association. April 1965. Archived (PDF) from the original on May 10, 2008. Retrieved November 17, 2014.

FORTRAN 77 4.0 Reference Manual (PDF). Sun Microsystems, Inc. 1995. Archived from the original (PDF) on January 5, 2012. Retrieved November 17, 2014.

"FORTRAN Coding Form" (PDF). IBM. Archived from the original (PDF) on June 8, 2015. Retrieved November 17, 2014.

IBM System/360 and System/370 Fortran IV Language (PDF). IBM. May 1974. Archived from the original (PDF) on April 6, 2011. Retrieved November 17, 2014.

Goerz, Michael (2014). "Modern Fortran Reference Card" (PDF). Archived (PDF) from the original on December 14, 2014. Retrieved December 14, 2014.
Books

Books
Adams, Jeanne C.; Brainerd, Walter S.; Hendrickson, Richard A.; Maine, Richard E.; Martin, Jeanne T.; Smith, Brian T. (2009). The Fortran 2003 Handbook (1st ed.). Springer. ISBN 978-1-84628-378-9.

Akin, J. E. (2003). Object-oriented programming via Fortran 90/95. Cambridge, New York: Cambridge University Press. ISBN 978-0-521-52408-7. OCLC 49906306.

Arjen, Markus (2012), "Modern Fortran in Practice", Cambridge Univ. Press, ISBN 978-1-13908479-6.
Brainerd, W.S.; Goldberg, C.H.; Adams, J.C. (1996). Programmer's Guide to Fortran 90 (3rd ed.). Springer. ISBN 978-0-387-94570-5.

Brainerd, Walter (2015). Guide to Fortran 2008 programming. London: Springer. ISBN 978-1-4471-6758-7. OCLC 920530344.

Chapman, Stephen J. (2018). Fortran for Scientists and Engineers (Fourth ed.). New York: McGraw-Hill Education. pp. xxiv + 1024. ISBN 978-0-07-338589-1.

Chivers, Ian; Sleightholme, Jane (2018). Introduction to Programming with Fortran (4th ed.). Springer. ISBN 978-3-319-75501-4.

Clerman, Norman (2012). Modern Fortran : style and usage. New York: Cambridge University Press. ISBN 978-0-521-51453-8. OCLC 776162717.

Curcic, Milan (2020). Modern Fortran: building efficient parallel applications. Shelter Island, NY: Manning Publications Company. ISBN 978-1-61729-528-7. OCLC 1256806439.

Ellis, T. M. R.; Phillips, Ivor R.; Lahey, Thomas M. (1994). Fortran 90 Programming (1st ed.). Addison Wesley. ISBN 978-0-201-54446-6.

Etter, D. M. (1990). Structured FORTRAN 77 for Engineers and Scientists (3rd ed.). The Benjamin/Cummings Publishing Company, Inc. ISBN 978-0-8053-0051-2.

Kerrigan, J. F. (1993). Migrating to Fortran 90 (1st ed.). O'Reilly & Associates, Inc. ISBN 1-56592-049-X.

Kupferschmid, Michael (2002). Classical Fortran: Programming for Engineering and Scientific Applications. Marcel Dekker (CRC Press). ISBN 978-0-8247-0802-3. (Supplemental materials)

Lorenzo, Mark Jones (2019). Abstracting Away the Machine: The History of the FORTRAN Programming Language (FORmula TRANslation). Independently published. ISBN 978-1082395949.

Loukides, Mike (1990). Unix for FORTRAN Programmers. Sebastopol, CA: O'Reilly & Associates, Inc. ISBN 0-937175-51-X.
McCracken, Daniel D. (1961). A Guide to FORTRAN Programming. New York: Wiley. LCCN 61016618.

Nyhoff, Larry; Sanford Leestma (1995). FORTRAN 77 for Engineers and Scientists with an Introduction to Fortran 90 (4th ed.). Prentice Hall. ISBN 978-0-13-363003-9.

Page, Clive G. (1988). Professional Programmer's Guide to Fortran77 (June 7, 2005 ed.). London: Pitman. ISBN 978-0-273-02856-7. Retrieved May 4, 2010.

Press, William H. (1996). Numerical Recipes in Fortran 90: The Art of Parallel Scientific Computing. Cambridge, UK: Cambridge University Press. ISBN 978-0-521-57439-6.

Ruetsch, Gregory; Fatica, Massimiliano (2013). CUDA Fortran for Scientists and Engineers (1st ed.). Elsevier. p. 338. ISBN 9780124169708.

Sleighthome, Jane; Chivers, Ian David (1990). Interactive Fortran 77: A Hands-On Approach. Computers and their applications (2nd ed.). Chichester: E. Horwood. ISBN 978-0-13-466764-5. Archived from the original on March 12, 2014. Retrieved March 12,

original on March 12, 2014. Retrieved March 12, 2014.

Articles
Allen, F.E. (September 1981). "A History of Language Processor Technology in IBM". IBM Journal of Research and Development. 25 (5): 535–548. doi:10.1147/rd.255.0535. S2CID 14149353.

J. W. Backus; R. J. Beeber; S. Best; R. Goldberg; L. M. Haibt; H. L. Herrick; R. A. Nelson; D. Sayre; P. B. Sheridan; H. Stern; L. Ziller; R. A. Hughes; R. Nutt (February 1957). The FORTRAN Automatic Coding System (PDF). Western Joint Computer

Coding System (PDF). Western Joint Computer Conference. pp. 188–198. doi:10.1145/1455567.1455599.

Chivers, Ian D.; Sleightholme, Jane (2022). "Compiler support for Fortran 2008 & 2018 standards".

Pigott, Diarmuid (2006). "FORTRAN – Backus et al high-level compiler (Computer Language)". The Encyclopedia of Computer Languages. Murdoch University. Archived from the original on October 8, 2009. Retrieved May 5, 2010.

Roberts, Mark L.; Griffiths, Peter D. (1985). "Design Considerations for IBM Personal Computer Professional FORTRAN, an Optimizing Compiler". IBM Systems Journal. 24 (1): 49–60. doi:10.1147/sj.241.0049.
External links[edit]

External links[edit]
Wikibooks has a book on the topic of: Fortran
Wikiquote has quotations related to Fortran.
ISO/IEC JTC1/SC22/WG5—the official home of Fortran standards
Fortran Standards Documents—GFortran standards
fortran-lang.org (2020).

fortran-lang.org (2020).
History of FORTRAN and Fortran II—Computer History Museum

Valmer Norrod, et al.: A self-study course in FORTRAN programing—Volume I—textbook, Computer Science Corporation El Segundo, California (April 1970). NASA (N70-25287).

Valmer Norrod, Sheldom Blecher, and Martha Horton: A self-study course in FORTRAN programing—Volume II—workbook, NASA CR-1478 (April 1970), NASA (N70-25288).

An introduction to the Fortran programming language, by Reinhold Bader, Nisarg Patel, Leibniz Supercomputing Centre.
A coarray tutorial

A coarray tutorial
Victor Eijkhout : Introduction to Scientific Programming in C++17/Fortran2008, The Art of HPC, volume 3 (PDF) Archived February 5, 2023, at the Wayback Machine
vteIBMHistory
History
Mergers and acquisitions

vteIBMHistory
History
Mergers and acquisitions
PC business acquisition by Lenovo
ProductsHardwareCurrent
Mainframe
IBM Z
Power microprocessors
Power Systems
Storage
FlashSystem
DS8000
Quantum
Q System One
Q System Two
Eagle
Osprey
Heron
Condor

Q System Two
Eagle
Osprey
Heron
Condor
Former
Blue Gene
Cell microprocessors
PowerPC
Midrange computer
Personal Computer
Selectric
ThinkPad
Other
Carbon Design System
Cloud
Cloudant
Cognos Analytics
Connections

Cloud
Cloudant
Cognos Analytics
Connections
Criminal Reduction Utilising Statistical History
Fortran
ILOG
Information Management Software
Lotus Software
Mainframe operating systems
Mashup Center
Planning Analytics
PureQuery
Quantum Platform
Qiskit

PureQuery
Quantum Platform
Qiskit
OpenQASM
Rational Software
SPSS
Tivoli Software
Service Automation Manager
Watson
Watsonx
Granite
WebSphere
BusinessentitiesCurrent
Apptio
Center for The Business of Government
Consulting
Promontory
Kenexa

Consulting
Promontory
Kenexa
International subsidiaries
India
Press
Red Hat
Research
Former
AdStar
AIM alliance
Kaleida Labs
Taligent
Ambra Computer
Cognos
EduQuest
Kyndryl
Lexmark
Merative
Microelectronics
Product Center
Science Research Associates

Product Center
Science Research Associates
Service Bureau
The Weather Company (Weather Underground)
Facilities
Towers
1250 René-Lévesque, Montreal, QC
One Atlantic Center, Atlanta, GA
Software Labs
Rome Software Lab
Toronto Software Lab

Rome Software Lab
Toronto Software Lab
IBM Buildings
330 North Wabash, Chicago, IL
Honolulu
Seattle
Facilities
Thomas J. Watson Research Center
Hakozaki Facility
Yamato Facility
Cambridge Scientific Center
IBM Hursley
Canada Head Office Building

IBM Hursley
Canada Head Office Building
IBM Rochester
Initiatives
Academy of Technology
Deep Thunder
Develothon
Fellow
The Great Mind Challenge
Linux Technology Center
SkillsBuild
Smarter Planet
Virtual Universe Community
World Community Grid

Virtual Universe Community
World Community Grid
Think conference
Inventions
Automated teller machine
Cynefin framework
DRAM
Electronic keypunch
Floppy disk
Hard disk drive
Magnetic stripe card
Relational model
Sabre airline reservation system

Relational model
Sabre airline reservation system
Scanning tunneling microscope
Financial swaps
Universal Product Code
Terminology
Big Blue
Commercial Processing Workload
Customer engineer
Globally integrated enterprise
e-business
Think slogan
CEOs

e-business
Think slogan
CEOs
Thomas J. Watson (1914–1956)
Thomas Watson Jr. (1956–1971)
T. Vincent Learson (1971–1973)
Frank T. Cary (1973–1981)
John R. Opel (1981–1985)
John Fellows Akers (1985–1993)
Louis V. Gerstner Jr. (1993–2002)

Louis V. Gerstner Jr. (1993–2002)
Samuel J. Palmisano (2002–2011)
Ginni Rometty (2012–2020)
Arvind Krishna (since 2020)
Board ofdirectors
Thomas Buberl
David Farr
Alex Gorsky
Michelle J. Howard
Arvind Krishna
Andrew Liveris
Martha E. Pollack

Arvind Krishna
Andrew Liveris
Martha E. Pollack
Joseph R. Swedish
Peter R. Voser
Other
A Boy and His Atom
Big Blue sports teams
American football
Rugby union
Common Public License/IBM Public License
Deep Blue
Deep Thought
Dynamic infrastructure

Deep Blue
Deep Thought
Dynamic infrastructure
GlobalFoundries
GUIDE International
IBM and the Holocaust
International chess tournament
Lucifer cipher
Mathematica
IBM Plex
SHARE computing
ScicomP
Unions
Category
Commons
Navigational boxes
FOSS

Unions
Category
Commons
Navigational boxes
FOSS
Midrange computers
Operating systems
Personal computers
System/360
System/370
Typewriters
Vacuum tube computers
vteProgramming languages
Comparison
Timeline
History
Ada
ALGOL
Simula
APL
Assembly
BASIC

History
Ada
ALGOL
Simula
APL
Assembly
BASIC
Visual Basic
classic
.NET
C
C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Julia
Kotlin
Lisp
Lua
MATLAB
ML
Pascal
Object Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Scratch
Shell
Smalltalk

Python
R
Ruby
Rust
SQL
Scratch
Shell
Smalltalk
Swift
more...
Lists: Alphabetical
Categorical
Generational
Non-English-based
Category
Authority control databases: National GermanyUnited StatesFranceBnF dataCzech RepublicSpainIsrael

Retrieved from "https://en.wikipedia.org/w/index.php?title=Fortran&oldid=1250130929"

Categories: FortranFortran programming language familyAmerican inventionsArray programming languagesComputer standardsNumerical programming languagesObject-oriented programming languagesProcedural programming languagesHigh-level programming

programming languagesHigh-level programming languagesIBM softwareProgramming languages created in 1957Programming languages with an ISO standardStatically typed programming languagesUnix programming tools1957 softwareHidden categories: All articles

tools1957 softwareHidden categories: All articles with dead external linksArticles with dead external links from January 2016Articles with short descriptionShort description matches WikidataUse American English from April 2023All Wikipedia articles

English from April 2023All Wikipedia articles written in American EnglishUse mdy dates from April 2023All articles with unsourced statementsArticles with unsourced statements from April 2024Articles with unsourced statements from October

with unsourced statements from October 2011Articles with hatnote templates targeting a nonexistent pageAll articles lacking reliable referencesArticles lacking reliable references from August 2014Articles with unsourced statements from July

2014Articles with unsourced statements from July 2016Pages displaying wikidata descriptions as a fallback via Module:Annotated linkArticles with dead external links from July 2017Articles with permanently dead external linksWebarchive template

dead external linksWebarchive template wayback links

This page was last edited on 8 October 2024, at 16:54 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License;

additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policy
About Wikipedia
Disclaimers

Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view

SQL - Wikipedia
Jump to content
Main menu
Main menu
move to sidebar
hide
Navigation
Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us
Contribute
HelpLearn to editCommunity portalRecent changesUpload file
Search
Search
Donate

Search
Search
Donate
Appearance
Create account
Log in
Personal tools
Create account Log in
Pages for logged out editors learn more
ContributionsTalk
Contents
move to sidebar
hide
(Top)
1
History
2
Syntax
3
Procedural extensions
4

1
History
2
Syntax
3
Procedural extensions
4
Interoperability and standardization
Toggle Interoperability and standardization subsection
4.1
Overview
4.2
Reasons for incompatibility
4.3
Standardization history
4.4
Current standard
5
Alternatives
6

4.4
Current standard
5
Alternatives
6
Distributed SQL processing
7
Criticisms
Toggle Criticisms subsection
7.1
Design
7.2
Orthogonality and completeness
7.3
Null
7.4
Duplicates
7.5
Impedance mismatch
8
SQL data types
Toggle SQL data types subsection

8
SQL data types
Toggle SQL data types subsection
8.1
Predefined data types
9
See also
10
Notes
11
References
12
Sources
13
External links
Toggle the table of contents
SQL
85 languages

AlemannischالعربيةAsturianuAzərbaycancaবাংলা閩南語 / Bân-lâm-gúБеларускаяБеларуская (тарашкевіца)БългарскиBoarischBosanskiBrezhonegCatalàČeštinaCymraegDanskDeutschEestiΕλληνικάEspañolEsperantoEuskaraفارسیFrançaisGaeilgeGalego客家語 /

/ Hak-kâ-ngî한국어Հայերենहिन्दीHrvatskiBahasa IndonesiaInterlinguaÍslenskaItalianoעבריתქართულიҚазақшаKurdîКыргызчаLatinaLatviešuLietuviųLombardMagyarМакедонскиമലയാളംBahasa Melayu閩東語 / Mìng-dĕ̤ng-ngṳ̄မြန်မာဘာသာNederlands日本語Norsk bokmålNorsk nynorskОлык

bokmålNorsk nynorskОлык марийOʻzbekcha / ўзбекчаਪੰਜਾਬੀپنجابیPolskiPortuguêsRomânăRuna SimiРусскийShqipSimple EnglishSlovenčinaSlovenščinaСрпски / srpskiSrpskohrvatski / српскохрватскиSuomiSvenskaTagalogதமிழ்Татарча /

/ српскохрватскиSuomiSvenskaTagalogதமிழ்Татарча / tatarçaTetunไทยТоҷикӣTürkçeУкраїнськаاردوTiếng Việt吴语Yorùbá粵語中文

Edit links
ArticleTalk
English
ReadEditView history
Tools
Tools
move to sidebar
hide
Actions
ReadEditView history
General

hide
Actions
ReadEditView history
General
What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata item
Print/export
Download as PDFPrintable version

Print/export
Download as PDFPrintable version
In other projects
Wikimedia CommonsWikibooksWikiversity
Appearance
move to sidebar
hide
From Wikipedia, the free encyclopedia

hide
From Wikipedia, the free encyclopedia
This article is about the database language. For other uses, see SQL (disambiguation).
"SEQUEL" redirects here. For the topic of the word, see sequel. For other uses, see Sequel (disambiguation).

Programming language for management and use of relational databases

SQL (Structured Query Language)ParadigmDeclarativeFamilyQuery languageDesigned byDonald D. ChamberlinRaymond F. BoyceDeveloperISO/IEC JTC 1 (Joint Technical Committee 1) / SC 32 (Subcommittee 32) / WG 3 (Working Group 3)First appeared1974; 50 years

(Working Group 3)First appeared1974; 50 years ago (1974)Stable releaseSQL:2023

/    June 2023; 1 year ago (2023-06)
Typing disciplineStatic, strongOSCross-platformWebsitewww.iso.org/standard/76583.htmlMajor implementationsManyDialects
SQL-86
SQL-89
SQL-92
SQL:1999
SQL:2003
SQL:2006
SQL:2008
SQL:2011
SQL:2016
SQL:2023

SQL:2006
SQL:2008
SQL:2011
SQL:2016
SQL:2023
Influenced byDatalogInfluencedCQL, LINQ, SPARQL, SOQL, PowerShell,[1] JPQL, jOOQ, N1QL, GQL
Structured Query Language at Wikibooks
SQL (file format)Filename extension
.sqlInternet media type

.sqlInternet media type
application/sql[2][3]Developed byISO/IECInitial release1986 (1986)Type of formatDatabaseStandardISO/IEC 9075Open format?YesWebsitewww.iso.org/standard/76583.html

Structured Query Language (SQL) (pronounced S-Q-L; historically "sequel")[4][5] is a domain-specific language used to manage data, especially in a relational database management system (RDBMS). It is particularly useful in handling structured data,

particularly useful in handling structured data, i.e., data incorporating relations among entities and variables.

Introduced in the 1970s, SQL offered two main advantages over older read–write APIs such as ISAM or VSAM. Firstly, it introduced the concept of accessing many records with one single command. Secondly, it eliminates the need to specify how to reach

it eliminates the need to specify how to reach a record, i.e., with or without an index.

Originally based upon relational algebra and tuple relational calculus, SQL consists of many types of statements,[6] which may be informally classed as sublanguages, commonly: Data query Language (DQL), Data Definition Language (DDL), Data Control

Data Definition Language (DDL), Data Control Language (DCL), and Data Manipulation Language (DML).[7]

The scope of SQL includes data query, data manipulation (insert, update, and delete), data definition (schema creation and modification), and data access control. Although SQL is essentially a declarative language (4GL), it also includes procedural

language (4GL), it also includes procedural elements.

SQL was one of the first commercial languages to use Edgar F. Codd's relational model. The model was described in his influential 1970 paper, "A Relational Model of Data for Large Shared Data Banks".[8]  Despite not entirely adhering to the

Banks".[8]  Despite not entirely adhering to the relational model as described by Codd, SQL became the most widely used database language.[9][10]

SQL became a standard of the American National Standards Institute (ANSI) in 1986 and of the International Organization for Standardization (ISO) in 1987.[11] Since then, the standard has been revised multiple times to include a larger set of

revised multiple times to include a larger set of features and incorporate common extensions. Despite the existence of standards, virtually no implementations in existence adhere to it fully, and most SQL code requires at least some changes before

SQL code requires at least some changes before being ported to different database systems.

History[edit]

SQL was initially developed at IBM by Donald D. Chamberlin and Raymond F. Boyce after learning about the relational model from Edgar F. Codd[12] in the early 1970s.[13] This version, initially called SEQUEL (Structured English Query Language), was

SEQUEL (Structured English Query Language), was designed to manipulate and retrieve data stored in IBM's original quasirelational database management system, System R, which a group at IBM San Jose Research Laboratory had developed during the

Jose Research Laboratory had developed during the 1970s.[13]

Chamberlin and Boyce's first attempt at a relational database language was SQUARE (Specifying Queries in A Relational Environment), but it was difficult to use due to subscript/superscript notation. After moving to the San Jose Research Laboratory

After moving to the San Jose Research Laboratory in 1973, they began work on a sequel to SQUARE.[12] The original name SEQUEL,  which is widely regarded as a pun on QUEL, the query language of Ingres,[14] was later changed to SQL (dropping the

was later changed to SQL (dropping the vowels) because "SEQUEL" was a trademark of the UK-based Hawker Siddeley Dynamics Engineering Limited company.[15]  The label SQL later became the acronym for Structured Query Language.

After testing SQL at customer test sites to determine the usefulness and practicality of the system, IBM began developing commercial products based on their System R prototype, including System/38, SQL/DS, and IBM Db2, which were commercially

SQL/DS, and IBM Db2, which were commercially available in 1979, 1981, and 1983, respectively.[16]

In the late 1970s, Relational Software, Inc. (now Oracle Corporation) saw the potential of the concepts described by Codd, Chamberlin, and Boyce, and developed their own SQL-based RDBMS with aspirations of selling it to the U.S. Navy, Central

of selling it to the U.S. Navy, Central Intelligence Agency, and other U.S. government agencies. In June 1979, Relational Software introduced one of the first commercially available implementations of SQL, Oracle V2 (Version2) for VAX computers.

By 1986, ANSI and ISO standard groups officially adopted the standard "Database Language SQL" language definition. New versions of the standard were published in 1989, 1992, 1996, 1999, 2003, 2006, 2008, 2011,[12] 2016 and most recently, 2023.[17]

Syntax[edit]
Main article: SQL syntax
U
P
D
A
T
E
c
l
a
u
s
e
:
{
U
P
D
A
T
E
c
o
u
n
t
r
i
e
s
⏞
t
a
b
l
e
}
S
E
T
c
l
a
u
s
e
:
{
S
E
T
p
o
p
u
l
a
t
i
o
n
⏞
c
o
l
u
m
n
=
p
o
p
u
l
a
t
i
o
n
+
1
⏟
l
i
t
e
r
a
l
⏞
e
x
p
r
e
s
s
i
o
n
}
W
H
E
R
E
c

l
i
t
e
r
a
l
⏞
e
x
p
r
e
s
s
i
o
n
}
W
H
E
R
E
c
l
a
u
s
e
:
{
W
H
E
R
E
n
a
m
e
⏞
c
o
l
u
m
n
=
′
U
S
A
′
⏞
l
i
t
e
r
a
l
⏞
e
x
p
r
e
s
s
i
o
n
⏟
p
r
e
d
i
c
a
t
e
}
;
}
statement
⏟
S
Q
L
q
u
e
r
y

{\displaystyle \underbrace {\left.{\begin{array}{rl}\textstyle {\mathtt {UPDATE~clause{\mathtt {:}}}}&\{{\mathtt {UPDATE\ \overbrace {\mathtt {countries}} ^{\mathtt {table}}}}\}\\\textstyle {\mathtt {SET~clause:}}&\{{{\mathtt {SET\ \overbrace

{SET~clause:}}&\{{{\mathtt {SET\ \overbrace {\mathtt {population}} ^{\mathtt {column}}=~}}\overbrace {\mathtt {{population}+\underbrace {\mathtt {1}} _{\mathtt {literal}}}} ^{\mathtt {expression}}}\}\\\textstyle {\mathtt {WHERE~clause:}}&\{{{\mathtt

{\mathtt {WHERE~clause:}}&\{{{\mathtt {WHERE\ \underbrace {\overbrace {\mathtt {name}} ^{\mathtt {column}}{\mathtt {=}}\overbrace {\overbrace {\mathtt {'USA'}} ^{\mathtt {literal}}} ^{\mathtt {expression}}} _{\mathtt {predicate}}}}\}{\texttt

{expression}}} _{\mathtt {predicate}}}}\}{\texttt {;}}}\end{array}}\right\}{\textstyle {\texttt {statement}}}} _{\textstyle {\mathtt {SQL~query}}}}

A chart showing several of the SQL language elements comprising a single statement
The SQL language is subdivided into several language elements, including:

Clauses, which are constituent components of statements and queries. (In some cases, these are optional.)[18]
Expressions, which can produce either scalar values, or tables consisting of columns and rows of data

Predicates, which specify conditions that can be evaluated to SQL three-valued logic (3VL) (true/false/unknown) or Boolean truth values and are used to limit the effects of statements and queries, or to change program flow.

Queries, which retrieve the data based on specific criteria. This is an important element of SQL.
Statements, which may have a persistent effect on schemata and data, or may control transactions, program flow, connections, sessions, or diagnostics.

SQL statements also include the semicolon (";") statement terminator. Though not required on every platform, it is defined as a standard part of the SQL grammar.

Insignificant whitespace is generally ignored in SQL statements and queries, making it easier to format SQL code for readability.
Procedural extensions[edit]

SQL is designed for a specific purpose: to query data contained in a relational database. SQL is a set-based, declarative programming language, not an imperative programming language like C or BASIC. However, extensions to Standard SQL add

or BASIC. However, extensions to Standard SQL add procedural programming language functionality, such as control-of-flow constructs.

In addition to the standard SQL/PSM extensions and proprietary SQL extensions, procedural and object-oriented programmability is available on many SQL platforms via DBMS integration with other languages. The SQL standard defines SQL/JRT extensions

The SQL standard defines SQL/JRT extensions (SQL Routines and Types for the Java Programming Language) to support Java code in SQL databases. Microsoft SQL Server 2005 uses the SQLCLR (SQL Server Common Language Runtime) to host managed .NET

Common Language Runtime) to host managed .NET assemblies in the database, while prior versions of SQL Server were restricted to unmanaged extended stored procedures primarily written in C. PostgreSQL lets users write functions in a wide variety of

lets users write functions in a wide variety of languages—including Perl, Python, Tcl, JavaScript (PL/V8) and C.[19]

Interoperability and standardization[edit]
Overview[edit]

SQL implementations are incompatible between vendors and do not necessarily completely follow standards. In particular, date and time syntax, string concatenation, NULLs, and comparison case sensitivity vary from vendor to vendor. PostgreSQL[20] and

vary from vendor to vendor. PostgreSQL[20] and Mimer SQL[21] strive for standards compliance, though PostgreSQL does not adhere to the standard in all cases. For example, the folding of unquoted names to lower case in PostgreSQL is incompatible with

to lower case in PostgreSQL is incompatible with the SQL standard,[22] which says that unquoted names should be folded to upper case.[23] Thus, according to the standard, Foo should be equivalent to FOO, not foo.

Popular implementations of SQL commonly omit support for basic features of Standard SQL, such as the DATE or TIME data types.  The most obvious such examples, and incidentally the most popular commercial and proprietary SQL DBMSs, are Oracle (whose

and proprietary SQL DBMSs, are Oracle (whose DATE behaves as DATETIME,[24][25] and lacks a TIME type)[26] and MS SQL Server (before the 2008 version). As a result, SQL code can rarely be ported between database systems without modifications.

Reasons for incompatibility[edit]
Several reasons for the lack of portability between database systems include:
The complexity and size of the SQL standard means that most implementers do not support the entire standard.

The SQL standard does not specify the database behavior in some important areas (e.g., indices, file storage), leaving implementations to decide how to behave.

The SQL standard defers some decisions to individual implementations, such as how to name a results column that was not named explicitly.[27]: 207

The SQL standard precisely specifies the syntax that a conforming database system must implement. However, the standard's specification of the semantics of language constructs is less well-defined, leading to ambiguity.

Many database vendors have large existing customer bases; where the newer version of the SQL standard conflicts with the prior behavior of the vendor's database, the vendor may be unwilling to break backward compatibility.

Little commercial incentive exists for vendors to make changing database suppliers easier (see vendor lock-in).
Users evaluating database software tend to place other factors such as performance higher in their priorities than standards conformance.

Standardization history[edit]
SQL was adopted as a standard by the ANSI in 1986 as SQL-86[28] and the ISO in 1987.[11] It is maintained by ISO/IEC JTC 1, Information technology, Subcommittee SC 32, Data management and interchange.

Until 1996, the National Institute of Standards and Technology (NIST) data-management standards program certified SQL DBMS compliance with the SQL standard. Vendors now self-certify the compliance of their products.[29]

The original standard declared that the official pronunciation for "SQL" was an initialism: /ˌɛsˌkjuːˈɛl/ ("ess cue el").[9] Regardless, many English-speaking database professionals (including Donald Chamberlin himself[30]) use the acronym-like

Chamberlin himself[30]) use the acronym-like pronunciation of /ˈsiːkwəl/ ("sequel"),[31] mirroring the language's prerelease development name, "SEQUEL".[13][15][30] The SQL standard has gone through a number of revisions:

Year
Name
Alias
Comments
1986
SQL-86
SQL-87
First formalized by ANSI
1989
SQL-89
FIPS 127-1
Minor revision that added integrity constraints adopted as FIPS 127-1
1992
SQL-92
SQL2, FIPS 127-2

1992
SQL-92
SQL2, FIPS 127-2
Major revision (ISO 9075), Entry Level SQL-92 adopted as FIPS 127-2
1999
SQL:1999
SQL3

Added regular expression matching, recursive queries (e.g., transitive closure), triggers, support for procedural and control-of-flow statements, nonscalar types (arrays), and some object-oriented features (e.g., structured types), support for

features (e.g., structured types), support for embedding SQL in Java (SQL/OLB) and vice versa (SQL/JRT)

2003
SQL:2003
Introduced XML-related features (SQL/XML), window functions, standardized sequences, and columns with autogenerated values (including identity columns)
2006
SQL:2006

ISO/IEC 9075-14:2006 defines ways that SQL can be used with XML. It defines ways of importing and storing XML data in an SQL database, manipulating it within the database, and publishing both XML and conventional SQL data in XML form. In addition,

conventional SQL data in XML form. In addition, it lets applications integrate queries into their SQL code with XQuery, the XML Query Language published by the World Wide Web Consortium (W3C), to concurrently access ordinary SQL-data and XML

to concurrently access ordinary SQL-data and XML documents.[32]

2008
SQL:2008
Legalizes ORDER BY outside cursor definitions. Adds INSTEAD OF triggers, TRUNCATE statement,[33] FETCH clause
2011
SQL:2011

2011
SQL:2011
Adds temporal data (PERIOD FOR)[34] (more information at Temporal database#History). Enhancements for window functions and FETCH clause.[35]
2016
SQL:2016

2016
SQL:2016
Adds row pattern matching, polymorphic table functions, operations on JSON data stored in character string fields
2019
SQL:2019–2020
Adds Part 15, multidimensional arrays (MDarray type and operators)
2023
SQL:2023

2023
SQL:2023
Adds data type JSON (SQL/Foundation); Adds Part 16, Property Graph Queries (SQL/PGQ)
Current standard[edit]

The standard is commonly denoted by the pattern: ISO/IEC 9075-n:yyyy Part n: title, or, as a shortcut, ISO/IEC 9075. Interested parties may purchase the standards documents from ISO,[36] IEC, or ANSI. Some old drafts are freely

ISO,[36] IEC, or ANSI. Some old drafts are freely available.[37][38][39]

ISO/IEC 9075 is complemented by ISO/IEC 13249: SQL Multimedia and Application Packages and some Technical reports.
Alternatives[edit]

A distinction should be made between alternatives to SQL as a language, and alternatives to the relational model itself.  Below are proposed relational alternatives to the SQL language.  See navigational database and NoSQL for alternatives to the

database and NoSQL for alternatives to the relational model.

.QL: object-oriented Datalog
4D Query Language (4D QL)

4D Query Language (4D QL)
Datalog: critics suggest that Datalog has two advantages over SQL: it has cleaner semantics, which facilitates program understanding and maintenance, and it is more expressive, in particular for recursive queries.[40]

HTSQL: URL based query method
IBM Business System 12 (IBM BS12): one of the first fully relational database management systems, introduced in 1982
ISBL
jOOQ: SQL implemented in Java as an internal domain-specific language

Java Persistence Query Language (JPQL): The query language used by the Java Persistence API and Hibernate persistence library
JavaScript: MongoDB implements its query language in a JavaScript API.

LINQ: Runs SQL statements written like language constructs to query collections directly from inside .Net code
Object Query Language
QBE (Query By Example) created by Moshè Zloof, IBM 1977

QUEL introduced in 1974 by the U.C. Berkeley Ingres project, closer to tuple relational calculus than SQL
XQuery
Distributed SQL processing[edit]

XQuery
Distributed SQL processing[edit]
Distributed Relational Database Architecture (DRDA) was designed by a workgroup within IBM from 1988 to 1994. DRDA enables network-connected relational databases to cooperate to fulfill SQL requests.[41][42]

An interactive user or program can issue SQL statements to a local RDB and receive tables of data and status indicators in reply from remote RDBs. SQL statements can also be compiled and stored in remote RDBs as packages and then invoked by package

RDBs as packages and then invoked by package name. This is important for the efficient operation of application programs that issue complex, high-frequency queries. It is especially important when the tables to be accessed are located in remote

the tables to be accessed are located in remote systems.

The messages, protocols, and structural components of DRDA are defined by the Distributed Data Management Architecture. Distributed SQL processing ala DRDA is distinctive from contemporary distributed SQL databases.
Criticisms[edit]
Design[edit]

SQL deviates in several ways from its theoretical foundation, the relational model and its tuple calculus.  In that model, a table is a set of tuples, while in SQL, tables and query results are lists of rows; the same row may occur multiple times,

of rows; the same row may occur multiple times, and the order of rows can be employed in queries (e.g., in the LIMIT clause).

Critics argue that SQL should be replaced with a language that returns strictly to the original foundation: for example, see The Third Manifesto by Hugh Darwen and C.J. Date (2006, ISBN 0-321-39942-0).
Orthogonality and completeness[edit]

Orthogonality and completeness[edit]
Early specifications did not support major features, such as primary keys. Result sets could not be named, and subqueries had not been defined. These were added in 1992.[12]

The lack of sum types has been described as a roadblock to full use of SQL's user-defined types. JSON support, for example, needed to be added by a new standard in 2016.[43]
Null[edit]

The concept of Null is the subject of some debate. The Null marker indicates the absence of a value, and is distinct from a value of 0 for an integer column or an empty string for a text column. The concept of Nulls enforces the 3-valued-logic in

concept of Nulls enforces the 3-valued-logic in SQL, which is a concrete implementation of the general 3-valued logic.[12]

Duplicates[edit]

Another popular criticism is that it allows duplicate rows, making integration with languages such as Python, whose data types might make accurately representing the data difficult,[12] in terms of parsing and by the absence of modularity. This is

parsing and by the absence of modularity. This is usually avoided by declaring a primary key, or a unique constraint, with one or more columns that uniquely identify a row in the table.

Impedance mismatch[edit]
In a sense similar to object–relational impedance mismatch, a mismatch occurs between the declarative SQL language and the procedural languages in which SQL is typically embedded.[citation needed]
SQL data types[edit]

SQL data types[edit]
The SQL standard defines three kinds of data types (chapter 4.1.1 of SQL/Foundation):
predefined data types
constructed types
user-defined types.

Constructed types are one of ARRAY, MULTISET, REF(erence), or ROW. User-defined types are comparable to classes in object-oriented language with their own constructors, observers, mutators, methods, inheritance, overloading, overwriting, interfaces,

overloading, overwriting, interfaces, and so on. Predefined data types are intrinsically supported by the implementation.

Predefined data types[edit]
Character types
Character (CHAR)
Character varying (VARCHAR)
Character large object (CLOB)
National character types
National character (NCHAR)
National character varying (NCHAR VARYING)

National character varying (NCHAR VARYING)
National character large object (NCLOB)
Binary types
Binary (BINARY)
Binary varying (VARBINARY)
Binary large object (BLOB)
Numeric types
Exact numeric types (NUMERIC, DECIMAL, SMALLINT, INTEGER, BIGINT)

Approximate numeric types (FLOAT, REAL, DOUBLE PRECISION)
Decimal floating-point type (DECFLOAT)
Datetime types (DATE, TIME, TIMESTAMP)
Interval type (INTERVAL)
Boolean
XML (see SQL/XML)[44]
JSON
See also[edit]
Wikibook SQL
Object database

JSON
See also[edit]
Wikibook SQL
Object database
List of relational database management systems
Comparison of relational database management systems
Comparison of object–relational database management systems
Query by Example
SQL reserved words

Query by Example
SQL reserved words
SQL syntax
Oracle PL/SQL
Microsoft Transact-SQL (T-SQL)
Online transaction processing (OLTP)
Online analytical processing (OLAP)
Data warehouse
Relational data stream management system
NoSQL
MUMPS

NoSQL
MUMPS
Hierarchical database model
Star schema
Snowflake schema
Notes[edit]
References[edit]
^ Paul, Ryan (24 October 2005). "A guided tour of the Microsoft Command Shell". Ars Technica. Retrieved 10 April 2011.

^ "Media Type registration for application/sql". Internet Assigned Numbers Authority. 10 April 2013. Retrieved 10 April 2013.

^ Shafranovich, Y. (April 2013). "The application/sql Media Type, RFC 6922". Internet Engineering Task Force. p. 3. doi:10.17487/RFC6922. Retrieved 10 April 2013.

^ Beaulieu, Alan (April 2009). Mary E Treseler (ed.). Learning SQL (2nd ed.). Sebastopol, CA, USA: O'Reilly. ISBN 978-0-596-52083-0.

^ Chamberlin, Donald D.; Frana, Philip L. (2001-10-03). "Oral history interview with Donald D. Chamberlin". University Digital Conservancy. hdl:11299/107215. Retrieved 2020-01-14. We changed the original name "SEQUEL" to SQL because we got a letter

name "SEQUEL" to SQL because we got a letter from somebody's lawyer that said the name "SEQUEL" belonged to them. We shortened it to SQL, for Structured Query Language, and the product was known as SQL/DS.

^ SQL-92, 4.22 SQL-statements, 4.22.1 Classes of SQL-statements "There are at least five ways of classifying SQL-statements:", 4.22.2, SQL statements classified by function "The following are the main classes of SQL-statements:"; SQL:2003 4.11

main classes of SQL-statements:"; SQL:2003 4.11 SQL-statements, and later revisions.

^ Chatham, Mark (2012). Structured Query Language By Example - Volume I: Data Query Language. Lulu.com. p. 8. ISBN 9781291199512.

^ Codd, Edgar F. (June 1970). "A Relational Model of Data for Large Shared Data Banks". Communications of the ACM. 13 (6): 377–87. CiteSeerX 10.1.1.88.646. doi:10.1145/362384.362685. S2CID 207549016.

^ a b Chapple, Mike. "SQL Fundamentals". Databases. About.com. Retrieved 2009-01-28.
^ "Structured Query Language (SQL)". International Business Machines. October 27, 2006. Retrieved 2007-06-10.

^ a b "ISO 9075:1987: Information technology – Database languages – SQL – Part 1: Framework (SQL/Framework)". 1987-06-01.

^ a b c d e f Chamberlin, Donald (2012). "Early History of SQL". IEEE Annals of the History of Computing. 34 (4): 78–82. doi:10.1109/MAHC.2012.61. S2CID 1322572.

^ a b c Chamberlin, Donald D; Boyce, Raymond F (1974). "SEQUEL: A Structured English Query Language" (PDF). Proceedings of the 1974 ACM SIGFIDET Workshop on Data Description, Access and Control. Association for Computing Machinery: 249–64. Archived

for Computing Machinery: 249–64. Archived from the original (PDF) on 2007-09-26. Retrieved 2007-06-09.

^ Starkey, Jim. "Dynamic SQL, Plumbing, and the Internal API". www.ibphoenix.com. Retrieved 2023-01-19.
^ a b Oppel, Andy (February 27, 2004). Databases Demystified. San Francisco, CA: McGraw-Hill Osborne Media. pp. 90–1. ISBN 978-0-07-146960-9.

^ "History of IBM, 1978". IBM Archives. IBM. 23 January 2003. Archived from the original on January 17, 2005. Retrieved 2007-06-09.
^ "ISO - ISO/IEC JTC 1/SC 32 - Data management and interchange". www.iso.org. Retrieved 2 January 2021.

^ ANSI/ISO/IEC International Standard (IS). Database Language SQL—Part 2: Foundation (SQL/Foundation). 1999.
^ "PostgreSQL server programming". PostgreSQL 9.1 official documentation. postgresql.org. 2011. Retrieved 2012-03-09.

^ "About PostgreSQL". PostgreSQL 9.1 official website. PostgreSQL Global Development Group. 2012. Retrieved March 9, 2012. PostgreSQL prides itself in standards compliance. Its SQL implementation strongly conforms to the ANSI-SQL:2008 standard

^ "Mimer SQL, Built on Standards". Mimer SQL official website. Mimer Information Technology. 2009.
^ "4.1. Lexical Structure". PostgreSQL documentation. 2018.

^ "(Second Informal Review Draft) ISO/IEC 9075:1992, Database Language SQL, Section 5.2, syntax rule 11". 30 July 1992.

^ Lorentz, Diana; Roeser, Mary Beth; Abraham, Sundeep; Amor, Angela; Arora, Geeta; Arora, Vikas; Ashdown, Lance; Baer, Hermann; Bellamkonda, Shrikanth (October 2010) [1996]. "Basic Elements of Oracle SQL: Data Types". Oracle Database SQL Language

SQL: Data Types". Oracle Database SQL Language Reference 11g Release 2 (11.2). Oracle Database Documentation Library. Redwood City, CA: Oracle USA, Inc. Retrieved December 29, 2010. For each DATE value, Oracle stores the following information:

value, Oracle stores the following information: century, year, month, date, hour, minute, and second

^ Lorentz, Diana; Roeser, Mary Beth; Abraham, Sundeep; Amor, Angela; Arora, Geeta; Arora, Vikas; Ashdown, Lance; Baer, Hermann; Bellamkonda, Shrikanth (October 2010) [1996]. "Basic Elements of Oracle SQL: Data Types". Oracle Database SQL Language

SQL: Data Types". Oracle Database SQL Language Reference 11g Release 2 (11.2). Oracle Database Documentation Library. Redwood City, CA: Oracle USA, Inc. Retrieved December 29, 2010. The datetime data types are DATE...

^ Lorentz, Diana; Roeser, Mary Beth; Abraham, Sundeep; Amor, Angela; Arora, Geeta; Arora, Vikas; Ashdown, Lance; Baer, Hermann; Bellamkonda, Shrikanth (October 2010) [1996]. "Basic Elements of Oracle SQL: Data Types". Oracle Database SQL Language

SQL: Data Types". Oracle Database SQL Language Reference 11g Release 2 (11.2). Oracle Database Documentation Library. Redwood City, CA: Oracle USA, Inc. Retrieved December 29, 2010. Do not define columns with the following SQL/DS and DB2 data types,

with the following SQL/DS and DB2 data types, because they have no corresponding Oracle data type:... TIME

^ Date, Chris J. (2013). Relational Theory for Computer Professionals: What Relational Databases are Really All About (1. ed.). Sebastopol, Calif: O'Reilly Media. ISBN 978-1-449-36943-9.

^ "Finding Aid". X3H2 Records, 1978–95. American National Standards Institute.
^ Doll, Shelley (June 19, 2002). "Is SQL a Standard Anymore?". TechRepublic's Builder.com. TechRepublic. Archived from the original on 2012-07-05. Retrieved 2016-04-12.

^ a b Gillespie, Patrick. "Pronouncing SQL: S-Q-L or Sequel?". Retrieved 12 February 2012.

^ Melton, Jim; Alan R Simon (1993). "1.2. What is SQL?". Understanding the New SQL: A Complete Guide. Morgan Kaufmann. p. 536. ISBN 978-1-55860-245-8. SQL (correctly pronounced "ess cue ell," instead of the somewhat common "sequel")...

^ Wagner, Michael (2010). SQL/XML:2006 - Evaluierung der Standardkonformität ausgewählter Datenbanksysteme. Diplomica Verlag. p. 100. ISBN 978-3-8366-9609-8.

^ "SQL:2008 now an approved ISO international standard". Sybase. July 2008. Archived from the original on 2011-06-28.
^ Krishna Kulkarni, Jan-Eike Michels (September 2012). "Temporal features in SQL:2011" (PDF). SIGMOD Record. 41 (3).

^ Fred Zemke (2012). "What's new in SQL:2011" (PDF). Oracle Corporation.
^ "ISO/IEC 9075".
^ SQL:1992 draft (text)
^ SQL:2008 draft (Zip), Whitemarsh Information Systems Corporation
^ SQL:2011 draft (Zip), Whitemarsh Information Systems Corporation

^ Fernando Saenz-Perez. "Outer Joins in a Deductive Database System" (PDF). Lbd.udc.es. Retrieved 2017-01-16.
^ Reinsch, R. (1988). "Distributed database for SAA". IBM Systems Journal. 27 (3): 362–389. doi:10.1147/sj.273.0362.

^ Distributed Relational Database Architecture Reference. IBM Corp. SC26-4651-0. 1990.
^ Brandon, Jamie (July 2021). "Against SQL". Retrieved 2 August 2021.

^ "SQL 2003 Standard Support in Oracle Database 10g" (PDF). Oracle. Oracle Corporation. November 2003. Retrieved 2024-03-27. XML supported was added in ANSI SQL 2003, part 14.
Sources[edit]

Sources[edit]
Codd, Edgar F (June 1970). "A Relational Model of Data for Large Shared Data Banks". Communications of the ACM. 13 (6): 377–87. doi:10.1145/362384.362685. S2CID 207549016.
Discussion on alleged SQL flaws (C2 wiki)

Discussion on alleged SQL flaws (C2 wiki)
C. J. Date with Hugh Darwen: A Guide to the SQL standard : a users guide to the standard database language SQL, 4th ed., Addison Wesley, USA 1997, ISBN 978-0-201-96426-4
External links[edit]

External links[edit]
SQL  at Wikipedia's sister projects
Definitions from WiktionaryMedia from CommonsTextbooks from WikibooksResources from Wikiversity

1995 SQL Reunion: People, Projects, and Politics, by Paul McJones (ed.): transcript of a reunion meeting devoted to the personal history of relational databases and SQL.

American National Standards Institute. X3H2 Records, 1978–1995 Charles Babbage Institute Collection documents the H2 committee's development of the NDL and SQL standards.

Oral history interview with Donald D. Chamberlin Charles Babbage Institute In this oral history Chamberlin recounts his early life, his education at Harvey Mudd College and Stanford University, and his work on relational database technology.

and his work on relational database technology. Chamberlin was a member of the System R research team and, with Raymond F. Boyce, developed the SQL database language. Chamberlin also briefly discusses his more recent research on XML query languages.

vteSQLVersions
SEQUEL
SQL-86
SQL-89
SQL-92
SQL:1999
SQL:2003
SQL:2006
SQL:2008
SQL:2011
SQL:2016
SQL:2023
Keywords
As
Case
Create
Delete
From
Group by
Having
Insert
Join
Merge
Null
Order by
Over
Prepare
Select
Truncate
Union
Update
Where
With

Prepare
Select
Truncate
Union
Update
Where
With
Related
Edgar Codd
Relational database
ISO/IEC SQL parts
Framework
Foundation
Call-Level Interface
Persistent Stored Modules
Management of External Data
Object Language Bindings

Object Language Bindings
Information and Definition Schemas
SQL Routines and Types for the Java Programming Language
XML-Related Specifications
Links to related articles
vteDatabase management systemsTypes
Object-oriented
comparison
Relational
list

Object-oriented
comparison
Relational
list
comparison
Key–value
Column-oriented
list
Document-oriented
Wide-column store
Graph
NoSQL
NewSQL
In-memory
list
Multi-model
comparison
Cloud
Blockchain-based database
Concepts
Database
ACID

Blockchain-based database
Concepts
Database
ACID
Armstrong's axioms
Codd's 12 rules
CAP theorem
CRUD
Null
Candidate key
Foreign key
Superkey
Surrogate key
Unique key
Objects
Relation
table
column
row
View
Transaction
Transaction log
Trigger
Index

View
Transaction
Transaction log
Trigger
Index
Stored procedure
Cursor
Partition
Components
Concurrency control
Data dictionary
JDBC
XQJ
ODBC
Query language
Query optimizer
Query rewriting system
Query plan
Functions
Administration

Query plan
Functions
Administration
Query optimization
Replication
Sharding
Related topics
Database models
Database normalization
Database storage
Distributed database
Federated database system
Referential integrity
Relational algebra

Referential integrity
Relational algebra
Relational calculus
Relational model
Object–relational database
Transaction processing
Category
Outline
WikiProject
vteProgramming languages
Comparison
Timeline
History
Ada
ALGOL
Simula
APL
Assembly
BASIC

History
Ada
ALGOL
Simula
APL
Assembly
BASIC
Visual Basic
classic
.NET
C
C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Julia
Kotlin
Lisp
Lua
MATLAB
ML
Pascal
Object Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Scratch
Shell
Smalltalk

Python
R
Ruby
Rust
SQL
Scratch
Shell
Smalltalk
Swift
more...
Lists: Alphabetical
Categorical
Generational
Non-English-based
Category
vteQuery languagesIn current use
.QL
ALPHA
CQL
Cypher
DAX
DMX
Datalog
GraphQL
Gremlin
ISBL
LDAP
LINQ
MQL
MDX
OQL
OCL

GraphQL
Gremlin
ISBL
LDAP
LINQ
MQL
MDX
OQL
OCL
QUEL
SMARTS
SPARQL
SQL
XQuery
XPath
YQL
Proprietary
YQL
LINQ
Superseded
CODASYL
vteIBMHistory
History
Mergers and acquisitions
PC business acquisition by Lenovo
ProductsHardwareCurrent
Mainframe
IBM Z

ProductsHardwareCurrent
Mainframe
IBM Z
Power microprocessors
Power Systems
Storage
FlashSystem
DS8000
Quantum
Q System One
Q System Two
Eagle
Osprey
Heron
Condor
Former
Blue Gene
Cell microprocessors
PowerPC
Midrange computer
Personal Computer

PowerPC
Midrange computer
Personal Computer
Selectric
ThinkPad
Other
Carbon Design System
Cloud
Cloudant
Cognos Analytics
Connections
Criminal Reduction Utilising Statistical History
Fortran
ILOG
Information Management Software
Lotus Software

Information Management Software
Lotus Software
Mainframe operating systems
Mashup Center
Planning Analytics
PureQuery
Quantum Platform
Qiskit
OpenQASM
Rational Software
SPSS
Tivoli Software
Service Automation Manager
Watson
Watsonx
Granite
WebSphere

Watson
Watsonx
Granite
WebSphere
BusinessentitiesCurrent
Apptio
Center for The Business of Government
Consulting
Promontory
Kenexa
International subsidiaries
India
Press
Red Hat
Research
Former
AdStar
AIM alliance
Kaleida Labs
Taligent

Former
AdStar
AIM alliance
Kaleida Labs
Taligent
Ambra Computer
Cognos
EduQuest
Kyndryl
Lexmark
Merative
Microelectronics
Product Center
Science Research Associates
Service Bureau
The Weather Company (Weather Underground)
Facilities
Towers

Facilities
Towers
1250 René-Lévesque, Montreal, QC
One Atlantic Center, Atlanta, GA
Software Labs
Rome Software Lab
Toronto Software Lab
IBM Buildings
330 North Wabash, Chicago, IL
Honolulu
Seattle
Facilities
Thomas J. Watson Research Center

Facilities
Thomas J. Watson Research Center
Hakozaki Facility
Yamato Facility
Cambridge Scientific Center
IBM Hursley
Canada Head Office Building
IBM Rochester
Initiatives
Academy of Technology
Deep Thunder
Develothon
Fellow
The Great Mind Challenge

Develothon
Fellow
The Great Mind Challenge
Linux Technology Center
SkillsBuild
Smarter Planet
Virtual Universe Community
World Community Grid
Think conference
Inventions
Automated teller machine
Cynefin framework
DRAM
Electronic keypunch
Floppy disk

DRAM
Electronic keypunch
Floppy disk
Hard disk drive
Magnetic stripe card
Relational model
Sabre airline reservation system
Scanning tunneling microscope
Financial swaps
Universal Product Code
Terminology
Big Blue
Commercial Processing Workload

Big Blue
Commercial Processing Workload
Customer engineer
Globally integrated enterprise
e-business
Think slogan
CEOs
Thomas J. Watson (1914–1956)
Thomas Watson Jr. (1956–1971)
T. Vincent Learson (1971–1973)
Frank T. Cary (1973–1981)

Frank T. Cary (1973–1981)
John R. Opel (1981–1985)
John Fellows Akers (1985–1993)
Louis V. Gerstner Jr. (1993–2002)
Samuel J. Palmisano (2002–2011)
Ginni Rometty (2012–2020)
Arvind Krishna (since 2020)
Board ofdirectors
Thomas Buberl
David Farr

Board ofdirectors
Thomas Buberl
David Farr
Alex Gorsky
Michelle J. Howard
Arvind Krishna
Andrew Liveris
Martha E. Pollack
Joseph R. Swedish
Peter R. Voser
Other
A Boy and His Atom
Big Blue sports teams
American football
Rugby union

American football
Rugby union
Common Public License/IBM Public License
Deep Blue
Deep Thought
Dynamic infrastructure
GlobalFoundries
GUIDE International
IBM and the Holocaust
International chess tournament
Lucifer cipher
Mathematica
IBM Plex

Lucifer cipher
Mathematica
IBM Plex
SHARE computing
ScicomP
Unions
Category
Commons
Navigational boxes
FOSS
Midrange computers
Operating systems
Personal computers
System/360
System/370
Typewriters
Vacuum tube computers

System/370
Typewriters
Vacuum tube computers
vteISO standards by standard numberList of ISO standards – ISO romanizations – IEC standards1–9999
1
2
3
4
6
7
9
16
17
31
-0
-1
-3
-4
-5
-6
-7
-8
-9
-10
-11
-12
-13
68-1
128
216
217
226
228
233
259
261

-11
-12
-13
68-1
128
216
217
226
228
233
259
261
262
302
306
361
500
518
519
639
-1
-2
-3
-5
-6
646
657
668
690
704
732
764
838
843
860
898
965
999
1000
1004
1007
1073-1
1073-2
1155
1413
1538
1629
1745
1989
2014
2015
2022
2033
2047
2108
2145
2146

1745
1989
2014
2015
2022
2033
2047
2108
2145
2146
2240
2281
2533
2709
2711
2720
2788
2848
2852
2921
3029
3103
3166
-1
-2
-3
3297
3307
3601
3602
3864
3901
3950
3977
4031
4157
4165
4217
4909
5218
5426
5427
5428
5725
5775
5776
5800
5807
5964
6166
6344

5427
5428
5725
5775
5776
5800
5807
5964
6166
6344
6346
6373
6385
6425
6429
6438
6523
6709
6943
7001
7002
7010
7027
7064
7098
7185
7200
7498
-1
7637
7736
7810
7811
7812
7813
7816
7942
8000
8093
8178
8217
8373
8501-1
8571
8583
8601
8613
8632
8651
8652

8373
8501-1
8571
8583
8601
8613
8632
8651
8652
8691
8805/8806
8807
8820-5
8859
-1
-2
-3
-4
-5
-6
-7
-8
-8-I
-9
-10
-11
-12
-13
-14
-15
-16
8879
9000/9001
9036
9075
9126
9141
9227
9241
9293
9314
9362
9407
9496
9506
9529
9564
9592/9593
9594
9660

9362
9407
9496
9506
9529
9564
9592/9593
9594
9660
9797-1
9897
9899
9945
9984
9985
9995
10000–19999
10006
10007
10116
10118-3
10160
10161
10165
10179
10206
10218
10279
10303
-11
-21
-22
-28
-238
10383
10585
10589
10628
10646
10664
10746
10861
10957

10585
10589
10628
10646
10664
10746
10861
10957
10962
10967
11073
11170
11172
11179
11404
11544
11783
11784
11785
11801
11889
11898
11940 (-2)
11941
11941 (TR)
11992
12006
12052
12182
12207
12234-2
12620
13211
-1
-2
13216
13250
13399
13406-2
13450

12620
13211
-1
-2
13216
13250
13399
13406-2
13450
13485
13490
13567
13568
13584
13616
13816
13818
14000
14031
14224
14289
14396
14443
14496
-2
-3
-6
-10
-11
-12
-14
-17
-20
14617
14644
14649
14651
14698
14764
14882
14971
15022
15189
15288
15291

14698
14764
14882
14971
15022
15189
15288
15291
15398
15408
15444
-3
-9
15445
15438
15504
15511
15686
15693
15706
-2
15707
15897
15919
15924
15926
15926 WIP
15930
15938
16023
16262
16355-1
16485
16612-2
16750
16949 (TS)
17024
17025
17100
17203
17369

16750
16949 (TS)
17024
17025
17100
17203
17369
17442
17506
17799
18004
18014
18181
18245
18629
18916
19005
19011
19092
-1
-2
19114
19115
19125
19136
19407
19439
19500
19501
19502
19503
19505
19506
19507
19508
19509
19510
19600
19752
19757
19770

19507
19508
19509
19510
19600
19752
19757
19770
19775-1
19794-5
19831
20000–29999
20000
20022
20121
20400
20802
20830
21000
21001
21047
21122
21500
21827
22000
22275
22300
22301
22395
22537
23000
23003
23008
23009
23090-3
23092
23094-1
23094-2
23270

23008
23009
23090-3
23092
23094-1
23094-2
23270
23271
23360
23941
24517
24613
24617
24707
24728
25178
25964
26000
26262
26300
26324
27000 series
27000
27001
27002
27005
27006
27729
28000
29110
29148
29199-2
29500
30000+
30170
31000
32000
37001
38500

29500
30000+
30170
31000
32000
37001
38500
39075
40500
42010
45001
50001
55000
56000
80000
Category
Authority control databases InternationalFASTNationalGermanyUnited StatesFranceBnF dataCzech RepublicSpainIsrael
Portal: Computer programming

Portal: Computer programming
Retrieved from "https://en.wikipedia.org/w/index.php?title=SQL&oldid=1250230647"

Categories: Database management systemsSQLData modeling languagesDeclarative programming languagesProgramming languages with an ISO standardQuery languagesRelational database management systemsData-centric programming languagesProgramming languages

programming languagesProgramming languages created in 1974Table-oriented programmingHidden categories: Articles with short descriptionShort description is different from WikidataAll articles with unsourced statementsArticles with unsourced

with unsourced statementsArticles with unsourced statements from February 2024Pages using Sister project links with hidden wikidataPages using Sister project links with wikidata mismatchPages using Sister project links with default searchArticles

Sister project links with default searchArticles with example SQL code

This page was last edited on 9 October 2024, at 05:51 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License;

additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policy
About Wikipedia
Disclaimers

Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view

Delphi (software) - Wikipedia
Jump to content
Main menu
Main menu
move to sidebar
hide
Navigation
Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us
Contribute
HelpLearn to editCommunity portalRecent changesUpload file
Search

Search
Search
Donate
Appearance
Create account
Log in
Personal tools
Create account Log in
Pages for logged out editors learn more
ContributionsTalk
Contents
move to sidebar
hide
(Top)
1
Features
Toggle Features subsection
1.1
Characteristics
1.2

1.1
Characteristics
1.2
Backward compatibility
1.3
Frameworks
1.4
Interoperability
1.5
Sample "Hello World" program
2
History
3
Uses in schools
4
Roadmaps
5
Related software
Toggle Related software subsection
5.1
Notable third-party libraries
6

5.1
Notable third-party libraries
6
References
7
Further reading
8
External links
Toggle the table of contents
Delphi (software)
30 languages

30 languages
Беларуская (тарашкевіца)CatalàČeštinaDanskDeutschEspañolEsperantoفارسیFrançaisGalego한국어Bahasa IndonesiaItalianoКыргызчаMagyarNederlands日本語Norsk bokmålPolskiPortuguêsRomânăРусскийSlovenčinaSlovenščinaSuomiதமிழ்УкраїнськаTiếng Việt粵語中文

Edit links
ArticleTalk
English
ReadEditView history
Tools
Tools
move to sidebar
hide
Actions
ReadEditView history
General

hide
Actions
ReadEditView history
General
What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata item
Print/export
Download as PDFPrintable version

Print/export
Download as PDFPrintable version
In other projects
Wikimedia CommonsWikibooks
Appearance
move to sidebar
hide
From Wikipedia, the free encyclopedia
General-purpose programming language and a software product

For the macromolecular electrostatics modeling software package, see DelPhi.

DelphiScreenshot of Delphi 10.4, with the visual form editor being used to create an applicationOriginal author(s)Borland, CodeGear, EmbarcaderoDeveloper(s)Embarcadero TechnologiesInitial release1995Stable releaseRAD Studio 12.2 Athens[1]

/ 12 September 2024; 24 days ago (12 September 2024)

Written inMostly Delphi (Object Pascal)Operating systemRuns on Windows;[2] targets Windows, Linux, macOS, Android, iOSTypeSoftware Development, Designer, IDE, Compiler, RTLLicenseFreemiumWebsitewww.embarcadero.com/products/delphi

Delphi is a general-purpose programming language and a software product that uses the Delphi dialect of the Object Pascal programming language and provides an integrated development environment (IDE) for rapid application development of desktop,

for rapid application development of desktop, mobile, web, and console software,[3] currently developed and maintained by Embarcadero Technologies.

Delphi's compilers generate native code for Microsoft Windows, macOS, iOS, Android and Linux (x64).[4][5][6]

Delphi includes a code editor, a visual designer, an integrated debugger, a source code control component, and support for third-party plugins. The code editor features Code Insight (code completion), Error Insight (real-time error-checking), and

Error Insight (real-time error-checking), and refactoring. The visual forms designer has the option of using either the Visual Component Library (VCL) for pure Windows development or the FireMonkey (FMX) framework for cross-platform development.

(FMX) framework for cross-platform development. Database support is a key feature and is provided by FireDAC (Database Access Components). Delphi is known for its fast compilation speed, native code, and developer productivity.[citation needed]

Delphi was originally developed by Borland as a rapid application development tool for Windows as the successor of Turbo Pascal. Delphi added full object-oriented programming to the existing language, and the language has grown to support generics,

and the language has grown to support generics, anonymous methods, closures, and native Component Object Model (COM) support.

Delphi and its C++ counterpart, C++Builder, are interoperable and jointly sold under the name RAD Studio. There are Professional, Enterprise, and Architect editions, with the higher editions having more features at a higher price. There is also a

more features at a higher price. There is also a free-of-charge Community edition, with most of the features of Professional, but restricted to users and companies with low revenue.[7]

Features[edit]
Delphi supports rapid application development (RAD). Prominent features are a visual designer and two application frameworks, Visual Component Library (VCL) for Windows and FireMonkey (FMX) for cross-platform development.

Delphi uses the Pascal-based programming language Object Pascal created by Anders Hejlsberg for Borland (now IDERA) as the successor to Turbo Pascal. It supports native cross-compilation to many platforms including Windows, Linux, iOS, and Android.

To better support development for Microsoft Windows and interoperate with code developed with other software development tools, Delphi supports independent interfaces of Component Object Model (COM) with reference counting class implementations, and

reference counting class implementations, and support for many third-party components. Interface implementations can be delegated to fields or properties of classes. Message handlers are implemented by tagging a method of a class with the integer

by tagging a method of a class with the integer constant of the message to handle.[citation needed]

Database connectivity is extensively supported through VCL database-aware and database access components.
Later versions have included upgraded and enhanced runtime library routines, some provided by the community group FastCode.

Characteristics[edit]

Delphi uses a strongly typed high-level programming language, intended to be easy to use and originally based on the earlier Object Pascal language. Pascal was originally developed as a general-purpose language "suitable for expressing the

language "suitable for expressing the fundamental constructs known at the time in a concise and logical way", and "its implementation was to be efficient and competitive with existing FORTRAN compilers"[8] but without low-level programming

compilers"[8] but without low-level programming facilities or access to hardware. Turbo Pascal and its descendants, including Delphi, support access to hardware and low-level programming, with the facility to incorporate code written in assembly

facility to incorporate code written in assembly language and other languages. Delphi's object-orientation features only class- and interface-based polymorphism.[9] Metaclasses are first class objects. Objects are references to the objects (as in

Objects are references to the objects (as in Java), which Delphi implicitly de-references, so there is usually no need to manually allocate memory for pointers to objects or use similar techniques that some other languages need. There are dedicated

some other languages need. There are dedicated reference-counted string types, and also null-terminated strings.

Strings can be concatenated by using the '+' operator, rather than using functions. For dedicated string types, Delphi handles memory management without programmer intervention. Since Borland Developer Studio 2006, there are functions to locate

Studio 2006, there are functions to locate memory leaks.

Delphi includes an integrated IDE. The Delphi products all ship with a run-time library (RTL) and a Visual Component Library (VCL), including most of its source code. Third-party components (sometimes with full source code) and tools to enhance the

with full source code) and tools to enhance the IDE or for other Delphi related development tasks are available, some free of charge. The IDE includes a GUI for localization and translation of created programs that may be deployed to a translator;

programs that may be deployed to a translator; there are also third-party tools with more features for this purpose. The VCL framework maintains a high level of source compatibility between versions, which simplifies updating existing source code to

which simplifies updating existing source code to a newer Delphi version. Third-party libraries typically need updates from the vendor but, if source code is supplied, recompilation with the newer version may be sufficient. The VCL was an early

version may be sufficient. The VCL was an early adopter of dependency injection or inversion of control; it uses a reusable component model, extensible by the developer. With class helpers, new functionality can be introduced to core RTL and VCL

can be introduced to core RTL and VCL classes without changing the original source code of the RTL or VCL.

The compiler is optimizing and is a single-pass compiler. It can optionally compile to a single executable which does not require DLLs. Delphi can also generate standard DLLs, ActiveX DLLs, COM automation servers and Windows services.

The Delphi IDEs since Delphi 2005 increasingly support refactoring features such as method extraction and the possibility to create UML models from the source code or to modify the source through changes made in the model.

Delphi has communities on the web, where also its employees actively participate.
Backward compatibility[edit]

Delphi is one of the languages where backward compatibility is close to 100%. Although each new release of Delphi attempts to keep as much backward compatibility as possible to allow existing code reuse, new features, new libraries, and improvements

new features, new libraries, and improvements sometimes make newer releases less than 100% backward compatible.

Since 2016, there have been new releases of Delphi every six months, with new platforms being added approximately every second release.[10]
Frameworks[edit]
Delphi offers two frameworks for visual application development, VCL and FireMonkey (FMX):

Visual Component Library (VCL) is the framework for developing pure Windows applications. VCL is a long-standing framework, included in the first release of Delphi and actively developed ever since then.

FireMonkey (later abbreviated FMX), was released in 2011, as part of Delphi XE2, together with an additional set of built-in compilers for non-Windows platforms. FireMonkey is a cross-platform framework for Windows, macOS, iOS, Android and Linux

for Windows, macOS, iOS, Android and Linux (x64). The GUI parts of FireMonkey are largely based on Direct3D and OpenGL. FireMonkey is not compatible with VCL; they are two separate frameworks. FireMonkey applications do, however, allow easy sharing

applications do, however, allow easy sharing of non-visual code units with VCL applications, enabling a lot of code to be ported or shared easily between the platforms.

Interoperability[edit]

Delphi and its C++ counterpart, C++Builder, are interoperable. They share many core components, notably the IDE, the VCL and FMX frameworks, and much of the runtime library. In addition, they can be used jointly in a project. For example, C++Builder

jointly in a project. For example, C++Builder 6 and later can combine source code from Delphi and C++ in one project, while packages compiled with C++Builder can be used from within Delphi. In 2007, the products were released jointly as RAD Studio,

the products were released jointly as RAD Studio, a shared host for Delphi and C++Builder, which can be purchased with either or both.

Starting with Rio, there is also interoperability with Python.
Sample "Hello World" program[edit]
See also: Object Pascal § Delphi_and_Free_Pascal_versionprogram ObjectPascalExample;
type
THelloWorld = class
procedure Put;
end;

type
THelloWorld = class
procedure Put;
end;
procedure THelloWorld.Put;
begin
Writeln('Hello, World!');
end;
var
HelloWorld: THelloWorld;               { this is an implicit pointer }
begin

begin
HelloWorld := THelloWorld.Create;      { constructor returns a pointer to an object of type THelloWorld }
HelloWorld.Put;
HelloWorld.Free;                       { this line deallocates the THelloWorld object pointed to by HelloWorld }
end.

end.
Note that the object construct is still available in Delphi.
History[edit]
See History of Delphi (software) for details on the progression of language and IDE development from 1995 to the present.
Uses in schools[edit]

Uses in schools[edit]
Delphi is the medium used to teach programming in South African schools as a subject of information technology (IT).[11]
Roadmaps[edit]

Roadmaps[edit]
Embarcadero publishes "roadmaps" describing their future development plans. The most recent one was published in November 2020.[12] Version 10.5 referred to in the November 2020 roadmap was renamed 11.0.
Related software[edit]

Related software[edit]
Borland Enterprise Studio, a precursor to RAD Studio, is a software development suite that includes support for multiple languages. Borland Enterprise Studio for Windows supports Delphi.[13]

Borland Kylix: Similar to Delphi, but for Linux, released in 2001. This was the first attempt to add Linux support to the Delphi product family.[14] Kylix used the new CLX cross-platform framework (based on Qt), instead of Delphi's VCL. Kylix was

(based on Qt), instead of Delphi's VCL. Kylix was discontinued after version 3. Today Linux support is integrated into the main Delphi product and uses the FireMonkey cross-platform framework.

InterBase is an embeddable SQL database that integrates natively to Delphi and C++Builder for client/server or embedded development. Its distinguishing features reduced administration requirements, commercial-grade data security, disaster recovery,

data security, disaster recovery, and change synchronization. It is also accessible by all major languages and platforms in the market with database connection protocols like ODBC, ADO, ADO.NET and even with Java by JDBC/ODBC Bridge or Java type 4

even with Java by JDBC/ODBC Bridge or Java type 4 connectors.

JBuilder was a tool for Java development based on Eclipse since version JBuilder 2007.

RadPHP (later replaced with HTML5 Builder) was an IDE for PHP that provided true RAD functionality. It has a form designer similar to that of Delphi or Visual Basic, and an integrated debugger based on the Apache web server. It also includes a VCL

on the Apache web server. It also includes a VCL library ported to PHP. Unlike other IDEs, it supports Web 2.0 features such as Ajax. Delphi for PHP was announced on March 20, 2007, renamed in October 2010 to RadPHP, and is based on Qadram Q studio.

2010 to RadPHP, and is based on Qadram Q studio. Embarcadero acquired Qadram in January 2011.

Delphi Prism (later renamed Embarcadero Prism) derived from the Oxygene language (formerly named Chrome) from RemObjects. It ran in the Microsoft Visual Studio IDE rather than RAD Studio. It was licensed and rebranded by Embarcadero to replace

licensed and rebranded by Embarcadero to replace Delphi.NET when that product was discontinued.

Free Pascal is an open-source Pascal cross-platform cross-compiler that supports most of Delphi's Object Pascal code. Free Pascal also has its own language extensions, multiple compiler [language syntax] modes, and supports 18+ operating systems and

modes, and supports 18+ operating systems and 9+ processor architectures.[15] Lazarus is a cross-platform RAD IDE that uses the Free Pascal compiler.

Notable third-party libraries[edit]
FastCode – Enhanced runtime libraries and memory manager.
OpenWire (library) – Data flow, events, and state synchronization component library.
Teechart – Charting library.
References[edit]

Teechart – Charting library.
References[edit]
^ "Announcing the Availability of RAD Studio 12.2 Athens". 12 September 2024. Retrieved 12 September 2024.

^ "Installation Notes - Operating System Requirements". Archived from the original on 2020-08-06. Retrieved 2020-09-05.

^ William Buchanan (4 February 2003). Mastering Delphi Programming. Palgrave Macmillan. pp. 10–. ISBN 978-1-137-17356-0.[permanent dead link]

^ "Performance Comparison from Delphi 2010 to XE6 (Part 2)". Riversoft AVG. 12 May 2014. Archived from the original on 26 July 2015. Retrieved 9 March 2016.

^ "The Delphi Geek: Built For Speed". Archived from the original on 23 March 2016. Retrieved 9 March 2016.
^ "Discussion on Hacker News about Delphi being alive". Hacker News. Archived from the original on 2 July 2016. Retrieved 9 March 2016.

^ "Delphi: App Development Product Editions". Embarcadero. Archived from the original on 14 March 2021. Retrieved 13 March 2021. With download link for Delphi Feature Matrix

^ "Recollections About the Development of Pascal" (PDF). Archived (PDF) from the original on 2016-05-12. Retrieved 2016-01-12.

^ Lingfeng Wang; Kay CHen Tan (20 January 2006). Modern Industrial Automation Software Design. John Wiley & Sons. pp. 113–. ISBN 978-0-471-77627-7.

^ "List of Delphi language features and version in which they were introduced/deprecated". Stack Overflow. Archived from the original on 28 February 2016. Retrieved 9 March 2016.

^ Staff Writer. "Embarcadero Delphi named developer language of choice for South African schools". Archived from the original on 2022-03-31. Retrieved 2022-03-17.

^ "RAD Studio November 2020 Roadmap PM Commentary". blogs.embarcadero.com. 17 November 2020. Archived from the original on 2020-11-28. Retrieved 2020-11-27.

^ "Borland Enterprise Studio". Archived from the original on 2002-02-05. Retrieved 2002-02-05.
^ "Kylix is here!". Archived from the original on 2019-09-04. Retrieved 2020-09-05.

^ "Free Pascal Homepage". freepascal.org. Archived from the original on 1999-01-25. Retrieved 2016-04-27.
Further reading[edit]
McConnell, Steve (1993). Code Complete. Microsoft Press. ISBN 1-55615-484-4.
External links[edit]
Official website

External links[edit]
Official website
vtePascal programming language familyDialects
Pascal
Object Pascal
Pascal Script
Oxygene
Clascal
Concurrent Pascal
Joyce
SuperPascal
CompilersCurrent
Delphi (history)
Oxygene
VSI Pascal
IP Pascal

Delphi (history)
Oxygene
VSI Pascal
IP Pascal
Free Pascal (Lazarus)
PascalABC.NET
GNU Pascal
Turbo51
Pic Micro Pascal
ACK
Discontinued
Virtual Pascal
Apple Pascal
Borland Kylix
Turbo Pascal
Microsoft Pascal
UCSD Pascal
JRT Pascal
Pascal/MT+
API
CLX

UCSD Pascal
JRT Pascal
Pascal/MT+
API
CLX
FCL
FireMonkey
LCL
Object Windows Library
OpenWire
RTL
Turbo Vision
Visual Component Library
Microcomputer
Pascal MicroEngine
Comparison of Pascal and C
Comparison of Pascal and Delphi
Related to

Comparison of Pascal and Delphi
Related to
ALGOL (1958)
Modula-2 (1977)
Ada (1983)
Oberon (1986)
Modula-3 (1988)
Oberon-2 (1991)
Component Pascal (1991)
vteIntegrated development environmentsC, C++Open source
Arduino IDE
Code::Blocks
CodeLite

Arduino IDE
Code::Blocks
CodeLite
Dev-C++
Eclipse
Emacs
Geany
GNOME Builder
Kakoune
KDevelop
NetBeans
QDevelop
Qt Creator
TheIDE
Vi–Vim
OpenWatcom
Freeware
DevEco Studio
Oracle Developer Studio
Visual Studio Code
Visual Studio Community
Xcode
Retail

Visual Studio Community
Xcode
Retail
C++Builder
Eclipse-based
CodeWarrior
MyEclipse
Visual Studio
By JetBrains
IntelliJ IDEA
AppCode
CLion
LabWindows/CVI
IBM Rational Software Architect
Understand
SlickEdit
Discontinued
Anjuta
VisualAge

SlickEdit
Discontinued
Anjuta
VisualAge
Visual C++ Express
MonoDevelop
SharpDevelop
Borland Turbo C, C++
QuickC
JavaOpen source
Anjuta
BlueJ
DrJava
Eclipse
Geany
Greenfoot
IntelliJ IDEA Community Edition
Android Studio
NetBeans
DevEco Studio

Android Studio
NetBeans
DevEco Studio
Freeware
jGRASP
JDeveloper
Retail
JCreator
MyEclipse
JetBrains IntelliJ IDEA
SlickEdit
Understand
Discontinued
Metrowerks CodeWarrior Pro for Java
JBuilder
Sun Java Studio Creator (superseded by NetBeans)

Sun Java Studio Creator (superseded by NetBeans)
VisualAge (superseded by Eclipse)
Visual Café (aka Espresso, superseded by JBuilder)
Visual J++
Xelfi (became NetBeans)
JavaScriptOpen source
Vim
Visual Studio Code
Atom
Chromium
DevEco Studio

Visual Studio Code
Atom
Chromium
DevEco Studio
CLI (.NET)Open source
Visual Studio Code
PascalABC.NET
Freeware
Visual Studio Community
Retail
Visual Studio
Rider
Understand
Discontinued
Xamarin Studio
MonoDevelop
SharpDevelop
Visual Basic Express

MonoDevelop
SharpDevelop
Visual Basic Express
Visual Web Developer Express
Visual J# Express
Visual Studio Express for Windows Phone
Visual C++ Express
Visual C# Express
Express for Desktop
Express for Web
Express for Windows
Flash

Express for Web
Express for Windows
Flash
Adobe Flash Builder
FlashDevelop
Powerflasher FDT
PHPOpen source
Aptana
NetBeans
Komodo Edit
Komodo IDE
KDevelop
Proprietary
Codelobster
PhpStorm
PHPEdit
SlickEdit
Zend Studio
R
RStudio

PhpStorm
PHPEdit
SlickEdit
Zend Studio
R
RStudio
R Tools for Visual Studio
PythonOpen source
Anjuta
IDLE
Eric
Light Table
Ninja-IDE
PyDev
PyScripter
PIDA
Spyder
Komodo Edit
Komodo IDE
KDevelop
Vim
Visual Studio Code
Thonny
DevEco Studio
Proprietary

Thonny
DevEco Studio
Proprietary
PyCharm
PythonAnywhere
Visual Studio Code
SlickEdit
Wing IDE
Pascal,Object PascalOpen source
Free Pascal IDE
Lazarus
Dev-Pascal
GNAVI
PascalABC.NET
Freeware
Delphi Community
Retail
Delphi
Discontinued
Turbo Pascal

Retail
Delphi
Discontinued
Turbo Pascal
Virtual Pascal
Borland Kylix
QuickPascal
BASICOpen source
Basic-256
B4X
Microsoft Small Basic
SdlBasic
Gambas
Basic4GL
VisualFBEditor / WinFBE
InForm
Freeware
FutureBASIC
RapidQ
thinAir
Visual Studio Community

RapidQ
thinAir
Visual Studio Community
Retail
Visual Studio
NS Basic
PureBasic
GLBasic
Liberty BASIC
Xojo
Discontinued
CA-Realizer
MonoDevelop
QuickBASIC
QBasic
SharpDevelop
Visual Basic
Visual Basic Express
GoOpen source
Vim

Visual Basic Express
GoOpen source
Vim
Visual Studio Code (VSCode)
Eclipse
Freeware
Cloud9 IDE
Retail
GoLand
Haxe
IntelliJ IDEA
VS Code
Sublime Text
Powerflasher FDT
POP-11
Poplog
Online
AWS Cloud9 IDE
Eclipse Che
SourceLair
Comparison
Category

Eclipse Che
SourceLair
Comparison
Category
vteGraphical user interface buildersQtOpen source
Qt Creator
KDevelop
Gambas
GTKOpen source
Glade Interface Designer
Gambas
Stetic GUI Designer
Proprietary
Xojo (on Linux)
wxWidgetsOpen source
Code::Blocks

Xojo (on Linux)
wxWidgetsOpen source
Code::Blocks
CodeLite
wxGlade
wxFormBuilder
CLIOpen source
SharpDevelop
PascalABC.NET
Proprietary
Microsoft Visual Studio
Microsoft Blend
VCL,relatedOpen source, LCL
Lazarus
Visual FB Editor
Proprietary
Delphi

Lazarus
Visual FB Editor
Proprietary
Delphi
C++Builder
RadPHP
Borland Kylix
CocoaProprietary
Xcode, Interface Builder
Xojo (on macOS)
Java-basedOpen source
Android Studio (via XML)
Eclipse (via SWT)
NetBeans (via Swing)
B4X
Proprietary
IntelliJ IDEA

B4X
Proprietary
IntelliJ IDEA
JDeveloper (via Swing)
WaveMaker
Windows APIOpen source
GNAVI
WinFBE
Proprietary
CA-Realizer
Visual Basic
Xojo (for Windows)
RapidQ
Liberty BASIC
PureBasic
OtherOpen source
FLUID
Gorm
IUP
InForm
Morphic
TheIDE
XBasic

FLUID
Gorm
IUP
InForm
Morphic
TheIDE
XBasic
Proprietary
Axure RP
Clarion IDE
Projucer
XVT Design
Resource construction set
LANSA
Softwell Maker
Embedded Wizard
OutSystems
Mendix
Topincs
PowerBuilder
AppStudio

OutSystems
Mendix
Topincs
PowerBuilder
AppStudio
Retrieved from "https://en.wikipedia.org/w/index.php?title=Delphi_(software)&oldid=1242687880"

Categories: CodeGear softwareDelphi (programming language)Integrated development environmentsPascal (programming language)Pascal (programming language) compilersPascal (programming language) softwareUser interface buildersHidden categories: All

interface buildersHidden categories: All articles with dead external linksArticles with dead external links from January 2024Articles with permanently dead external linksArticles with short descriptionShort description is different from WikidataAll

description is different from WikidataAll articles with unsourced statementsArticles with unsourced statements from November 2021Articles with example Pascal code

This page was last edited on 28 August 2024, at 05:20 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike License 4.0;

additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policy
About Wikipedia
Disclaimers

Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view

Rust (programming language) - Wikipedia
Jump to content
Main menu
Main menu
move to sidebar
hide
Navigation
Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us
Contribute
HelpLearn to editCommunity portalRecent changesUpload file

Search
Search
Donate
Appearance
Create account
Log in
Personal tools
Create account Log in
Pages for logged out editors learn more
ContributionsTalk
Contents
move to sidebar
hide
(Top)
1
History
Toggle History subsection
1.1
Origins (2006–2012)
1.2

1.1
Origins (2006–2012)
1.2
Evolution (2012–2020)
1.3
Mozilla layoffs and Rust Foundation (2020–present)
2
Syntax and features
Toggle Syntax and features subsection
2.1
Hello World program
2.2
Variables
2.3
Keywords and control flow
2.3.1
if blocks

2.3
Keywords and control flow
2.3.1
if blocks
2.3.2
while loops
2.3.3
for loops and iterators
2.3.4
loop and break statements
2.4
Expressions
2.5
Pattern matching
2.6
Types
2.6.1
Primitive types
2.6.2
User-defined types
2.6.3
Standard library
2.6.4

User-defined types
2.6.3
Standard library
2.6.4
Pointers
2.6.5
Type conversion
2.7
Ownership and lifetimes
2.8
Polymorphism
2.8.1
Generics
2.8.2
Traits
2.8.3
Trait objects
2.9
Memory safety
2.10
Memory management
2.11
Closures
2.12
Macros
2.12.1

2.11
Closures
2.12
Macros
2.12.1
Declarative macros
2.12.2
Procedural macros
2.12.3
Variadic macros
2.13
Interface with C and C++
3
Ecosystem
Toggle Ecosystem subsection
3.1
Compiler
3.2
Standard library
3.3
Cargo
3.4
Rustfmt
3.5
Clippy
3.6

3.3
Cargo
3.4
Rustfmt
3.5
Clippy
3.6
Versioning system
3.7
IDE support
4
Performance
5
Adoption
6
In academic research
7
Community
Toggle Community subsection
7.1
Rust Foundation
7.2
Governance teams
8
See also
9
Notes
10
References

Governance teams
8
See also
9
Notes
10
References
Toggle References subsection
10.1
Book sources
10.2
Others
11
External links
Toggle the table of contents
Rust (programming language)
47 languages

AfrikaansالعربيةAzərbaycancaবাংলা閩南語 / Bân-lâm-gúБеларускаяCatalàČeštinaDanskDeutschEestiEspañolEsperantoEuskaraفارسیFrançais한국어HrvatskiBahasa IndonesiaÍslenskaItalianoעבריתLatviešuLombardMagyarമലയാളംBahasa MelayuNederlands日本語Norsk

MelayuNederlands日本語Norsk bokmålPolskiPortuguêsRomânăРусскийShqipSimple EnglishSlovenčinaСрпски / srpskiSuomiSvenskaతెలుగుไทยTürkçeУкраїнськаTiếng Việt粵語中文

Edit links
ArticleTalk
English
ReadEditView history
Tools
Tools
move to sidebar
hide
Actions
ReadEditView history
General

hide
Actions
ReadEditView history
General
What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata item
Print/export
Download as PDFPrintable version

Print/export
Download as PDFPrintable version
In other projects
Wikimedia CommonsWikiversity
Appearance
move to sidebar
hide
From Wikipedia, the free encyclopedia
General-purpose programming language

General-purpose programming language
RustParadigmsConcurrentfunctionalgenericimperativestructuredDesigned byGraydon HoareDeveloperThe Rust TeamFirst appearedMay 15, 2015; 9 years ago (2015-05-15)Stable release1.81.0[1]

/ September 5, 2024; 37 days ago (September 5, 2024)

Typing disciplineAffineinferrednominalstaticstrongImplementation languageOCaml (2006–2011)Rust (2012–present)PlatformCross-platform[note 1]OSCross-platform[note 2]LicenseMIT, Apache 2.0[note 3]Filename extensions.rs,

Apache 2.0[note 3]Filename extensions.rs, .rlibWebsitewww.rust-lang.orgInfluenced byAlefC#C++CycloneElmErlangHaskellLimboNewsqueakOCamlRubySchemeStandard MLSwift[5][6]InfluencedIdris[7]Project Verona[8]Spark[9]Swift[10]V[11]Zig[12]

Rust is a general-purpose programming language emphasizing performance, type safety, and concurrency. It enforces memory safety, meaning that all references point to valid memory. It does so without a traditional garbage collector; instead, both

a traditional garbage collector; instead, both memory safety errors and data races are prevented by the "borrow checker", which tracks the object lifetime of references at compile time.

Rust does not enforce a programming paradigm, but was influenced by ideas from functional programming, including immutability, higher-order functions, algebraic data types, and pattern matching. It also supports object-oriented programming via

It also supports object-oriented programming via structs, enums, traits, and methods. It is popular for systems programming.[13][14][15]

Software developer Graydon Hoare created Rust as a personal project while working at Mozilla Research in 2006. Mozilla officially sponsored the project in 2009. In the years following the first stable release in May 2015, Rust was adopted by

stable release in May 2015, Rust was adopted by companies including Amazon, Discord, Dropbox, Google (Alphabet), Meta, and Microsoft. In December 2022, it became the first language other than C and assembly to be supported in the development of the

to be supported in the development of the Linux kernel.

Rust has been noted for its rapid adoption, and has been studied in programming language theory research.
History[edit]
Origins (2006–2012)[edit]
Mozilla Foundation headquarters in Mountain View, California

Rust began as a personal project in 2006 by Mozilla Research employee Graydon Hoare, named after the group of fungi that are "over-engineered for survival". Mozilla began sponsoring the project in 2009, and would employ a dozen engineers to work on

and would employ a dozen engineers to work on it full time over the next ten years.[16]

Around 2010, work shifted from the initial compiler written in OCaml to a self-hosting compiler based on LLVM written in Rust. The new Rust compiler successfully compiled itself in 2011.[17][better source needed] In the fall of 2011, the Rust logo

In the fall of 2011, the Rust logo was developed based on a bicycle chainring.[18]

Evolution (2012–2020)[edit]

Rust's type system underwent significant changes between versions 0.2, 0.3, and 0.4. In version 0.2, which was released in March 2012, classes were introduced for the first time.[19] Four months later, version 0.3 added destructors and polymorphism,

version 0.3 added destructors and polymorphism, through the use of interfaces.[20] In October 2012, version 0.4 was released, which added traits as a means of inheritance. Interfaces were combined with traits and removed as a separate feature; and

traits and removed as a separate feature; and classes were replaced by a combination of implementations and structured types.[21]

Through the early 2010s, memory management through the ownership system was gradually consolidated to prevent memory bugs. By 2013, Rust's garbage collector was removed, with the ownership rules in place.[16]

In January 2014, the editor-in-chief of Dr. Dobb's Journal, Andrew Binstock, commented on Rust's chances of becoming a competitor to C++, along with D, Go, and Nim (then Nimrod). According to Binstock, while Rust was "widely viewed as a remarkably

while Rust was "widely viewed as a remarkably elegant language", adoption slowed because it radically changed from version to version.[22] The first stable release, Rust 1.0, was released on May 15, 2015.[16]

The development of the Servo browser engine continued alongside Rust's own growth. In September 2017, Firefox 57 was released as the first version that incorporated components from Servo, in a project named "Firefox Quantum".[23]

Mozilla layoffs and Rust Foundation (2020–present)[edit]

In August 2020, Mozilla laid off 250 of its 1,000 employees worldwide, as part of a corporate restructuring caused by the COVID-19 pandemic.[24][25] The team behind Servo was disbanded. The event raised concerns about the future of Rust, as some

raised concerns about the future of Rust, as some members of the team were active contributors to Rust.[26] In the following week, the Rust Core Team acknowledged the severe impact of the layoffs and announced that plans for a Rust foundation were

announced that plans for a Rust foundation were underway. The first goal of the foundation would be to take ownership of all trademarks and domain names, and take financial responsibility for their costs.[27]

On February 8, 2021, the formation of the Rust Foundation was announced by its five founding companies (AWS, Huawei, Google, Microsoft, and Mozilla).[28][29] In a blog post published on April 6, 2021, Google announced support for Rust within the

Google announced support for Rust within the Android Open Source Project as an alternative to C/C++.[30]

On November 22, 2021, the Moderation Team, which was responsible for enforcing community standards and the Code of Conduct, announced their resignation "in protest of the Core Team placing themselves unaccountable to anyone but themselves".[31] In

unaccountable to anyone but themselves".[31] In May 2022, the Rust Core Team, other lead programmers, and certain members of the Rust Foundation board implemented governance reforms in response to the incident.[32]

The Rust Foundation posted a draft for a new trademark policy on April 6, 2023, revising its rules on how the Rust logo and name can be used, which resulted in negative reactions from Rust users and contributors.[33]
Syntax and features[edit]

Rust's syntax is similar to that of C and C++,[34][35] although many of its features were influenced by functional programming languages such as OCaml.[36] Hoare described Rust as targeted at "frustrated C++ developers" and emphasized features such

C++ developers" and emphasized features such as safety, control of memory layout, and concurrency.[17] Safety in Rust includes the guarantees of memory safety, type safety, and lack of data races.

Hello World program[edit]
Below is a "Hello, World!" program in Rust. The fn keyword denotes a function, and the println! macro (see § Macros) prints the message to standard output.[37] Statements in Rust are separated by semicolons.
fn main() {

fn main() {
println!("Hello, World!");
}
Variables[edit]
Variables in Rust are defined through the let keyword.[38] The example below assigns a value to the variable with name foo.
fn main() {
let foo = 10;
println!("The value of foo is {foo}");
}

println!("The value of foo is {foo}");
}
Variables are immutable by default, and adding the mut keyword allows the variable to be mutated.[39] The following example uses //, which denotes the start of a comment.[40]
fn main() {

fn main() {
let mut foo = 10; // This code would not compile without adding "mut".
println!("The value of foo is {foo}");
foo = 20;
println!("The value of foo is {foo}");
}

Multiple let expressions can define multiple variables with the same name, known as variable shadowing. Variable shadowing allows transforming variables without having to name the variables differently.[41] The example below declares a new variable

The example below declares a new variable with the same name that is double the original value:

fn main() {
let foo = 10;
println!("The value of foo is {foo}");
let foo = foo * 2;
println!("The value of foo is {foo}");
}
Variable shadowing is also possible for values of different types, going from a string to its length:
fn main() {

fn main() {
let spaces = "   ";
let spaces = spaces.len();
}
Keywords and control flow[edit]
In Rust, blocks of code are delimited by curly brackets.[42]
if blocks[edit]

if blocks[edit]
An if conditional expression executes code based on whether the given value is true. else can be used for when the value evaluates to false, and else if can be used for combining multiple expressions.[43]
fn main() {
let x = 10;

fn main() {
let x = 10;
if x > 5 {
println!("value is greater than five");
}
if x % 7 == 0 {
println!("value is divisible by 7");
} else if x % 5 == 0 {
println!("value is divisible by 5");
} else {
println!("value is not divisible by 7 or 5");
}
}

println!("value is not divisible by 7 or 5");
}
}
while loops[edit]
while can be used to repeat a block of code while a condition is met.[44]
fn main() {
// Iterate over all integers from 4 to 10
let mut value = 4;
while value <= 10 {

let mut value = 4;
while value <= 10 {
println!("value = {value}");
value += 1
}
}
for loops and iterators[edit]
For loops in Rust loop over elements of a collection.[45]
For expressions work over any iterator type.
fn main(){

fn main(){
// Using `for` with range syntax for the same functionality as above
for value in 4..=10 {
println!("value = {value}");
}
}

println!("value = {value}");
}
}
In the above code, 4..=10 is a value of type Range which implements the Iterator trait. The code within the curly braces is applied to each element returned by the iterator.

Iterators can be combined with functions over iterators like map, filter, and sum. For example, the following adds up all numbers between 1 and 100 that are multiples of 3:
(1..=100).filter(|&x| x % 3 == 0).sum()
loop and break statements[edit]

More generally, the loop keyword allows repeating a portion of code until a break occurs. break may optionally exit the loop with a value. Labels denoted with 'label_name can be used to break an outer loop when loops are nested.[46]
fn main() {

fn main() {
let value = 456;
let mut x = 1;
let y = loop {
x *= 10;
if x > value {
break x / 10;
}
};
println!("largest power of ten that is smaller than value: {y}");
let mut up = 1;
'outer: loop {
let mut down = 120;
loop {
if up > 100 {

let mut down = 120;
loop {
if up > 100 {
break 'outer;
}
if down < 4 {
break;
}
down /= 2;
up += 1;
println!("up: {up}, down: {down}");
}
up *= 2;
}
}
Expressions[edit]

Rust is expression-oriented, with nearly every part of a function body being an expression, including control-flow operators.[47] The if expression is used to provide the ternary conditional operator. With returns being implicit, a function does not

With returns being implicit, a function does not need to end with a return expression; if the semicolon is omitted, the value of the last expression in the function is used as the return value,[48] as seen in the following recursive implementation

as seen in the following recursive implementation of the factorial function:

fn factorial(i: u64) -> u64 {
if i == 0 {
1
} else {
i * factorial(i - 1)
}
}
The following iterative implementation uses the ..= operator to create an inclusive range:
fn factorial(i: u64) -> u64 {
(2..=i).product()
}
Pattern matching[edit]

(2..=i).product()
}
Pattern matching[edit]
The match and if let expressions can be used for pattern matching. For example, match can be used to double an optional integer value if present, and return zero otherwise:[49]

fn double(x: Option<u64>) -> u64 {
match x {
Some(x) => x * 2,
None => 0,
}
}
Equivalently, this can be written with if let and else:
fn double(x: Option<u64>) -> u64 {
if let Some(x) = x {
x * 2
} else {
0
}
}
Types[edit]

Rust is strongly typed and statically typed. The types of all variables must be known at compilation time; assigning a value of a particular type to a differently typed variable causes a compilation error. Type inference is used to determine the

error. Type inference is used to determine the type of variables if unspecified.[50]

The default integer type is i32, and the default floating point type is f64. If the type of a literal number is not explicitly provided, either it is inferred from the context or the default type is used.[51]
Primitive types[edit]

Integer types in Rust are named based on the signedness and the number of bits the type takes. For example, i32 is a signed integer that takes 32 bits of storage, whereas u8 is unsigned and only takes 8 bits of storage. isize and usize take storage

8 bits of storage. isize and usize take storage depending on the architecture of the computer that runs the code, for example, on computers with 32-bit architectures, both types will take up 32 bits of space.

By default, integer literals are in base-10, but different radices are supported with prefixes, for example, 0b11 for binary numbers, 0o567 for octals, and 0xDB for hexadecimals. By default, integer literals default to i32 as its type. Suffixes such

default to i32 as its type. Suffixes such as 4u32 can be used to explicitly set the type of a literal.[52] Byte literals such as b'X' are available to represent the ASCII value (in u8) of a specific character.[53]

The Boolean type is referred to as bool which can take a value of either true or false. A char takes up 32 bits of space and represents a Unicode scalar value: a Unicode codepoint that is not a surrogate.[54] IEEE 754 floating point numbers are

IEEE 754 floating point numbers are supported with f32 for single precision floats and f64 for double precision floats.[55]

User-defined types[edit]

User-defined types are created with the struct or enum keywords. The struct keyword is used to denote a record type that groups multiple related values.[56] enums can take on different variants at runtime, with its capabilities similar to algebraic

with its capabilities similar to algebraic data types found in functional programming languages.[57] Both structs and enums can contain fields with different types.[58] Alternative names for the same type can be defined with the type keyword.[59]

The impl keyword can define methods for a user-defined type. Data and functions are defined separately. Implementations fulfill a role similar to that of classes within other languages.[60]
Standard library[edit]

Standard library[edit]
Summary of Rust's types in the standard library
Type
Description
Examples
String
UTF-8-encoded strings (dynamic)
String::new()
String::from("Hello")
"🦀🦀🦀".to_string()
OsStr
OsString

"🦀🦀🦀".to_string()
OsStr
OsString
Platform-native strings[note 4] (borrowed[61] and dynamic[62])
OsStr::new("Hello")
OsString::from("world")
Path
PathBuf
Paths (borrowed[63] and dynamic[64])
Path::new("./path/to")
PathBuf::from(r"C:.\path\to")
CStr

PathBuf::from(r"C:.\path\to")
CStr
CString
C-compatible, null-terminated strings (borrowed[65] and dynamic[65])
c"Hello"
CStr::from_bytes_with_nul(b"Hello\0").unwrap()
CString::new("world").unwrap()
Vec<T>
Dynamic arrays
Vec::new()

Vec<T>
Dynamic arrays
Vec::new()
vec![1, 2, 3, 4, 5]
Option<T>
Option type
None
Some(3)
Some("hello")
Result<T, E>
Error handling using a result type
Ok(3)
Err("something went wrong")
Box<T>

Ok(3)
Err("something went wrong")
Box<T>
A pointer to a heap-allocated value.[66] Similar to C++'s std::unique_ptr.
let boxed: Box<u8> = Box::new(5);
let val: u8 = *boxed;
Rc<T>
Reference counting pointer[67]
let five = Rc::new(5);

let five = Rc::new(5);
let also_five = five.clone();
Arc<T>
Atomic, thread-safe reference counting pointer[68]
let foo = Arc::new(vec![1.0, 2.0]);
let a = foo.clone(); // a can be sent to another thread
Cell<T>
A mutable memory location[69]

Cell<T>
A mutable memory location[69]
let c = Cell::new(5);
c.set(10);
Mutex<T>
A mutex lock for shared data contained within.[70]
let mutex = Mutex::new(0_u32);
let _guard = mutex.lock();
RwLock<T>
Readers–writer lock[71]
let lock = RwLock::new(5);

let lock = RwLock::new(5);
let r1 = lock.read().unwrap();
Condvar
A conditional monitor for shared data[72]
let (lock, cvar) = (Mutex::new(true), Condvar::new());
// As long as the value inside the `Mutex<bool>` is `true`, we wait.

let _guard = cvar.wait_while(lock.lock().unwrap(), |pending| { *pending }).unwrap();
Duration
Type that represents a span of time[73]
Duration::from_millis(1) // 1ms
HashMap<K, V>
Hash table[74]
let mut player_stats = HashMap::new();

let mut player_stats = HashMap::new();
player_stats.insert("damage", 1);
player_stats.entry("health").or_insert(100);
BTreeMap<K, V>
B-tree[75]
let mut solar_distance = BTreeMap::from([
("Mercury", 0.4),
("Venus", 0.7),
]);

("Mercury", 0.4),
("Venus", 0.7),
]);
solar_distance.entry("Earth").or_insert(1.0);
Option values are handled using syntactic sugar, such as the if let construction, to access the inner value (in this case, a string):[76]
fn main() {

fn main() {
let name1: Option<&str> = None;
// In this case, nothing will be printed out
if let Some(name) = name1 {
println!("{name}");
}
let name2: Option<&str> = Some("Matthew");
// In this case, the word "Matthew" will be printed out

if let Some(name) = name2 {
println!("{name}");
}
}
Pointers[edit]
Summary of Rust's pointer and reference primitive types
Type
Description
Examples
&T
&mut T
References (immutable and mutable)
let x_ref = &x;
let x_ref = &mut x;
Option<&T>

let x_ref = &x;
let x_ref = &mut x;
Option<&T>
Option<&mut T>
Option wrapped reference
Possibly null reference
None
let x_ref = Some(&x);
let x_ref = Some(&mut x);
Box<T>
Option<Box<T>>
A pointer to heap-allocated value

Option<Box<T>>
A pointer to heap-allocated value
(or possibly null pointer if wrapped in option)[65]
let boxed = Box::new(0);
let boxed = Some(Box::new("Hello World"));
*const T
*mut T
Raw pointers (immutable and mutable)

*mut T
Raw pointers (immutable and mutable)
Possibly null; unsafe to dereference
let x_ptr = &x as *const T;
let x_ptr = &mut x as *mut T;

Rust does not use null pointers to indicate a lack of data, as doing so can lead to null dereferencing. Accordingly, the basic & and &mut references are guaranteed to not be null. Rust instead uses Option for this purpose: Some(T) indicates that a

Option for this purpose: Some(T) indicates that a value is present, and None is analogous to the null pointer.[77] Option implements a "null pointer optimization", avoiding any spatial overhead for types that cannot have a null value (references or

that cannot have a null value (references or the NonZero types, for example).[78]

Unlike references, the raw pointer types *const and *mut may be null; however, it is impossible to dereference them unless the code is explicitly declared unsafe through the use of an unsafe block. Unlike dereferencing, the creation of raw pointers

dereferencing, the creation of raw pointers is allowed inside of safe Rust code.[79]

Type conversion[edit]
This section is an excerpt from Type conversion § Rust.[edit]
Rust provides no implicit type conversion (coercion) between primitive types. But, explicit type conversion (casting) can be performed using the as keyword.[80]

let x = 1000;
println!("1000 as a u16 is: {}", x as u16);
Ownership and lifetimes[edit]

Rust's ownership system consists of rules that ensure memory safety without using a garbage collector. At compile time, each value must be attached to a variable called the owner of that value, and every value must have exactly one owner.[81] Values

value must have exactly one owner.[81] Values are moved between different owners through assignment or passing a value as a function parameter. Values can also be borrowed, meaning they are temporarily passed to a different function before being

passed to a different function before being returned to the owner.[82] With these rules, Rust can prevent the creation and use of dangling pointers:[82][83]

fn print_string(s: String) {
println!("{}", s);
}
fn main() {
let s = String::from("Hello, World");
print_string(s); // s consumed by print_string
// s has been moved, so cannot be used any more

// s has been moved, so cannot be used any more
// another print_string(s); would result in a compile error
}

Because of these ownership rules, Rust types are known as linear or affine types, meaning each value can be used exactly once. This enforces a form of software fault isolation as the owner of a value is solely responsible for its correctness and

is solely responsible for its correctness and deallocation.[84]

When a value goes out of scope, it is dropped by running its destructor. The destructor may be programmatically defined through implementing the Drop trait. This helps manage resources such as file handles, network sockets, and locks, since when

handles, network sockets, and locks, since when objects are dropped, the resources associated with them are closed or released automatically.[85]

Lifetimes are usually an implicit part of all reference types in Rust. Each lifetime encompasses a set of locations in the code for which a variable is valid. For example, a reference to a local variable has a lifetime corresponding to the block it

has a lifetime corresponding to the block it is defined in:[86]

fn main() {
let x = 5;                              // ------------------+- Lifetime 'a
//                   |
let r = &x;                             // -+-- Lifetime 'b  |
//  |                |

//  |                |
println!("r: {}", r);                   //  |                |
//  |                |
// -+                |
}                                           // ------------------+

The borrow checker in the Rust compiler uses lifetimes to ensure that the values a reference points to remain valid.[87][88] In the example above, storing a reference to variable x in r is valid, as variable x has a longer lifetime ('a) than

as variable x has a longer lifetime ('a) than variable r ('b). However, when x has a shorter lifetime, the borrow checker would reject the program:

fn main() {
let r;                                  // ------------------+- Lifetime 'a
//                   |
{                                       //                   |
let x = 5;                          // -+-- Lifetime 'b  |

r = &x;                             //  |                |
}                                       // -|                |
//                   |
println!("r: {}", r);                   //                   |

}                                           // ------------------+

Since the lifetime of the referenced variable ('b) is shorter than the lifetime of the variable holding the reference ('a), the borrow checker errors, preventing x from being used from outside its scope.[89]

Lifetime parameters make the lifetimes of references explicit, for example, by specifying the source of an output:[90]
fn remove_prefix<'a>(mut original: &'a str, prefix: &str) -> &'a str {
if original.starts_with(prefix) {

if original.starts_with(prefix) {
original = original[prefix.len()..];
}
original
}

original = original[prefix.len()..];
}
original
}
With information regarding how lifetimes of the output value of the function related to its inputs, the compiler is able to prevent memory safety issues such as dangling pointers.

When user-defined types hold references to data, they also need to use lifetime parameters. The example below parses some configuration options from a string and creates a struct containing the options. The function parse_config also showcases

options. The function parse_config also showcases lifetime elision, which reduces the need for explicitly defining lifetime parameters.[91]

use std::collections::HashMap;
// This struct has one lifetime parameter, 'src. The name is only used within the struct's definition.
#[derive(Debug)]
struct Config<'src> {
hostname: &'src str,
username: &'src str,
}

hostname: &'src str,
username: &'src str,
}
// The '_ lifetime parameter, in this case, refers to the anonymous lifetime attached to the type
// of the argument `config`.
fn parse_config(config: &str) -> Config<'_> {

fn parse_config(config: &str) -> Config<'_> {
let key_values: HashMap<_, _> = config
.lines()
.filter(|line| !line.starts_with('#'))
.filter_map(|line| line.split_once('='))
.map(|(key, value)| (key.trim(), value.trim()))
.collect();
Config {

.collect();
Config {
hostname: key_values["hostname"],
username: key_values["username"],
}
}
fn main() {
let config = parse_config(
r#"hostname = foobar
username=barfoo"#,
);
println!("Parsed config: {:#?}", config);
}

);
println!("Parsed config: {:#?}", config);
}
A presentation on Rust by Emily Dunham from Mozilla's Rust team (linux.conf.au conference, Hobart, 2017)
Polymorphism[edit]
Generics[edit]

Rust's more advanced features include the use of generic functions. A generic function is given generic parameters, which allow the same function to be applied to different variable types. This capability reduces duplicate code[92] and is known as

reduces duplicate code[92] and is known as parametric polymorphism.

The following program calculates the sum of two things, for which addition is implemented using a generic function:
use std::ops::Add;
// sum is a generic function with one type parameter, T
fn sum<T>(num1: T, num2: T) -> T
where

fn sum<T>(num1: T, num2: T) -> T
where
T: Add<Output = T>,  // T must implement the Add trait where addition returns another T
{
num1 + num2  // num1 + num2 is syntactic sugar for num1.add(num2) provided by the Add trait
}
fn main() {

}
fn main() {
let result1 = sum(10, 20);
println!("Sum is: {}", result1); // Sum is: 30
let result2 = sum(10.23, 20.45);
println!("Sum is: {}", result2); // Sum is: 30.68
}

}
At compile time, polymorphic functions like sum are instantiated with the specific types the code requires; in this case, sum of integers and sum of floats.

Generics can be used in functions to allow implementing a behavior for different types without repeating the same code. Generic functions can be written in relation to other generics, without knowing the actual type.[93]
Traits[edit]

Rust's type system supports a mechanism called traits, inspired by type classes in the Haskell language,[6] to define shared behavior between different types. For example, the Add trait can be implemented for floats and integers, which can be added;

for floats and integers, which can be added; and the Display or Debug traits can be implemented for any type that can be converted to a string. Traits can be used to provide a set of common behavior for different types without knowing the actual

for different types without knowing the actual type. This facility is known as ad hoc polymorphism.

Generic functions can constrain the generic type to implement a particular trait or traits; for example, an add_one function might require the type to implement Add. This means that a generic function can be type-checked as soon as it is defined.

can be type-checked as soon as it is defined. The implementation of generics is similar to the typical implementation of C++ templates: a separate copy of the code is generated for each instantiation. This is called monomorphization and contrasts

This is called monomorphization and contrasts with the type erasure scheme typically used in Java and Haskell. Type erasure is also available via the keyword dyn (short for dynamic).[94] Because monomorphization duplicates the code for each type

duplicates the code for each type used, it can result in more optimized code for specific-use cases, but compile time and size of the output binary are also increased.[95]

In addition to defining methods for a user-defined type, the impl keyword can be used to implement a trait for a type.[60] Traits can provide additional derived methods when implemented.[96] For example, the trait Iterator requires that the next

the trait Iterator requires that the next method be defined for the type. Once the next method is defined, the trait can provide common functional helper methods over the iterator, such as map or filter.[97]

Trait objects[edit]

Rust traits are implemented using static dispatch, meaning that the type of all values is known at compile time; however, Rust also uses a feature known as trait objects to accomplish dynamic dispatch (also known as duck typing).[98] Dynamically

(also known as duck typing).[98] Dynamically dispatched trait objects are declared using the syntax dyn Tr where Tr is a trait. Trait objects are dynamically sized, therefore they must be put behind a pointer, such as Box.[99] The following example

a pointer, such as Box.[99] The following example creates a list of objects where each object can be printed out using the Display trait:

use std::fmt::Display;
let v: Vec<Box<dyn Display>> = vec![
Box::new(3),
Box::new(5.0),
Box::new("hi"),
];
for x in v {
println!("{x}");
}
If an element in the list does not implement the Display trait, it will cause a compile-time error.[100]

Memory safety[edit]

Rust is designed to be memory safe. It does not permit null pointers, dangling pointers, or data races.[101][102][103] Data values can be initialized only through a fixed set of forms, all of which require their inputs to be already

all of which require their inputs to be already initialized.[104]

Unsafe code can subvert some of these restrictions, using the unsafe keyword.[79] Unsafe code may also be used for low-level functionality, such as volatile memory access, architecture-specific intrinsics, type punning, and inline assembly.[105]

Memory management[edit]

Rust does not use garbage collection. Memory and other resources are instead managed through the "resource acquisition is initialization" convention,[106] with optional reference counting. Rust provides deterministic management of resources, with

deterministic management of resources, with very low overhead.[107] Values are allocated on the stack by default, and all dynamic allocations must be explicit.[108]

The built-in reference types using the & symbol do not involve run-time reference counting. The safety and validity of the underlying pointers is verified at compile time, preventing dangling pointers and other forms of undefined behavior.[109]

and other forms of undefined behavior.[109] Rust's type system separates shared, immutable references of the form &T from unique, mutable references of the form &mut T. A mutable reference can be coerced to an immutable reference, but not vice

coerced to an immutable reference, but not vice versa.[110]

Closures[edit]
This section is an excerpt from Anonymous function § Rust.[edit]
In Rust, anonymous functions are called closures.[111] They are defined using the following syntax:
|<parameter-name>: <type>| -> <return-type> { <body> };
For example:

For example:
let f = |x: i32| -> i32 { x * 2 };
With type inference, however, the compiler is able to infer the type of each parameter and the return type, so the above form can be written as:
let f = |x| { x * 2 };

let f = |x| { x * 2 };
With closures with a single expression (i.e. a body with one line) and implicit return type, the curly braces may be omitted:
let f = |x| x * 2;
Closures with no input parameter are written like so:

let f = || println!("Hello, world!");
Closures may be passed as input parameters of functions that expect a function pointer:
// A function which takes a function pointer as an argument and calls it with
// the value `5`.

// the value `5`.
fn apply(f: fn(i32) -> i32) -> i32 {
// No semicolon, to indicate an implicit return
f(5)
}
fn main() {
// Defining the closure
let f = |x| x * 2;
println!("{}", apply(f));  // 10
println!("{}", f(5));      // 10
}

println!("{}", f(5));      // 10
}
However, one may need complex rules to describe how values in the body of the closure are captured. They are implemented using the Fn, FnMut, and FnOnce traits:[112]

Fn: the closure captures by reference (&T). They are used for functions that can still be called if they only have reference access (with &) to their environment.

FnMut: the closure captures by mutable reference (&mut T). They are used for functions that can be called if they have mutable reference access (with &mut) to their environment.

FnOnce: the closure captures by value (T). They are used for functions that are only called once.

With these traits, the compiler will capture variables in the least restrictive manner possible.[112] They help govern how values are moved around between scopes, which is largely important since Rust follows a lifetime construct to ensure values

follows a lifetime construct to ensure values are "borrowed" and moved in a predictable and explicit manner.[113]

The following demonstrates how one may pass a closure as an input parameter using the Fn trait:
// A function that takes a value of type F (which is defined as
// a generic type that implements the `Fn` trait, e.g. a closure)

// and calls it with the value `5`.
fn apply_by_ref<F>(f: F) -> i32
where F: Fn(i32) -> i32
{
f(5)
}
fn main() {
let f = |x| {
println!("I got the value: {}", x);
x * 2
};
// Applies the function before printing its return value

println!("5 * 2 = {}", apply_by_ref(f));
}
// ~~ Program output ~~
// I got the value: 5
// 5 * 2 = 10
The previous function definition can also be shortened for convenience as follows:
fn apply_by_ref(f: impl Fn(i32) -> i32) -> i32 {
f(5)
}

f(5)
}
Macros[edit]
It is possible to extend the Rust language using macros.
Declarative macros[edit]

Declarative macros[edit]
A declarative macro (also called a "macro by example") is a macro, defined using the macro_rules! keyword, that uses pattern matching to determine its expansion.[114][115] An example is the println!() macro.[116]

Procedural macros[edit]

Procedural macros are Rust functions that run and modify the compiler's input token stream, before any other components are compiled. They are generally more flexible than declarative macros, but are more difficult to maintain due to their

but are more difficult to maintain due to their complexity.[117][118]

Procedural macros come in three flavors:
Function-like macros custom!(...)
Derive macros #[derive(CustomDerive)]
Attribute macros #[custom_attribute]

Attribute macros #[custom_attribute]
The rsx! macro in the Dioxus front-end framework is an example of a function-like macro.[119][120] Theserde_derive macro[121] provides a commonly used library for generating code

for reading and writing data in many formats, such as JSON. Attribute macros are commonly used for language bindings, such as the extendr library for Rust bindings to R.[122]

The following code shows the use of the Serialize, Deserialize, and Debug-derived procedural macros
to implement JSON reading and writing, as well as the ability to format a structure for debugging.
use serde::{Serialize, Deserialize};

use serde::{Serialize, Deserialize};
#[derive(Serialize, Deserialize, Debug)]
struct Point {
x: i32,
y: i32,
}
fn main() {
let point = Point { x: 1, y: 2 };
let serialized = serde_json::to_string(&point).unwrap();

println!("serialized = {}", serialized);
let deserialized: Point = serde_json::from_str(&serialized).unwrap();
println!("deserialized = {:?}", deserialized);
}
Variadic macros[edit]
This section is an excerpt from Variadic function § In Rust.[edit]

Rust does not support variadic arguments in functions. Instead, it uses macros.[123]
macro_rules! calculate {
// The pattern for a single `eval`
(eval $e:expr) => {{
{
let val: usize = $e; // Force types to be integers

println!("{} = {}", stringify!{$e}, val);
}
}};
// Decompose multiple `eval`s recursively
(eval $e:expr, $(eval $es:expr),+) => {{
calculate! { eval $e }
calculate! { $(eval $es),+ }
}};
}
fn main() {
calculate! { // Look ma! Variadic `calculate!`!

calculate! { // Look ma! Variadic `calculate!`!
eval 1 + 2,
eval 3 + 4,
eval (2 * 3) + 1
}
}
Rust is able to interact with C's variadic system via a c_variadic feature switch. As with other C interfaces, the system is considered unsafe to Rust.[124]

Interface with C and C++[edit]

Rust has a foreign function interface (FFI) that can be used both to call code written in languages such as C from Rust and to call Rust code from those languages. As of 2024[update], an external library called CXX exists for calling to or from

library called CXX exists for calling to or from C++.[125] Rust and C differ in how they lay out structs in memory, so Rust structs may be given a #[repr(C)] attribute, forcing the same layout as the equivalent C struct.[126]

Ecosystem[edit]
Compiling a Rust program with Cargo

The Rust ecosystem includes its compiler, its standard library, and additional components for software development. Component installation is typically managed by rustup, a Rust toolchain installer developed by the Rust project.[127]
Compiler[edit]

The Rust compiler is named rustc, and translates Rust code into a low level language called LLVM intermediate representation (LLVM IR). LLVM is then invoked as a subcomponent to translate IR code into machine code. A linker is then used to combine

machine code. A linker is then used to combine multiple crates together as a single executable or binary file.[128][129]

Other than LLVM, the compiler also supports using alternative backends such as GCC and Cranelift for code generation.[130] The intention of those alternative backends is to increase platform coverage of Rust or to improve compilation

coverage of Rust or to improve compilation times.[131][132]

Standard library[edit]

The Rust standard library defines and implements many widely used custom data types, including core data structures such as Vec, Option, and HashMap, as well as smart pointer types. Rust also provides a way to exclude most of the standard library

a way to exclude most of the standard library using the attribute #![no_std]; this enables applications, such as embedded devices, which want to remove dependency code or provide their own core data structures. Internally, the standard library is

structures. Internally, the standard library is divided into three parts, core, alloc, and std, where std and alloc are excluded by #![no_std].[133]

Screenshot of crates.io in June 2022
Cargo[edit]

Cargo[edit]
Cargo is Rust's build system and package manager. It downloads, compiles, distributes, and uploads packages—called crates—that are maintained in an official registry. It also acts as a front-end for Clippy and other Rust components.[134]

By default, Cargo sources its dependencies from the user-contributed registry crates.io, but Git repositories and crates in the local filesystem, and other external sources can also be specified as dependencies.[135]
Rustfmt[edit]

Rustfmt is a code formatter for Rust. It formats whitespace and indentation to produce code in accordance with a common style, unless otherwise specified. It can be invoked as a standalone program, or from a Rust project through Cargo.[136]

Example output of Clippy on a hello world Rust program
Clippy[edit]
Clippy is Rust's built-in linting tool to improve the correctness, performance, and readability of Rust code. As of 2024[update], it has more than 700 rules.[137][138]

Versioning system[edit]

Following Rust 1.0, new features are developed in nightly versions which are released daily. During each six-week release cycle, changes to nightly versions are released to beta, while changes from the previous beta version are released to a new

the previous beta version are released to a new stable version.[139]

Every two or three years, a new "edition" is produced. Editions are released to allow making limited breaking changes, such as promoting await to a keyword to support async/await features. Crates targeting different editions can interoperate with

different editions can interoperate with each other, so a crate can upgrade to a new edition even if its callers or its dependencies still target older editions. Migration to a new edition can be assisted with automated tooling.[140]

IDE support[edit]

rust-analyzer is a collection of utilities that provides Integrated development environments (IDEs) and text editors with information about a Rust project through the Language Server Protocol. This enables features including autocompletion, and the

features including autocompletion, and the display of compilation errors while editing.[141]

Performance[edit]

In general, Rust's memory safety guarantees do not impose a runtime overhead.[142] A notable exception is array indexing which is checked at runtime, though this often does not impact performance.[143] Since it does not perform garbage collection,

Since it does not perform garbage collection, Rust is often faster than other memory-safe languages.[144][84][145]

Rust provides two "modes": safe and unsafe. Safe mode is the "normal" one, in which most Rust is written. In unsafe mode, the developer is responsible for the code's memory safety, which is used by developers for cases where the compiler is too

by developers for cases where the compiler is too restrictive.[146]

Many of Rust's features are so-called zero-cost abstractions, meaning they are optimized away at compile time and incur no runtime penalty.[147] The ownership and borrowing system permits zero-copy implementations for some performance-sensitive

implementations for some performance-sensitive tasks, such as parsing.[148] Static dispatch is used by default to eliminate method calls, with the exception of methods called on dynamic trait objects.[149] The compiler also uses inline expansion to

The compiler also uses inline expansion to eliminate function calls and statically-dispatched method invocations.[150]

Since Rust utilizes LLVM, any performance improvements in LLVM also carry over to Rust.[151] Unlike C and C++, Rust allows for reordering struct and enum elements[152] to reduce the sizes of structures in memory, for better memory alignment, and to

in memory, for better memory alignment, and to improve cache access efficiency.[153]

Adoption[edit]
See also: Category:Rust (programming language) software
Early homepage of Mozilla's Servo browser engine

Rust has been used in software across different domains. Rust was initially funded by Mozilla as part of developing Servo, an experimental parallel browser engine, in collaboration with Samsung.[154] Components from the Servo engine were later

Components from the Servo engine were later incorporated in the Gecko browser engine underlying Firefox.[155] In January 2023, Google (Alphabet) announced support for using third party Rust libraries in Chromium.[156][157]

Rust is used in several backend software projects of large web services. OpenDNS, a DNS resolution service owned by Cisco, uses Rust internally.[158][159] Amazon Web Services uses Rust in "performance-sensitive components" of its several services.

components" of its several services. In 2019, AWS open-sourced Firecracker, a virtualization solution primarily written in Rust.[160] Microsoft Azure IoT Edge, a platform used to run Azure services on IoT devices, has components implemented in

on IoT devices, has components implemented in Rust.[161] Microsoft also uses Rust to run containerized modules with WebAssembly and Kubernetes.[162] Cloudflare, a company providing content delivery network services, used Rust to build a new web

network services, used Rust to build a new web proxy named Pingora for increased performance and efficiency.[163]

The npm package manager started using Rust for its production authentication service in 2019.[164][165][166]
In operating systems, the Android developers were using Rust in 2021 to rewrite existing components.[167][168]

The Rust for Linux project, launched in 2020, added initial Rust support to Linux in late 2022, and the first Linux drivers written in Rust were released in late 2023.[169][170]

Microsoft is rewriting parts of Windows in Rust.[171] The r9 project aims to re-implement Plan 9 from Bell Labs in Rust.[172] Rust has been used in the development of new operating systems such as Redox, a "Unix-like" operating system and

such as Redox, a "Unix-like" operating system and microkernel,[173] Theseus, an experimental operating system with modular state management,[174][175] and most of Fuchsia.[176] Rust is also used for command-line tools and operating system

used for command-line tools and operating system components, including stratisd, a file system manager[177][178] and COSMIC, a desktop environment by System76.[179]

In web development, Deno, a secure runtime for JavaScript and TypeScript, is built on top of V8 using Rust and Tokio.[180] Other notable adoptions in this space include Ruffle, an open-source SWF emulator,[181] and Polkadot, an open source

SWF emulator,[181] and Polkadot, an open source blockchain and cryptocurrency platform.[182]

Discord, an instant messaging software company, has rewritten parts of its system in Rust for increased performance in 2020. In the same year, Dropbox announced that its file synchronization had been rewritten in Rust. Facebook (Meta) has also used

rewritten in Rust. Facebook (Meta) has also used Rust to redesign its system that manages source code for internal projects.[16]

In the 2023 Stack Overflow Developer Survey, 13% of respondents had recently done extensive development in Rust.[183] The survey also named Rust the "most loved programming language" every year from 2016 to 2023 (inclusive) and the "most-admired

2016 to 2023 (inclusive) and the "most-admired programming language" in 2024, based on the number of developers interested in continuing to work in the same language.[184][note 5] In 2023, Rust was the 6th "most wanted technology", with 31% of

was the 6th "most wanted technology", with 31% of developers not currently working in Rust expressing an interest in doing so.[183]

In academic research[edit]

Rust has been studied in academic research, both for properties of the language itself as well as the utility the language provides for writing software used for research. Its features around safety[185][146] and performance[186] have been examined.

In a journal article published to Proceedings of the International Astronomical Union, astrophysicists Blanco-Cuaresma and Bolmont re-implemented programs responsible for simulating multi-planet systems in Rust, and found it to be a competitive

systems in Rust, and found it to be a competitive programming language for its "speed and accuracy".[14] Likewise, an article published on Nature shared several stories of bioinformaticians using Rust for its performance and safety.[134] However,

for its performance and safety.[134] However, both articles have cited Rust's unique concepts, including its ownership system, being difficult to learn as one of the main drawbacks to adopting Rust.

Community[edit]
Some Rust users refer to themselves as Rustaceans (similar to the word crustacean) and have adopted an orange crab, Ferris, as their unofficial mascot.[187][188]

Rust has been noted as having an inclusive community, and particularly welcomed people from the queer community, partly due to its code of conduct which outlined a set of expectations for Rust community members to follow. One MIT Technology Review

members to follow. One MIT Technology Review article described the Rust community as "unusually friendly" to newcomers.[16][134]

Rust Foundation[edit]

Rust FoundationFormationFebruary 8, 2021; 3 years ago (2021-02-08)FoundersAmazon Web ServicesGoogleHuaweiMicrosoftMozilla FoundationTypeNonprofit organizationLocationUnited StatesChairpersonShane MillerExecutive DirectorRebecca

MillerExecutive DirectorRebecca RumbulWebsitefoundation.rust-lang.org

The Rust Foundation is a non-profit membership organization incorporated in United States, with the primary purposes of backing the technical project as a legal entity and helping to manage the trademark and infrastructure assets.[189][35]

It was established on February 8, 2021, with five founding corporate members (Amazon Web Services, Huawei, Google, Microsoft, and Mozilla).[190] The foundation's board is chaired by Shane Miller.[191] Starting in late 2021, its Executive Director

Starting in late 2021, its Executive Director and CEO is Rebecca Rumbul.[192] Prior to this, Ashley Williams was interim executive director.[35]

Governance teams[edit]

The Rust project is composed of teams that are responsible for different subareas of the development. The compiler team develops, manages, and optimizes compiler internals; and the language team designs new language features and helps implement

designs new language features and helps implement them. The Rust project website lists 6 top-level teams as of July 2024[update].[193] Representatives among teams form the Leadership council, which oversees the Rust project as a whole.[194]

See also[edit]
Comparison of programming languages
History of programming languages
List of programming languages
List of programming languages by type
Notes[edit]

List of programming languages by type
Notes[edit]
^ Including build tools, host tools, and standard library support for x86-64, ARM, MIPS, RISC-V, WebAssembly, i686, AArch64, PowerPC, and s390x.[2]

^ Including Windows, Linux, macOS, FreeBSD, NetBSD, and Illumos. Host build tools on Android, iOS, Haiku, Redox, and Fuchsia are not officially shipped; these operating systems are supported as targets.[2]

^ Third-party dependencies, e.g., LLVM or MSVC, are subject to their own licenses.[3][4]

^ On Unix systems, this is often UTF-8 strings without an internal 0 byte. On Windows, this is UTF-16 strings without an internal 0 byte. Unlike these, str and String are always valid UTF-8 and can contain internal zeros.

^ That is, among respondents who have done "extensive development work [with Rust] in over the past year" (13.05%), Rust had the largest percentage who also expressed interest to "work in [Rust] over the next year" (84.66%).[183]
References[edit]

References[edit]
Book sources[edit]
Gjengset, Jon (2021). Rust for Rustaceans (1st ed.). No Starch Press. ISBN 9781718501850. OCLC 1277511986.

Klabnik, Steve; Nichols, Carol (2019-08-12). The Rust Programming Language (Covers Rust 2018). No Starch Press. ISBN 978-1-7185-0044-0.

Blandy, Jim; Orendorff, Jason; Tindall, Leonora F. S. (2021). Programming Rust: Fast, Safe Systems Development (2nd ed.). O'Reilly Media. ISBN 978-1-4920-5254-8. OCLC 1289839504.

McNamara, Tim (2021). Rust in Action. Manning Publications. ISBN 978-1-6172-9455-6. OCLC 1153044639.
Klabnik, Steve; Nichols, Carol (2023). The Rust programming language (2nd ed.). No Starch Press. ISBN 978-1-7185-0310-6. OCLC 1363816350.

Others[edit]
^ "Announcing Rust 1.81.0". 2024-09-05. Retrieved 2024-09-05.
^ a b "Platform Support". The rustc book. Retrieved 2022-06-27.
^ "The Rust Programming Language". The Rust Programming Language. 2022-10-19.

^ "Rust Legal Policies". Rust-lang.org. Archived from the original on 2018-04-04. Retrieved 2018-04-03.

^ "Uniqueness Types". Rust Blog. Retrieved 2016-10-08. Those of you familiar with the Elm style may recognize that the updated --explain messages draw heavy inspiration from the Elm approach.

^ a b "Influences - The Rust Reference". The Rust Reference. Archived from the original on 2023-11-26. Retrieved 2023-12-31.

^ "Uniqueness Types". Idris 1.3.3 documentation. Retrieved 2022-07-14. They are inspired by ... ownership types and borrowed pointers in the Rust programming language.

^ "Microsoft opens up Rust-inspired Project Verona programming language on GitHub". ZDNet. Archived from the original on 2020-01-17. Retrieved 2020-01-17.
^ Jaloyan, Georges-Axel (2017-10-19). "Safe Pointers in SPARK 2014". arXiv:1710.07047 [cs.PL].

^ Lattner, Chris. "Chris Lattner's Homepage". Nondot.org. Archived from the original on 2018-12-25. Retrieved 2019-05-14.
^ "V documentation (Introduction)". GitHub. Retrieved 2023-11-04.

^ Yegulalp, Serdar (2016-08-29). "New challenger joins Rust to topple C language". InfoWorld. Retrieved 2022-10-19.

^ Eshwarla, Prabhu (2020-12-24). Practical System Programming for Rust Developers: Build fast and secure software for Linux/Unix systems with the help of practical examples. Packt Publishing Ltd. ISBN 978-1-80056-201-1.

^ a b Blanco-Cuaresma, Sergi; Bolmont, Emeline (2017-05-30). "What can the programming language Rust do for astrophysics?". Proceedings of the International Astronomical Union. 12 (S325): 341–344. arXiv:1702.02951. Bibcode:2017IAUS..325..341B.

arXiv:1702.02951. Bibcode:2017IAUS..325..341B. doi:10.1017/S1743921316013168. ISSN 1743-9213. S2CID 7857871.

^ Blandy, Orendorff & Tindall 2021.
^ a b c d e Thompson, Clive (2023-02-14). "How Rust went from a side project to the world's most-loved programming language". MIT Technology Review. Retrieved 2023-02-23.

^ a b Avram, Abel (2012-08-03). "Interview on Rust, a Systems Programming Language Developed by Mozilla". InfoQ. Archived from the original on 2013-07-24. Retrieved 2013-08-17.
^ "Rust logo". bugzilla.mozilla.org. Retrieved 2024-02-02.

^ Hoare, Graydon (2012-03-29). "[rust-dev] Rust 0.2 released". mail.mozilla.org. Archived from the original on 2022-11-06. Retrieved 2024-04-04.

^ Hoare, Graydon (2012-07-12). "[rust-dev] Rust 0.3 released". mail.mozilla.org. Archived from the original on 2022-08-24. Retrieved 2022-06-12.

^ Hoare, Graydon (2012-10-15). "[rust-dev] Rust 0.4 released". mail.mozilla.org. Archived from the original on 2021-10-31. Retrieved 2021-10-31.

^ Binstock, Andrew (2014-01-07). "The Rise And Fall of Languages in 2013". Dr. Dobb's Journal. Archived from the original on 2016-08-07. Retrieved 2022-11-20.

^ Lardinois, Frederic (2017-09-29). "It's time to give Firefox another chance". TechCrunch. Retrieved 2023-08-15.

^ Cimpanu, Catalin (2020-08-11). "Mozilla lays off 250 employees while it refocuses on commercial products". ZDNet. Archived from the original on 2022-03-18. Retrieved 2020-12-02.

^ Cooper, Daniel (2020-08-11). "Mozilla lays off 250 employees due to the pandemic". Engadget. Archived from the original on 2020-12-13. Retrieved 2020-12-02.

^ Tung, Liam. "Programming language Rust: Mozilla job cuts have hit us badly but here's how we'll survive". ZDNet. Archived from the original on 2022-04-21. Retrieved 2022-04-21.

^ "Laying the foundation for Rust's future". Rust Blog. 2020-08-18. Archived from the original on 2020-12-02. Retrieved 2020-12-02.
^ "Hello World!". Rust Foundation. 2020-02-08. Archived from the original on 2022-04-19. Retrieved 2022-06-04.

^ "Mozilla Welcomes the Rust Foundation". Mozilla Blog. 2021-02-09. Archived from the original on 2021-02-08. Retrieved 2021-02-09.

^ Amadeo, Ron (2021-04-07). "Google is now writing low-level Android code in Rust". Ars Technica. Archived from the original on 2021-04-08. Retrieved 2021-04-08.

^ Anderson, Tim (2021-11-23). "Entire Rust moderation team resigns". The Register. Retrieved 2022-08-04.
^ "Governance Update". Inside Rust Blog. Retrieved 2022-10-27.

^ Claburn, Thomas (2023-04-17). "Rust Foundation apologizes for trademark policy confusion". The Register. Retrieved 2023-05-07.

^ Proven, Liam (2019-11-27). "Rebecca Rumbul named new CEO of The Rust Foundation". The Register. Retrieved 2022-07-14. Both are curly bracket languages, with C-like syntax that makes them unintimidating for C programmers.

^ a b c Vigliarolo, Brandon (2021-02-10). "The Rust programming language now has its own independent foundation". TechRepublic. Archived from the original on 2023-03-20. Retrieved 2022-07-14.
^ Klabnik & Nichols 2019, p. 263.

^ Klabnik & Nichols 2019, p. 263.
^ Klabnik & Nichols 2019, pp. 5–6.
^ Klabnik & Nichols 2023, p. 32.
^ Klabnik & Nichols 2023, pp. 32–33.
^ Klabnik & Nichols 2023, pp. 49–50.
^ Klabnik & Nichols 2023, pp. 34–36.

^ Klabnik & Nichols 2023, pp. 34–36.
^ Klabnik & Nichols 2023, pp. 6, 44, 47.
^ Klabnik & Nichols 2023, pp. 50–52.
^ Klabnik & Nichols 2023, p. 56.
^ Klabnik & Nichols 2023, pp. 57–58.
^ Klabnik & Nichols 2023, pp. 54–56.

^ Klabnik & Nichols 2023, pp. 54–56.
^ Klabnik & Nichols 2019, pp. 50–53.
^ Tyson, Matthew (2022-03-03). "Rust programming for Java developers". InfoWorld. Retrieved 2022-07-14.
^ Klabnik & Nichols 2019, pp. 104–109.

^ Klabnik & Nichols 2019, pp. 104–109.
^ Klabnik & Nichols 2019, pp. 24.
^ Klabnik & Nichols 2019, pp. 36–38.
^ Klabnik & Nichols 2023, pp. 36–38.
^ Klabnik & Nichols 2023, p. 502.

^ Klabnik & Nichols 2023, p. 502.
^ "Glossary of Unicode Terms". Unicode Consortium. Retrieved 2024-07-30.
^ Klabnik & Nichols 2019, pp. 38–40.
^ Klabnik & Nichols 2019, p. 83.
^ Klabnik & Nichols 2019, p. 97.
^ Klabnik & Nichols 2019, pp. 98–101.

^ Klabnik & Nichols 2019, pp. 98–101.
^ Klabnik & Nichols 2019, pp. 438–440.
^ a b Klabnik & Nichols 2019, pp. 93.
^ "OsStr in std::ffi – Rust". doc.rust-lang.org. Retrieved 2023-10-02.

^ "OsString in std::ffi – Rust". doc.rust-lang.org. Retrieved 2023-10-02.
^ "Path in std::path – Rust". doc.rust-lang.org. Retrieved 2023-10-02.
^ "PathBuf in std::path – Rust". doc.rust-lang.org. Retrieved 2023-10-02.

^ a b c "std::boxed – Rust". doc.rust-lang.org. Retrieved 2023-06-23.
^ "std::boxed – Rust". doc.rust-lang.org. Retrieved 2023-06-24.
^ "Rc in std::rc – Rust". doc.rust-lang.org. Retrieved 2023-06-24.

^ "Arc in std::sync – Rust". doc.rust-lang.org. Retrieved 2023-06-24.
^ "Cell in std::cell – Rust". doc.rust-lang.org. Retrieved 2023-06-24.
^ "Mutex in std::sync – Rust". doc.rust-lang.org. Retrieved 2023-06-24.

^ "RwLock in std::sync – Rust". doc.rust-lang.org. Retrieved 2023-06-24.
^ "Condvar in std::sync – Rust". doc.rust-lang.org. Retrieved 2023-06-24.
^ "Duration in std::time – Rust". doc.rust-lang.org. Retrieved 2023-06-24.

^ "HashMap in std::collections – Rust". doc.rust-lang.org. Retrieved 2023-06-24.
^ "BTreeMap in std::collections – Rust". doc.rust-lang.org. Retrieved 2023-06-24.
^ McNamara 2021.
^ Klabnik & Nichols 2019, pp. 101–104.

^ Klabnik & Nichols 2019, pp. 101–104.
^ "std::option - Rust". doc.rust-lang.org. Retrieved 2023-11-12.
^ a b Klabnik & Nichols 2019, pp. 418–427.
^ "Casting - Rust By Example". doc.rust-lang.org.
^ Klabnik & Nichols 2019, pp. 59–61.

^ Klabnik & Nichols 2019, pp. 59–61.
^ a b Klabnik & Nichols 2019, pp. 63–68.
^ Klabnik & Nichols 2019, pp. 74–75.

^ a b Balasubramanian, Abhiram; Baranowski, Marek S.; Burtsev, Anton; Panda, Aurojit; Rakamarić, Zvonimir; Ryzhyk, Leonid (2017-05-07). "System Programming in Rust". Proceedings of the 16th Workshop on Hot Topics in Operating Systems. HotOS '17. New

Hot Topics in Operating Systems. HotOS '17. New York, NY, US: Association for Computing Machinery. pp. 156–161. doi:10.1145/3102980.3103006. ISBN 978-1-4503-5068-6. S2CID 24100599. Archived from the original on 2022-06-11. Retrieved 2022-06-01.

^ Klabnik & Nichols 2023, pp. 327–30.
^ Klabnik & Nichols 2019, p. 194.
^ Klabnik & Nichols 2019, pp. 75, 134.
^ Shamrell-Harrington, Nell. "The Rust Borrow Checker – a Deep Dive". InfoQ. Retrieved 2022-06-25.
^ Klabnik & Nichols 2019, pp. 194–195.

^ Klabnik & Nichols 2019, pp. 194–195.
^ Klabnik & Nichols 2023, pp. 208–12.
^ Klabnik & Nichols 2019, pp. 201–203.
^ Klabnik & Nichols 2019, pp. 171–172.
^ Klabnik & Nichols 2019, pp. 171–172, 205.
^ Klabnik & Nichols 2019, pp. 181, 182.

^ Klabnik & Nichols 2019, pp. 181, 182.
^ Gjengset 2021, p. 25.
^ Klabnik & Nichols 2019, pp. 182–184.
^ Klabnik & Nichols 2019, pp. 281–283.

^ Klabnik & Nichols 2019, pp. 281–283.
^ "Using Trait Objects That Allow for Values of Different Types – The Rust Programming Language". doc.rust-lang.org. Retrieved 2022-07-11.
^ Klabnik & Nichols 2019, pp. 441–442.

^ Klabnik & Nichols 2019, pp. 441–442.
^ Klabnik & Nichols 2019, pp. 379–380.
^ Rosenblatt, Seth (2013-04-03). "Samsung joins Mozilla's quest for Rust". CNET. Archived from the original on 2013-04-04. Retrieved 2013-04-05.

^ Brown, Neil (2013-04-17). "A taste of Rust". LWN.net. Archived from the original on 2013-04-26. Retrieved 2013-04-25.
^ "Races – The Rustonomicon". doc.rust-lang.org. Archived from the original on 2017-07-10. Retrieved 2017-07-03.

^ "The Rust Language FAQ". static.rust-lang.org. 2015. Archived from the original on 2015-04-20. Retrieved 2017-04-24.
^ McNamara 2021, p. 139, 376–379, 395.

^ McNamara 2021, p. 139, 376–379, 395.
^ "RAII – Rust By Example". doc.rust-lang.org. Archived from the original on 2019-04-21. Retrieved 2020-11-22.

^ "Abstraction without overhead: traits in Rust". Rust Blog. Archived from the original on 2021-09-23. Retrieved 2021-10-19.
^ "Box, stack and heap". Rust By Example. Retrieved 2022-06-13.
^ Klabnik & Nichols 2019, pp. 70–75.

^ Klabnik & Nichols 2019, pp. 70–75.
^ Klabnik & Nichols 2019, p. 323.
^ "Closures - Rust By Example". doc.rust-lang.org.
^ a b "As input parameters - Rust By Example". doc.rust-lang.org.
^ "Lifetimes - Rust By Example". doc.rust-lang.org.

^ "Macros By Example". The Rust Reference. Retrieved 2023-04-21.
^ Klabnik & Nichols 2019, pp. 446–448.
^ "Rust std::println! macro source". GitHub. Retrieved 2024-10-01.

^ "Procedural Macros". The Rust Programming Language Reference. Archived from the original on 2020-11-07. Retrieved 2021-03-23.
^ Klabnik & Nichols 2019, pp. 449–455.
^ "Dioxus rsx! macro source". GitHub. Retrieved 2024-10-01.

^ "Dioxus rsx! macro documentation". Dioxus Labs. Retrieved 2024-10-01.
^ "Serde Derive". Serde Derive documentation. Archived from the original on 2021-04-17. Retrieved 2021-03-23.

^ "extendr_api – Rust". Extendr Api Documentation. Archived from the original on 2021-05-25. Retrieved 2021-03-23.
^ "Variadics". Rust By Example.
^ "2137-variadic". The Rust RFC Book.

^ "2137-variadic". The Rust RFC Book.
^ "Safe Interoperability between Rust and C++ with CXX". InfoQ. 2020-12-06. Archived from the original on 2021-01-22. Retrieved 2021-01-03.

^ "Type layout – The Rust Reference". doc.rust-lang.org. Retrieved 2022-07-15.
^ Blandy, Orendorff & Tindall 2021, pp. 6–8.
^ McNamara 2021, pp. 411–412.
^ "Overview of the compiler". Rust Compiler Development Guide. Retrieved 2023-06-02.

^ "Code Generation - Rust Compiler Development Guide". rustc-dev-guide.rust-lang.org. Retrieved 2024-03-03.
^ "rust-lang/rustc_codegen_gcc". GitHub. The Rust Programming Language. 2024-03-02. Retrieved 2024-03-03.

^ "rust-lang/rustc_codegen_cranelift". GitHub. The Rust Programming Language. 2024-03-02. Retrieved 2024-03-03.
^ Gjengset 2021, p. 213-215.

^ a b c Perkel, Jeffrey M. (2020-12-01). "Why scientists are turning to Rust". Nature. 588 (7836): 185–186. Bibcode:2020Natur.588..185P. doi:10.1038/d41586-020-03382-2. PMID 33262490. S2CID 227251258. Archived from the original on 2022-05-06.

Archived from the original on 2022-05-06. Retrieved 2022-05-15.

^ Simone, Sergio De (2019-04-18). "Rust 1.34 Introduces Alternative Registries for Non-Public Crates". InfoQ. Retrieved 2022-07-14.
^ Klabnik & Nichols 2019, pp. 511–512.
^ Clippy, The Rust Programming Language, 2023-11-30, retrieved 2023-11-30

^ "Clippy Lints". The Rust Programming Language. Retrieved 2023-11-30.
^ Klabnik & Nichols 2019, Appendix G – How Rust is Made and "Nightly Rust"
^ Blandy, Orendorff & Tindall 2021, pp. 176–177.
^ Klabnik & Nichols 2023, p. 623.

^ Klabnik & Nichols 2023, p. 623.
^ McNamara 2021, p. 11.

^ Popescu, Natalie; Xu, Ziyang; Apostolakis, Sotiris; August, David I.; Levy, Amit (2021-10-15). "Safer at any speed: automatic context-aware safety enhancement for Rust". Proceedings of the ACM on Programming Languages. 5 (OOPSLA). Section 2.

on Programming Languages. 5 (OOPSLA). Section 2. doi:10.1145/3485480. S2CID 238212612. p. 5: We observe a large variance in the overheads of checked indexing: 23.6% of benchmarks do report significant performance hits from checked indexing, but

performance hits from checked indexing, but 64.5% report little-to-no impact and, surprisingly, 11.8% report improved performance ... Ultimately, while unchecked indexing can improve performance, most of the time it does not.

^ Anderson, Tim. "Can Rust save the planet? Why, and why not". The Register. Retrieved 2022-07-11.
^ Yegulalp, Serdar (2021-10-06). "What is the Rust language? Safe, fast, and easy software development". InfoWorld. Retrieved 2022-06-25.

^ a b Astrauskas, Vytautas; Matheja, Christoph; Poli, Federico; Müller, Peter; Summers, Alexander J. (2020-11-13). "How do programmers use unsafe rust?". Proceedings of the ACM on Programming Languages. 4 (OOPSLA): 1–27. doi:10.1145/3428204.

Languages. 4 (OOPSLA): 1–27. doi:10.1145/3428204. hdl:20.500.11850/465785. ISSN 2475-1421.

^ McNamara 2021, p. 19, 27.

^ Couprie, Geoffroy (2015). "Nom, A Byte oriented, streaming, Zero copy, Parser Combinators Library in Rust". 2015 IEEE Security and Privacy Workshops. pp. 142–148. doi:10.1109/SPW.2015.31. ISBN 978-1-4799-9933-0. S2CID 16608844.

^ McNamara 2021, p. 20.
^ "Code generation – The Rust Reference". doc.rust-lang.org. Retrieved 2022-10-09.
^ "How Fast Is Rust?". The Rust Programming Language FAQ. Archived from the original on 2020-10-28. Retrieved 2019-04-11.

^ Farshin, Alireza; Barbette, Tom; Roozbeh, Amir; Maguire Jr, Gerald Q.; Kostić, Dejan (2021). "PacketMill: Toward per-Core 100-GBPS networking". Proceedings of the 26th ACM International Conference on Architectural Support for Programming Languages

Architectural Support for Programming Languages and Operating Systems. pp. 1–17. doi:10.1145/3445814.3446724. ISBN 9781450383172. S2CID 231949599. Retrieved 2022-07-12. ... While some compilers (e.g., Rust) support structure reordering [82], C & C++

Rust) support structure reordering [82], C & C++ compilers are forbidden to reorder data structures (e.g., struct or class) [74] ...

^ "Type layout". The Rust Reference. Retrieved 2022-07-14.

^ Lardinois, Frederic (2015-04-03). "Mozilla And Samsung Team Up To Develop Servo, Mozilla's Next-Gen Browser Engine For Multicore Processors". TechCrunch. Archived from the original on 2016-09-10. Retrieved 2017-06-25.

^ Keizer, Gregg (2016-10-31). "Mozilla plans to rejuvenate Firefox in 2017". Computerworld. Retrieved 2023-05-13.
^ Claburn, Thomas (2023-01-12). "Google polishes Chromium code with a layer of Rust". The Register. Retrieved 2024-07-17.

^ "Supporting the Use of Rust in the Chromium Project". Google Online Security Blog. Retrieved 2023-11-12.
^ Shankland, Stephen (2016-07-12). "Firefox will get overhaul in bid to get you interested again". CNET. Retrieved 2022-07-14.

^ Security Research Team (2013-10-04). "ZeroMQ: Helping us Block Malicious Domains in Real Time". Cisco Umbrella. Archived from the original on 2023-05-13. Retrieved 2023-05-13.

^ Cimpanu, Catalin (2019-10-15). "AWS to sponsor Rust project". ZDNET. Retrieved 2024-07-17.

^ Nichols, Shaun (2018-06-27). "Microsoft's next trick? Kicking things out of the cloud to Azure IoT Edge". The Register. Archived from the original on 2019-09-27. Retrieved 2019-09-27.

^ Tung, Liam. "Microsoft: Why we used programming language Rust over Go for WebAssembly on Kubernetes app". ZDNet. Archived from the original on 2022-04-21. Retrieved 2022-04-21.

^ Claburn, Thomas (2022-09-20). "In Rust We Trust: Microsoft Azure CTO shuns C and C++". The Register. Retrieved 2024-07-07.
^ Simone, Sergio De. "NPM Adopted Rust to Remove Performance Bottlenecks". InfoQ. Retrieved 2023-11-20.

^ Lyu, Shing (2020), Lyu, Shing (ed.), "Welcome to the World of Rust", Practical Rust Projects: Building Game, Physical Computing, and Machine Learning Applications, Berkeley, CA: Apress, pp. 1–8, doi:10.1007/978-1-4842-5599-5_1,

Apress, pp. 1–8, doi:10.1007/978-1-4842-5599-5_1, ISBN 978-1-4842-5599-5, retrieved 2023-11-29

^ Lyu, Shing (2021), Lyu, Shing (ed.), "Rust in the Web World", Practical Rust Web Projects: Building Cloud and Web-Based Applications, Berkeley, CA: Apress, pp. 1–7, doi:10.1007/978-1-4842-6589-5_1, ISBN 978-1-4842-6589-5, retrieved 2023-11-29

^ Amadeo, Ron (2021-04-07). "Google is now writing low-level Android code in Rust". Ars Technica. Archived from the original on 2021-04-08. Retrieved 2022-04-21.

^ Darkcrizt. "Google Develops New Bluetooth Stack for Android, Written in Rust". Desde Linux. Archived from the original on 2021-08-25. Retrieved 2024-08-31.

^ Anderson, Tim (2021-12-07). "Rusty Linux kernel draws closer with new patch". The Register. Retrieved 2022-07-14.
^ "A first look at Rust in the 6.1 kernel [LWN.net]". lwn.net. Retrieved 2023-11-11.

^ Claburn, Thomas (2023-04-27). "Microsoft is rewriting core Windows libraries in Rust". The Register. Retrieved 2023-05-13.

^ Proven, Liam. "Small but mighty, 9Front's 'Humanbiologics' is here for the truly curious". The Register. Retrieved 2024-03-07.

^ Yegulalp, Serdar. "Rust's Redox OS could show Linux a few new tricks". InfoWorld. Archived from the original on 2016-03-21. Retrieved 2016-03-21.

^ Anderson, Tim (2021-01-14). "Another Rust-y OS: Theseus joins Redox in pursuit of safer, more resilient systems". The Register. Retrieved 2022-07-14.

^ Boos, Kevin; Liyanage, Namitha; Ijaz, Ramla; Zhong, Lin (2020). Theseus: an Experiment in Operating System Structure and State Management. pp. 1–19. ISBN 978-1-939133-19-9.

^ Zhang, HanDong (Alex) (2023-01-31). "2022 Review | The adoption of Rust in Business". Rust Magazine. Retrieved 2023-02-07.

^ Sei, Mark (2018-10-10). "Fedora 29 new features: Startis now officially in Fedora". Marksei, Weekly sysadmin pills. Archived from the original on 2019-04-13. Retrieved 2019-05-13.

^ Proven, Liam (2022-07-12). "Oracle Linux 9 released, with some interesting additions". The Register. Retrieved 2022-07-14.

^ Proven, Liam (2023-02-02). "System76 teases features coming in homegrown Rust-based desktop COSMIC". The Register. Retrieved 2024-07-17.
^ Hu, Vivian (2020-06-12). "Deno Is Ready for Production". InfoQ. Retrieved 2022-07-14.

^ Abrams, Lawrence (2021-02-06). "This Flash Player emulator lets you securely play your old games". BleepingComputer. Retrieved 2021-12-25.

^ Kharif, Olga (2020-10-17). "Ethereum Blockchain Killer Goes By Unassuming Name of Polkadot". Bloomberg L.P. Retrieved 2021-07-14.
^ a b c "Stack Overflow Developer Survey 2023". Stack Overflow. Retrieved 2023-06-25.

^ Claburn, Thomas (2022-06-23). "Linus Torvalds says Rust is coming to the Linux kernel". The Register. Retrieved 2022-07-15.

^ Jung, Ralf; Jourdan, Jacques-Henri; Krebbers, Robbert; Dreyer, Derek (2017-12-27). "RustBelt: securing the foundations of the Rust programming language". Proceedings of the ACM on Programming Languages. 2 (POPL): 1–34. doi:10.1145/3158154.

Languages. 2 (POPL): 1–34. doi:10.1145/3158154. hdl:21.11116/0000-0003-34C6-3. ISSN 2475-1421.

^ Popescu, Natalie; Xu, Ziyang; Apostolakis, Sotiris; August, David I.; Levy, Amit (2021-10-20). "Safer at any speed: automatic context-aware safety enhancement for Rust". Proceedings of the ACM on Programming Languages. 5 (OOPSLA): 1–23.

ACM on Programming Languages. 5 (OOPSLA): 1–23. doi:10.1145/3485480. ISSN 2475-1421.

^ Klabnik & Nichols 2019, p. 4.
^ "Getting Started". rust-lang.org. Archived from the original on 2020-11-01. Retrieved 2020-10-11.

^ Tung, Liam (2021-02-08). "The Rust programming language just took a huge step forwards". ZDNet. Retrieved 2022-07-14.

^ Krill, Paul. "Rust language moves to independent foundation". InfoWorld. Archived from the original on 2021-04-10. Retrieved 2021-04-10.

^ Vaughan-Nichols, Steven J. (2021-04-09). "AWS's Shane Miller to head the newly created Rust Foundation". ZDNet. Archived from the original on 2021-04-10. Retrieved 2021-04-10.

^ Vaughan-Nichols, Steven J. (2021-11-17). "Rust Foundation appoints Rebecca Rumbul as executive director". ZDNet. Archived from the original on 2021-11-18. Retrieved 2021-11-18.

^ "Governance". The Rust Programming Language. Archived from the original on 2022-05-10. Retrieved 2024-07-18.
^ "Introducing the Rust Leadership Council". Rust Blog. Retrieved 2024-01-12.
External links[edit]
Rust  at Wikipedia's sister projects

Rust  at Wikipedia's sister projects
Media from CommonsResources from WikiversityData from Wikidata
Official website
vteProgramming languages
Comparison
Timeline
History
Ada
ALGOL
Simula
APL
Assembly
BASIC
Visual Basic
classic
.NET
C
C++
C#
COBOL

BASIC
Visual Basic
classic
.NET
C
C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Julia
Kotlin
Lisp
Lua
MATLAB
ML
Pascal
Object Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Scratch
Shell
Smalltalk
Swift
more...
Lists: Alphabetical

Shell
Smalltalk
Swift
more...
Lists: Alphabetical
Categorical
Generational
Non-English-based
Category
vteMozillaProjectsMozillaLabs
Bugzilla
ChatZilla
Jetpack
Lightning
Persona
Prism
Raindrop
Skywriter
Sunbird
PDF.js
Ubiquity
MozillaResearch

Skywriter
Sunbird
PDF.js
Ubiquity
MozillaResearch
Open Media
Rust
Shumway
WebAssembly
WebXR
asm.js
Daala
Firefox OS
OpenFlint
MozillaFoundation
Mozilla Location Service
SeaMonkey
Thunderbird
List of products
Firefox
Firefox Browser

List of products
Firefox
Firefox Browser
Early version history
2
3
3.5
3.6
4
Version history
for Android
Focus
Firefox Lockwise
Firefox Monitor
Sync
Mozilla VPN
Pocket
Origins
Mozilla Application Suite
Netscape Navigator
Netscape Communicator

Netscape Navigator
Netscape Communicator
Netscape Communications
Beonex Communicator
Frameworks
Add-on
Gecko
Necko
NPAPI
Components
Composer
NSPR
NSS
Rhino
SpiderMonkey
Tamarin
Features
Typefaces
Fira
Zilla Slab
Discontinued
Calendar Project
Camino

Zilla Slab
Discontinued
Calendar Project
Camino
Firefox Send
Minimo
XUL
XBL
XPCOM
XPInstall
XULRunner
Forks
Basilisk
Classilla
Flock
Goanna
IceCat
LibreWolf
Miro
Netscape 9
Pale Moon
Portable Edition
Swiftfox
Swiftweasel
Waterfox
xB Browser

Swiftfox
Swiftweasel
Waterfox
xB Browser
Discontinued projects are in italics. Some projects abandoned by Mozilla that are still maintained by third parties are in underline.OrganizationFoundation
Mozilla Foundation
Mozilla Corporation

Mozilla Foundation
Mozilla Corporation
Mozilla Messaging
Official affiliates
Mozilla China
Mozilla Europe (defunct)
Mozilla Japan
People
Mitchell Baker
David Baron
Tantek Çelik
Laura Chambers
Brendan Eich
John Hammink
Johnny Stenbäck
Doug Turner

John Hammink
Johnny Stenbäck
Doug Turner
Community
mozdev.org
MDN Web Docs
MozillaZine
Other topics
Mozilla Manifesto
The Book of Mozilla
Code Rush
Mozilla Public License
Mascot
Debian–Mozilla trademark dispute
Common Voice

Debian–Mozilla trademark dispute
Common Voice
Portal: Computer programming
Authority control databases: National GermanyUnited StatesIsrael
Retrieved from "https://en.wikipedia.org/w/index.php?title=Rust_(programming_language)&oldid=1250318493"

Categories: Rust (programming language)Concurrent programming languagesFree compilers and interpretersFree software projectsFunctional languagesHigh-level programming languagesMozillaMulti-paradigm programming languagesPattern matching programming

programming languagesPattern matching programming languagesProcedural programming languagesProgramming languages created in 2015Software using the Apache licenseSoftware using the MIT licenseStatically typed programming languagesSystems programming

typed programming languagesSystems programming languagesHidden categories: Articles with short descriptionShort description is different from WikidataGood articlesUse American English from July 2022All Wikipedia articles written in American

2022All Wikipedia articles written in American EnglishUse mdy dates from July 2022All articles lacking reliable referencesArticles lacking reliable references from March 2024Articles with excerptsArticles containing potentially dated statements from

containing potentially dated statements from 2024All articles containing potentially dated statementsArticles containing potentially dated statements from July 2024Pages using Sister project links with hidden wikidataArticles with example Rust code

This page was last edited on 9 October 2024, at 18:22 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License;

additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policy
About Wikipedia
Disclaimers

Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view

Ruby (programming language) - Wikipedia
Jump to content
Main menu
Main menu
move to sidebar
hide
Navigation
Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us
Contribute
HelpLearn to editCommunity portalRecent changesUpload file

Search
Search
Donate
Appearance
Create account
Log in
Personal tools
Create account Log in
Pages for logged out editors learn more
ContributionsTalk
Contents
move to sidebar
hide
(Top)
1
History
Toggle History subsection
1.1
Early concept
1.2

Toggle History subsection
1.1
Early concept
1.2
Early releases
1.3
Ruby 1.8 and 1.9
1.4
Ruby 2
1.5
Ruby 3
2
Semantics and philosophy
3
Features
4
Syntax
5
Implementations
Toggle Implementations subsection
5.1
Matz's Ruby interpreter
5.2

5.1
Matz's Ruby interpreter
5.2
Alternative implementations
5.3
Platform support
6
Repositories and libraries
7
See also
8
References
9
Further reading
10
External links
Toggle the table of contents
Ruby (programming language)
74 languages

العربيةAragonésAsturianuAzərbaycancaتۆرکجهবাংলাБеларускаяБългарскиBosanskiCatalàČeštinaDanskDeutschEestiΕλληνικάEspañolEsperantoEuskaraفارسیFrançaisGalego한국어HausaՀայերենHrvatskiIdoBahasa

IndonesiaInterlinguaItalianoעבריתქართულიKiswahiliКыргызчаLatviešuLietuviųLombardMagyarമലയാളംमराठीBahasa Melayuမြန်မာဘာသာNederlands日本語Norsk bokmålNorsk nynorskଓଡ଼ିଆOʻzbekcha / ўзбекчаਪੰਜਾਬੀپنجابیPolskiPortuguêsRomânăРусскийShqipSimple

EnglishSlovenčinaکوردیСрпски / srpskiSrpskohrvatski / српскохрватскиSuomiSvenskaதமிழ்Татарча / tatarçaతెలుగుไทยТоҷикӣTürkçeУкраїнськаاردوTiếng Việt吴语粵語Žemaitėška中文

Edit links
ArticleTalk
English
ReadEditView history
Tools
Tools
move to sidebar
hide
Actions
ReadEditView history
General

hide
Actions
ReadEditView history
General
What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata item
Print/export
Download as PDFPrintable version

Print/export
Download as PDFPrintable version
In other projects
Wikimedia CommonsWikibooksWikiquoteWikiversity
Appearance
move to sidebar
hide
From Wikipedia, the free encyclopedia
General-purpose programming language

General-purpose programming language
Not to be confused with Ruby on Rails.

This article's lead section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (June 2022) (Learn how and when to remove this message)

RubyParadigmMulti-paradigm: functional, imperative, object-oriented, reflectiveDesigned byYukihiro MatsumotoDeveloperYukihiro Matsumoto, et al.First appeared1995; 29 years ago (1995)Stable release3.3.5 [1]

/    3 September 2024; 39 days ago (3 September 2024)

Typing disciplineDuck, dynamic, strongScopeLexical, sometimes dynamicImplementation languageCOSCross-platformLicenseRuby LicenseFilename extensions.rb, .ruWebsiteruby-lang.orgMajor implementationsRuby MRI, TruffleRuby, YARV, Rubinius, JRuby,

MRI, TruffleRuby, YARV, Rubinius, JRuby, RubyMotion, mrubyInfluenced byAda,[2] Basic,[3] C++,[2] CLU,[4] Dylan,[4]Eiffel,[2] Lisp,[4] Lua, Perl,[4] Python,[4] Smalltalk[4]InfluencedClojure, CoffeeScript, Crystal, D, Elixir, Groovy, Julia,[5] Mirah,

Crystal, D, Elixir, Groovy, Julia,[5] Mirah, Nu,[6] Ring,[7] Rust,[8] Swift[9]

Ruby Programming at Wikibooks

Ruby is an interpreted, high-level, general-purpose programming language. It was designed with an emphasis on programming productivity and simplicity. In Ruby, everything is an object, including primitive data types. It was developed in the

primitive data types. It was developed in the mid-1990s by Yukihiro "Matz" Matsumoto in Japan.

Ruby is dynamically typed and uses garbage collection and just-in-time compilation. It supports multiple programming paradigms, including procedural, object-oriented, and functional programming. According to the creator, Ruby was influenced by Perl,

to the creator, Ruby was influenced by Perl, Smalltalk, Eiffel, Ada, BASIC, Java, and Lisp.[10][3]

History[edit]
Main article: History of Ruby
Early concept[edit]
Matsumoto has said that Ruby was conceived in 1993. In a 1999 post to the ruby-talk mailing list, he describes some of his early ideas about the language:

I was talking with my colleague about the possibility of an object-oriented scripting language. I knew Perl (Perl4, not Perl5), but I didn't like it really, because it had the smell of a toy language (it still has). The object-oriented language

(it still has). The object-oriented language seemed very promising. I knew Python then. But I didn't like it, because I didn't think it was a true object-oriented language –  OO features appeared to be add-on to the language. As a language maniac

be add-on to the language. As a language maniac and OO fan for 15 years, I really wanted a genuine object-oriented, easy-to-use scripting language. I looked for but couldn't find one. So I decided to make it.

Matsumoto describes the design of Ruby as being like a simple Lisp language at its core, with an object system like that of Smalltalk, blocks inspired by higher-order functions, and practical utility like that of Perl.[11]

The name "Ruby" originated during an online chat session between Matsumoto and Keiju Ishitsuka on February 24, 1993, before any code had been written for the language.[12] Initially two names were proposed: "Coral" and "Ruby". Matsumoto chose the

proposed: "Coral" and "Ruby". Matsumoto chose the latter in a later e-mail to Ishitsuka.[13] Matsumoto later noted a factor in choosing the name "Ruby"–it was the birthstone of one of his colleagues.[14][15]

Early releases[edit]

The first public release of Ruby 0.95 was announced on Japanese domestic newsgroups on December 21, 1995.[16][17] Subsequently, three more versions of Ruby were released in two days.[12] The release coincided with the launch of the Japanese-language

with the launch of the Japanese-language ruby-list mailing list, which was the first mailing list for the new language.

Already present at this stage of development were many of the features familiar in later releases of Ruby, including object-oriented design, classes with inheritance, mixins, iterators, closures, exception handling and garbage collection.[18]

After the release of Ruby 0.95 in 1995, several stable versions of Ruby were released in these years:
Ruby 1.0: December 25, 1996[12]
Ruby 1.2: December 1998
Ruby 1.4: August 1999
Ruby 1.6: September 2000

Ruby 1.4: August 1999
Ruby 1.6: September 2000
In 1997, the first article about Ruby was published on the Web. In the same year, Matsumoto was hired by netlab.jp to work on Ruby as a full-time developer.[12]

In 1998, the Ruby Application Archive was launched by Matsumoto, along with a simple English-language homepage for Ruby.[12]

In 1999, the first English language mailing list ruby-talk began, which signaled a growing interest in the language outside Japan.[19] In this same year, Matsumoto and Keiju Ishitsuka wrote the first book on Ruby, The Object-oriented Scripting

first book on Ruby, The Object-oriented Scripting Language Ruby (オブジェクト指向スクリプト言語 Ruby), which was published in Japan in October 1999. It would be followed in the early 2000s by around 20 books on Ruby published in Japanese.[12]

By 2000, Ruby was more popular than Python in Japan.[20] In September 2000, the first English language book Programming Ruby was printed, which was later freely released to the public, further widening the adoption of Ruby amongst English speakers.

the adoption of Ruby amongst English speakers. In early 2002, the English-language ruby-talk mailing list was receiving more messages than the Japanese-language ruby-list, demonstrating Ruby's increasing popularity in the non-Japanese speaking

popularity in the non-Japanese speaking world.

Ruby 1.8 and 1.9[edit]
Ruby 1.8 was initially released August 2003, was stable for a long time, and was retired June 2013.[21] Although deprecated, there is still code based on it. Ruby 1.8 is only partially compatible with Ruby 1.9.

Ruby 1.8 has been the subject of several industry standards. The language specifications for Ruby were developed by the Open Standards Promotion Center of the Information-Technology Promotion Agency (a Japanese government agency) for submission to

(a Japanese government agency) for submission to the Japanese Industrial Standards Committee (JISC) and then to the International Organization for Standardization (ISO). It was accepted as a Japanese Industrial Standard (JIS X 3017) in 2011[22] and

Industrial Standard (JIS X 3017) in 2011[22] and an international standard (ISO/IEC 30170) in 2012.[23][24]

Ruby on Rails logo
Around 2005, interest in the Ruby language surged in tandem with Ruby on Rails, a web framework written in Ruby. Rails is frequently credited with increasing awareness of Ruby.[25]

Effective with Ruby 1.9.3, released October 31, 2011,[26] Ruby switched from being dual-licensed under the Ruby License and the GPL to being dual-licensed under the Ruby License and the two-clause BSD license.[27] Adoption of 1.9 was slowed by

BSD license.[27] Adoption of 1.9 was slowed by changes from 1.8 that required many popular third party gems to be rewritten. Ruby 1.9 introduces many significant changes over the 1.8 series. Examples include:[28]

block local variables (variables that are local to the block in which they are declared)
an additional lambda syntax: f = ->(a,b) { puts a + b }

an additional Hash literal syntax using colons for symbol keys: {symbol_key: "value"} == {:symbol_key => "value"}
per-string character encodings are supported
new socket API [IPv6 support]
require_relative import security
Ruby 2[edit]

Ruby 2[edit]
Ruby 2.0 was intended to be fully backward compatible with Ruby 1.9.3. As of the official 2.0.0 release on February 24, 2013, there were only five known (minor) incompatibilities.[29] Ruby 2.0 added several new features, including:

Method keyword arguments
A new method, Module#prepend, to extend a class
A new literal to create an array of symbols
New API for lazy evaluation of Enumerables
A new convention of using #to_h to convert objects to Hashes[30]

Starting with 2.1.0, Ruby's versioning policy changed to be more similar to semantic versioning.[31]

Ruby 2.2.0 includes speed-ups, bugfixes, and library updates and removes some deprecated APIs. Most notably, Ruby 2.2.0 introduces changes to memory handling – an incremental garbage collector, support for garbage collection of symbols and the

support for garbage collection of symbols and the option to compile directly against jemalloc. It also contains experimental support for using vfork(2) with system() and spawn(), and added support for the Unicode 7.0 specification. Since version

for the Unicode 7.0 specification. Since version 2.2.1,[32] Ruby MRI performance on PowerPC64 was improved.[33][34][35] Features that were made obsolete or removed include callcc, the DL library, Digest::HMAC, lib/rational.rb, lib/complex.rb,

Digest::HMAC, lib/rational.rb, lib/complex.rb, GServer, Logger::Application as well as various C API functions.[36]

Ruby 2.3.0 includes many performance improvements, updates, and bugfixes including changes to Proc#call, Socket and IO use of exception keywords, Thread#name handling, default passive Net::FTP connections, and Rake being removed from stdlib.[37]

and Rake being removed from stdlib.[37] Other notable changes include:

The ability to mark all string literals as frozen by default with a consequently large performance increase in string operations.[38]
Hash comparison to allow direct checking of key/value pairs instead of just keys.

A new safe navigation operator &. that can ease nil handling (e.g. instead of if obj && obj.foo && obj.foo.bar, we can use if obj&.foo&.bar).

The did_you_mean gem is now bundled by default and required on startup to automatically suggest similar name matches on a NameError or NoMethodError.

Hash#dig and Array#dig to easily extract deeply nested values (e.g. given profile = { social: { wikipedia: { name: 'Foo Baz' } } }, the value Foo Baz can now be retrieved by profile.dig(:social, :wikipedia, :name)).

.grep_v(regexp) which will match all negative examples of a given regular expression in addition to other new features.

Ruby 2.4.0 includes performance improvements to hash table, Array#max, Array#min, and instance variable access.[39] Other notable changes include:
Binding#irb: Start a REPL session similar to binding.pry
Unify Fixnum and Bignum into Integer class

Unify Fixnum and Bignum into Integer class
String supports Unicode case mappings, not just ASCII
A new method, Regexp#match?, which is a faster Boolean version of Regexp#match

Thread deadlock detection now shows threads with their backtrace and dependency

A few notable changes in Ruby 2.5.0 include rescue and ensure statements automatically use a surrounding do-end block (less need for extra begin-end blocks), method-chaining with yield_self, support for branch coverage and method coverage

support for branch coverage and method coverage measurement, and easier Hash transformations with Hash#slice and Hash#transform_keys On top of that come a lot of performance improvements like faster block passing (3 times faster), faster Mutexes,

block passing (3 times faster), faster Mutexes, faster ERB templates and improvements on some concatenation methods.

A few notable changes in Ruby 2.6.0 include an experimental just-in-time compiler (JIT), and RubyVM::AbstractSyntaxTree (experimental).

A few notable changes in Ruby 2.7.0 include pattern Matching (experimental), REPL improvements, a compaction GC, and separation of positional and keyword arguments.
Ruby 3[edit]

Ruby 3.0.0 was released on Christmas Day in 2020.[40] It is known as Ruby 3x3 which means that programs would run three times faster in Ruby 3.0 comparing to Ruby 2.0.[41] and some had already implemented in intermediate releases on the road from 2

in intermediate releases on the road from 2 to 3. To achieve 3x3, Ruby 3 comes with MJIT, and later YJIT, Just-In-Time Compilers, to make programs faster, although they are described as experimental and remain disabled by default (enabled by flags

and remain disabled by default (enabled by flags at runtime).

Another goal of Ruby 3.0 is to improve concurrency and two more utilities Fibre Scheduler, and experimental Ractor facilitate the goal.[40] Ractor is light-weight and thread-safe as it is achieved by exchanging messages rather than shared objects.

Ruby 3.0 introduces RBS language to describe the types of Ruby programs for static analysis.[40] It is separated from general Ruby programs.
There are some syntax enhancements and library changes in Ruby 3.0 as well.[40]

Ruby 3.1 was released on December 25, 2021.[42] It includes YJIT, a new, experimental, Just-In-Time Compiler developed by Shopify, to enhance the performance of real world business applications. A new debugger is also included. There are some syntax

debugger is also included. There are some syntax enhancements and other improvements in this release. Network libraries for FTP, SMTP, IMAP, and POP are moved from default gems to bundled gems.[43]

Ruby 3.2 was released on December 25, 2022.[44] It brings support for being run inside of a WebAssembly environment via a WASI interface. Regular expressions also receives some improvements, including a faster, memoized matching algorithm to protect

a faster, memoized matching algorithm to protect against certain ReDoS attacks, and configurable timeouts for regular expression matching. Additional debugging and syntax features are also included in this release, which include syntax suggestion,

in this release, which include syntax suggestion, as well as error highlighting. The MJIT compiler has been re-implemented as a standard library module, while the YJIT, a Rust-based JIT compiler now supports more architectures on Linux.

Ruby 3.3 was released on December 25, 2023.[1] Ruby 3.3 introduces significant enhancements and performance improvements to the language. Key features include the introduction of the Prism parser for portable and maintainable parsing, the addition

portable and maintainable parsing, the addition of the pure-Ruby JIT compiler RJIT, and major performance boosts in the YJIT compiler. Additionally, improvements in memory usage, the introduction of an M:N thread scheduler, and updates to the

of an M:N thread scheduler, and updates to the standard library contribute to a more efficient and developer-friendly Ruby ecosystem.

Semantics and philosophy[edit]
Yukihiro Matsumoto, the creator of Ruby

Matsumoto has said that Ruby is designed for programmer productivity and fun, following the principles of good user interface design.[45] At a Google Tech Talk in 2008 he said, "I hope to see Ruby help every programmer in the world to be productive,

every programmer in the world to be productive, and to enjoy programming, and to be happy. That is the primary purpose of Ruby language."[46] He stresses that systems design needs to emphasize human, rather than computer, needs:[47]

Often people, especially computer engineers, focus on the machines. They think, "By doing this, the machine will run fast. By doing this, the machine will run more effectively. By doing this, the machine will something something something." They are

will something something something." They are focusing on machines. But in fact we need to focus on humans, on how humans care about doing programming or operating the application of the machines. We are the masters. They are the slaves.

Matsumoto has said his primary design goal was to make a language that he himself enjoyed using, by minimizing programmer work and possible confusion. He has said that he had not applied the principle of least astonishment (POLA) to the design of

of least astonishment (POLA) to the design of Ruby;[47] in a May 2005 discussion on the newsgroup comp.lang.ruby, Matsumoto attempted to distance Ruby from POLA, explaining that because any design choice will be surprising to someone, he uses a

choice will be surprising to someone, he uses a personal standard in evaluating surprise. If that personal standard remains consistent, there would be few surprises for those familiar with the standard.[48]

Matsumoto defined it this way in an interview:[47]

Everyone has an individual background. Someone may come from Python, someone else may come from Perl, and they may be surprised by different aspects of the language. Then they come up to me and say, 'I was surprised by this feature of the language,

'I was surprised by this feature of the language, so Ruby violates the principle of least surprise.' Wait. Wait. The principle of least surprise is not for you only. The principle of least surprise means principle of least my surprise. And it means

principle of least my surprise. And it means the principle of least surprise after you learn Ruby very well. For example, I was a C++ programmer before I started designing Ruby. I programmed in C++ exclusively for two or three years. And after two

exclusively for two or three years. And after two years of C++ programming, it still surprises me.

Ruby is object-oriented: every value is an object, including classes and instances of types that many other languages designate as primitives (such as integers, Booleans, and "null"). Because everything in Ruby is an object, everything in Ruby has

in Ruby is an object, everything in Ruby has certain built-in abilities called methods. Every function is a method and methods are always called on an object. Methods defined at the top level scope become methods of the Object class. Since this

become methods of the Object class. Since this class is an ancestor of every other class, such methods can be called on any object. They are also visible in all scopes, effectively serving as "global" procedures. Ruby supports inheritance with

procedures. Ruby supports inheritance with dynamic dispatch, mixins and singleton methods (belonging to, and defined for, a single instance rather than being defined on the class). Though Ruby does not support multiple inheritance, classes can

not support multiple inheritance, classes can import modules as mixins.

Ruby has been described as a multi-paradigm programming language: it allows procedural programming (defining functions/variables outside classes makes them part of the root, 'self' Object), with object orientation (everything is an object) or

object orientation (everything is an object) or functional programming (it has anonymous functions, closures, and continuations; statements all have values, and functions return the last evaluation). It has support for introspection, reflective

It has support for introspection, reflective programming, metaprogramming, and interpreter-based threads. Ruby features dynamic typing, and supports parametric polymorphism.

According to the Ruby FAQ, the syntax is similar to Perl's and the semantics are similar to Smalltalk's, but the design philosophy differs greatly from Python's.[49]
Features[edit]

Features[edit]
Thoroughly object-oriented with inheritance, mixins and metaclasses[50]
Dynamic typing and duck typing
Everything is an expression (even statements) and everything is executed imperatively (even declarations)

Succinct and flexible syntax[51] that minimizes syntactic noise and serves as a foundation for domain-specific languages[52]
Dynamic reflection and alteration of objects to facilitate metaprogramming[53]

Lexical closures, iterators and generators, with a block syntax[54]
Literal notation for arrays, hashes, regular expressions and symbols
Embedding code in strings (interpolation)
Default arguments

Default arguments
Four levels of variable scope (global, class, instance, and local) denoted by sigils or the lack thereof
Garbage collection
First-class continuations
Strict Boolean coercion rules (everything is true except false and nil)

Exception handling
Operator overloading[55]
Built-in support for rational numbers, complex numbers and arbitrary-precision arithmetic
Custom dispatch behavior (through method_missing and const_missing)

Native threads and cooperative fibers (fibers are a 1.9/YARV feature)
Support for Unicode and multiple character encodings.
Native plug-in API in C

Native plug-in API in C
Interactive Ruby Shell, an interactive command-line interpreter that can be used to test code quickly (REPL)
Centralized package management through RubyGems
Implemented on all major platforms

Implemented on all major platforms
Large standard library, including modules for YAML, JSON, XML, CGI, OpenSSL, HTTP, FTP, RSS, curses, zlib and Tk[56]
Just-in-time compilation
Syntax[edit]
Main article: Ruby syntax

The syntax of Ruby is broadly similar to that of Perl and Python. Class and method definitions are signaled by keywords, whereas code blocks can be defined by either keywords or braces. In contrast to Perl, variables are not obligatorily prefixed

to Perl, variables are not obligatorily prefixed with a sigil. When used, the sigil changes the semantics of scope of the variable. For practical purposes there is no distinction between expressions and statements.[57][58] Line breaks are

and statements.[57][58] Line breaks are significant and taken as the end of a statement; a semicolon may be equivalently used. Unlike Python, indentation is not significant.

One of the differences from Python and Perl is that Ruby keeps all of its instance variables completely private to the class and only exposes them through accessor methods (attr_writer, attr_reader, etc.). Unlike the "getter" and "setter" methods of

Unlike the "getter" and "setter" methods of other languages like C++ or Java, accessor methods in Ruby can be created with a single line of code via metaprogramming; however, accessor methods can also be created in the traditional fashion of C++ and

be created in the traditional fashion of C++ and Java. As invocation of these methods does not require the use of parentheses, it is trivial to change an instance variable into a full function, without modifying a single line of calling code or

modifying a single line of calling code or having to do any refactoring achieving similar functionality to C# and VB.NET property members.

Python's property descriptors are similar, but come with a trade-off in the development process. If one begins in Python by using a publicly exposed instance variable, and later changes the implementation to use a private instance variable exposed

to use a private instance variable exposed through a property descriptor, code internal to the class may need to be adjusted to use the private variable rather than the public property. Ruby's design forces all instance variables to be private, but

forces all instance variables to be private, but also provides a simple way to declare set and get methods. This is in keeping with the idea that in Ruby, one never directly accesses the internal members of a class from outside the class; rather,

of a class from outside the class; rather, one passes a message to the class and receives a response.

Implementations[edit]
See also: Ruby MRI § Operating systems, and List of Ruby compilers
Matz's Ruby interpreter[edit]

Matz's Ruby interpreter[edit]
The original Ruby interpreter is often referred to as Matz's Ruby Interpreter or MRI. This implementation is written in C and uses its own Ruby-specific virtual machine.

The standardized and retired Ruby 1.8 implementation was written in C, as a single-pass interpreted language.[21]

Starting with Ruby 1.9, and continuing with Ruby 2.x and above, the official Ruby interpreter has been YARV ("Yet Another Ruby VM"), and this implementation has superseded the slower virtual machine used in previous releases of MRI.

Alternative implementations[edit]

As of 2018[update], there are a number of alternative implementations of Ruby, including JRuby, Rubinius, and mruby. Each takes a different approach, with JRuby and Rubinius providing just-in-time compilation and mruby also providing ahead-of-time

and mruby also providing ahead-of-time compilation.

Ruby has three major alternative implementations:
JRuby, a mixed Java and Ruby implementation that runs on the Java virtual machine. JRuby currently targets Ruby 3.1.x.

TruffleRuby, a Java implementation using the Truffle language implementation framework with GraalVM

Rubinius, a C++ bytecode virtual machine that uses LLVM to compile to machine code at runtime. The bytecode compiler and most core classes are written in pure Ruby. Rubinius currently targets Ruby 2.3.1.
Other Ruby implementations include:

Other Ruby implementations include:
MagLev, a Smalltalk implementation that runs on GemTalk Systems' GemStone/S VM

mruby, an implementation designed to be embedded into C code, in a similar vein to Lua. It is currently being developed by Yukihiro Matsumoto and others

RGSS, or Ruby Game Scripting System, a proprietary implementation that is used by the RPG Maker series of software for game design and modification of the RPG Maker engine

julializer, a transpiler (partial) from Ruby to Julia. It can be used for a large speedup over e.g. Ruby or JRuby implementations (may only be useful for numerical code).[59]
Topaz, a Ruby implementation written in Python

Topaz, a Ruby implementation written in Python
Opal, a web-based interpreter that compiles Ruby to JavaScript
Other now defunct Ruby implementations were:

Other now defunct Ruby implementations were:
MacRuby, a Mac OS X implementation on the Objective-C runtime. Its iOS counterpart is called RubyMotion
IronRuby an implementation on the .NET Framework

IronRuby an implementation on the .NET Framework
Cardinal, an implementation for the Parrot virtual machine
Ruby Enterprise Edition, often shortened to ree, an implementation optimized to handle large-scale Ruby on Rails projects

HotRuby, a JavaScript and ActionScript implementation of the Ruby programming language

The maturity of Ruby implementations tends to be measured by their ability to run the Ruby on Rails (Rails) framework, because it is complex to implement and uses many Ruby-specific features. The point when a particular implementation achieves this

when a particular implementation achieves this goal is called "the Rails singularity". The reference implementation, JRuby, and Rubinius[60] are all able to run Rails unmodified in a production environment.

Platform support[edit]

Matsumoto originally developed Ruby on the 4.3BSD-based Sony NEWS-OS 3.x, but later migrated his work to SunOS 4.x, and finally to Linux.[61][62] By 1999, Ruby was known to work across many different operating systems. Modern Ruby versions and

operating systems. Modern Ruby versions and implementations are available on all major desktop, mobile and server-based operating systems. Ruby is also supported across a number of cloud hosting platforms like Jelastic, Heroku, Google Cloud Platform

like Jelastic, Heroku, Google Cloud Platform and others.

Tools such as RVM and RBEnv, facilitate installation and partitioning of multiple ruby versions, and multiple 'gemsets' on one machine.
Repositories and libraries[edit]

RubyGems is Ruby's package manager. A Ruby package is called a "gem" and can be installed via the command line. Most gems are libraries, though a few exist that are applications, such as IDEs.[63] There are over 100,000 Ruby gems hosted on

There are over 100,000 Ruby gems hosted on RubyGems.org.[64]

Many new and existing Ruby libraries are hosted on GitHub, a service that offers version control repository hosting for Git.

The Ruby Application Archive, which hosted applications, documentation, and libraries for Ruby programming, was maintained until 2013, when its function was transferred to RubyGems.[65]
See also[edit]

See also[edit]
Free and open-source software portalComputer programming portal
Comparison of programming languages
Metasploit
Why's (poignant) Guide to Ruby
Crystal (programming language)
Ruby on Rails
References[edit]

Ruby on Rails
References[edit]
^ a b "Ruby 3.3.0 Released". Archived from the original on 2023-12-25. Retrieved 2023-12-25.

^ a b c Cooper, Peter (2009). Beginning Ruby: From Novice to Professional. Beginning from Novice to Professional (2nd ed.). Berkeley: APress. p. 101. ISBN 978-1-4302-2363-4. To a lesser extent, Python, LISP, Eiffel, Ada, and C++ have also influenced

LISP, Eiffel, Ada, and C++ have also influenced Ruby.

^ a b "Reasons behind Ruby". Ruby Conference 2008. Confreaks (YouTube).

^ a b c d e f Bini, Ola (2007). Practical JRuby on Rails Web 2.0 Projects: Bringing Ruby on Rails to Java. Berkeley: APress. p. 3. ISBN 978-1-59059-881-8. It draws primarily on features from Perl, Smalltalk, Python, Lisp, Dylan, and CLU.

^ "Julia 1.0 Documentation: Introduction". Archived from the original on 16 August 2018. Retrieved 6 October 2018.

^ Burks, Tim. "About Nu™". Programming Nu™. Neon Design Technology, Inc. Archived from the original on 2018-12-25. Retrieved 2011-07-21.

^ Ring Team (3 December 2017). "Ring and other languages". ring-lang.net. ring-lang. Archived from the original on 25 December 2018. Retrieved 3 December 2017.

^ "Influences - The Rust Reference". The Rust Reference. Archived from the original on 2019-01-26. Retrieved 2023-04-18.

^ Lattner, Chris (2014-06-03). "Chris Lattner's Homepage". Chris Lattner. Archived from the original on 2018-12-25. Retrieved 2014-06-03. The Swift language is the product of tireless effort from a team of language experts, documentation gurus,

a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the

Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.

^ "About Ruby". Archived from the original on 9 October 2014. Retrieved 15 February 2020.
^ Matsumoto, Yukihiro (13 February 2006). "Re: Ruby's lisp features". Archived from the original on 2018-10-27. Retrieved 15 February 2020.

^ a b c d e f "History of Ruby". Archived from the original on 2011-07-14. Retrieved 2008-08-14.

^ "[FYI: historic] The decisive moment of the language name Ruby. (Re: [ANN] ruby 1.8.1)" (E-mail from Hiroshi Sugihara to ruby-talk). Archived from the original on 2011-07-17. Retrieved 2008-08-14.

^ "1.3 Why the name 'Ruby'?". The Ruby Language FAQ. Ruby-Doc.org. Archived from the original on May 28, 2012. Retrieved April 10, 2012.

^ Yukihiro Matsumoto (June 11, 1999). "Re: the name of Ruby?". Ruby-Talk (Mailing list). Archived from the original on December 25, 2018. Retrieved April 10, 2012.

^ "More archeolinguistics: unearthing proto-Ruby". Archived from the original on 6 November 2015. Retrieved 2 May 2015.
^ "[ruby-talk:00382] Re: history of ruby". Archived from the original on 16 July 2011. Retrieved 2 May 2015.

^ "[ruby-list:124] TUTORIAL — ruby's features". Archived from the original on 24 May 2003. Retrieved 2 May 2015.
^ "An Interview with the Creator of Ruby". Archived from the original on 2008-02-08. Retrieved 2007-07-11.

^ Yukihiro Matsumoto (October 2000). "Programming Ruby: Forward". Archived from the original on 25 December 2018. Retrieved 5 March 2014.
^ a b "We retire Ruby 1.8.7". Archived from the original on 6 June 2015. Retrieved 2 May 2015.

^ "IPA 独立行政法人 情報処理推進機構：プレス発表 プログラム言語RubyのJIS規格（JIS X 3017）制定について". Archived from the original on 2 February 2015. Retrieved 2 May 2015.

^ "IPA 独立行政法人 情報処理推進機構：プレス発表 プログラム言語Ruby、国際規格として承認". Archived from the original on 1 February 2015. Retrieved 2 May 2015.
^ "ISO/IEC 30170:2012". Archived from the original on 2017-03-12. Retrieved 2017-03-10.

^ Web Development: Ruby on Rails Archived 2009-02-24 at the Wayback Machine. Devarticles.com (2007-03-22). Retrieved on 2013-07-17.

^ "Ruby 1.9.3 p0 is released". ruby-lang.org. October 31, 2011. Archived from the original on January 14, 2013. Retrieved February 20, 2013.

^ "v1_9_3_0/NEWS". Ruby Subversion source repository. ruby-lang.org. September 17, 2011. Archived from the original on November 6, 2015. Retrieved February 20, 2013.

^ Ruby 1.9: What to Expect Archived 2016-03-04 at the Wayback Machine. slideshow.rubyforge.org. Retrieved on 2013-07-17.

^ Endoh, Yusuke. (2013-02-24) Ruby 2.0.0-p0 is released Archived 2013-02-27 at the Wayback Machine. Ruby-lang.org. Retrieved on 2013-07-17.

^ Endoh, Yusuke. (2013-02-24) Ruby 2.0.0-p0 is released Archived 2016-01-17 at the Wayback Machine. Ruby-lang.org. Retrieved on 2013-07-17.

^ "Semantic Versioning starting with Ruby 2.1.0". December 21, 2013. Archived from the original on February 13, 2014. Retrieved December 27, 2013.

^ Gustavo Frederico Temple Pedrosa, Vitor de Lima, Leonardo Bianconi (2015). "Ruby 2.2.1 Released". Archived from the original on 16 May 2016. Retrieved 12 July 2016.{{cite web}}:  CS1 maint: multiple names: authors list (link)

^ Gustavo Frederico Temple Pedrosa, Vitor de Lima, Leonardo Bianconi (2015). "v2.2.1 ChangeLog". Archived from the original on 26 February 2017. Retrieved 12 July 2016.{{cite web}}:  CS1 maint: multiple names: authors list (link)

^ Gustavo Frederico Temple Pedrosa, Vitor de Lima, Leonardo Bianconi (2014). "Specifying non volatile registers for increase performance in ppc64". Archived from the original on 17 September 2016. Retrieved 12 July 2016.{{cite web}}:  CS1 maint:

Retrieved 12 July 2016.{{cite web}}:  CS1 maint: multiple names: authors list (link)

^ Gustavo Frederico Temple Pedrosa, Vitor de Lima, Leonardo Bianconi (2014). "Specifying MACRO for increase performance in ppc64". Archived from the original on 17 September 2016. Retrieved 12 July 2016.{{cite web}}:  CS1 maint: multiple names:

2016.{{cite web}}:  CS1 maint: multiple names: authors list (link)

^ "ruby/NEWS at v2_2_0 · ruby/ruby · GitHub". GitHub. Archived from the original on 1 January 2015. Retrieved 2 May 2015.
^ "Ruby/NEWS at v.2_3_0 - ruby/ruby". GitHub. Archived from the original on 1 March 2017. Retrieved 25 December 2015.

^ "Ruby 2.3.0 changes and features". Running with Ruby. dev.mensfeld.pl. 14 November 2015. Archived from the original on 5 January 2016. Retrieved 27 December 2015.

^ "Ruby 2.4.0 Released". www.ruby-lang.org. Archived from the original on 2017-02-17. Retrieved 2016-12-30.
^ a b c d "Ruby 3.0.0 Released". Ruby Programming Language. 2020-12-25. Archived from the original on 2020-12-25. Retrieved 2020-12-25.

^ Scheffler, Jonan (November 10, 2016). "Ruby 3x3: Matz, Koichi, and Tenderlove on the future of Ruby Performance". Ruby. Archived from the original on May 10, 2019. Retrieved May 18, 2019.

^ "Ruby 3.1.0 Released". ruby-lang.org. Archived from the original on 25 December 2021. Retrieved 25 Dec 2021.
^ "Ruby 3.1.0 Released". Archived from the original on 2021-12-26. Retrieved 2021-12-26.

^ "Ruby 3.2.0 Released". Archived from the original on 2022-12-25. Retrieved 2022-12-25.
^ "The Ruby Programming Language". Archived from the original on 18 January 2020. Retrieved 2 May 2015.
^ Google Tech Talks – Ruby 1.9 on YouTube

^ Google Tech Talks – Ruby 1.9 on YouTube
^ a b c Bill Venners. "The Philosophy of Ruby". Archived from the original on 5 July 2019. Retrieved 2 May 2015.

^ "Welcome to RUBYWEEKLYNEWS.ORG". 4 July 2017. Archived from the original on 4 July 2017.{{cite web}}:  CS1 maint: bot: original URL status unknown (link)

^ "The Ruby Language FAQ: How Does Ruby Stack Up Against...?". Archived from the original on 8 May 2015. Retrieved 2 May 2015.

^ Bruce Stewart (29 November 2001). "An Interview with the Creator of Ruby". O'Reilly Media. Archived from the original on 6 May 2015. Retrieved 2 May 2015.

^ Bill Venners. "Dynamic Productivity with Ruby". Archived from the original on 5 September 2015. Retrieved 2 May 2015.

^ "Language Workbenches: The Killer-App for Domain Specific Languages?". martinfowler.com. Archived from the original on 2 May 2021. Retrieved 2 May 2015.

^ "Ruby – Add class methods at runtime". Archived from the original on 2007-09-22. Retrieved 2007-11-01.
^ Bill Venners. "Blocks and Closures in Ruby". Archived from the original on 18 April 2015. Retrieved 2 May 2015.

^ "Methods". Official Ruby FAQ. Archived from the original on 2022-06-28. Retrieved 2021-06-20.
^ Britt, James. "Ruby 2.0.0 Standard Library Documentation". Archived from the original on 2013-11-13. Retrieved 2013-12-09.

^ "[ruby-talk:01120] Re: The value of while..." Archived from the original on 2011-07-17. Retrieved 2008-12-06. In Ruby's syntax, statement is just a special case of an expression that cannot appear as an argument (e.g. multiple assignment).

^ "[ruby-talk:02460] Re: Precedence question". Archived from the original on 2004-07-22. Retrieved 2008-12-06. statement [...] can not be part of expression unless grouped within parentheses.

^ "remove/virtual_module: Born to make your Ruby Code more than 3x faster. Hopefully". GitHub. 21 February 2020. Archived from the original on 1 March 2017. Retrieved 29 August 2016.

^ Peter Cooper (2010-05-18). "The Why, What, and How of Rubinius 1.0's Release". Archived from the original on 2010-05-24. Retrieved 2010-05-23.

^ Maya Stodte (February 2000). "IBM developerWorks – Ruby: a new language". Archived from the original on August 18, 2000. Retrieved 3 March 2014.

^ Yukihiro Matsumoto (August 2002). "lang-ruby-general: Re: question about Ruby initial development". Archived from the original on 3 March 2014. Retrieved 3 March 2014.

^ "The Ruby Toolbox". Archived from the original on 2015-04-03. Retrieved 2015-04-04.
^ "Stats RubyGems.org your community gem host". rubygems.org. Archived from the original on 10 December 2021. Retrieved 10 December 2021.

^ "We retire raa.ruby-lang.org". 2013-08-08. Archived from the original on 2015-12-31. Retrieved 2016-01-03.
Further reading[edit]

Further reading[edit]
Black, David; Leo, Joseph (March 15, 2019), The Well-Grounded Rubyist (Third ed.), Manning Publications, p. 584, ISBN 978-1617295218

Metz, Sandi (August 22, 2018), Practical Object-Oriented Design: An Agile Primer Using Ruby (Second ed.), Addison-Wesley Professional, p. 288, ISBN 978-0-13-445647-8, archived from the original on February 13, 2020, retrieved February 13, 2020

Cooper, Peter (July 12, 2016), Beginning Ruby: From Novice to Professional (Third ed.), Apress, p. 492, ISBN 978-1484212790

Carlson, Lucas; Richardson, Leonard (April 3, 2015), Ruby Cookbook: Recipes for Object-Oriented Scripting (Second ed.), O'Reilly Media, p. 963, ISBN 978-1449373719

Fulton, Hal; Arko, André (March 2, 2015), The Ruby Way: Solutions and Techniques in Ruby Programming (Third ed.), Addison-Wesley Professional, p. 816, ISBN 978-0-321-71463-3, archived from the original on February 13, 2020, retrieved February 13,

on February 13, 2020, retrieved February 13, 2020

Thomas, Dave; Fowler, Chad; Hunt, Andy (July 7, 2013), Programming Ruby 1.9 & 2.0: The Pragmatic Programmers' Guide (Fourth ed.), Pragmatic Bookshelf, p. 888, ISBN 978-1937785499

McAnally, Jeremy; Arkin, Assaf (March 28, 2009), Ruby in Practice (First ed.), Manning Publications, p. 360, ISBN 978-1933988474

Flanagan, David; Matsumoto, Yukihiro (January 25, 2008), The Ruby Programming Language (First ed.), O'Reilly Media, p. 446, ISBN 978-0-596-51617-8

Baird, Kevin (June 8, 2007), Ruby by Example: Concepts and Code (First ed.), No Starch Press, p. 326, ISBN 978-1593271480, archived from the original on January 13, 2020, retrieved February 13, 2020

Fitzgerald, Michael (May 14, 2007), Learning Ruby (First ed.), O'Reilly Media, p. 255, ISBN 978-0-596-52986-4
External links[edit]
Wikiquote has quotations related to Ruby (programming language).

Wikimedia Commons has media related to Ruby programming language.
Wikiversity has learning resources about Topic:Ruby
Official website
Ruby documentation
Ruby at Curlie
vteRuby programming languageImplementationsActive
Ruby MRI; YARV
mruby
JRuby

Ruby MRI; YARV
mruby
JRuby
RubyMotion
Discontinued
MacRuby
IronRuby
XRuby
HotRuby
MagLev
Rubinius
IDE
Aptana Studio
Komodo IDE
RubyMine
Applications
Capistrano
Hackety Hack
Interactive Ruby Shell
Pry
Rake
Redmine
RSpec
RubyGems
RVM
Chef
Puppet

Pry
Rake
Redmine
RSpec
RubyGems
RVM
Chef
Puppet
Vagrant
Homebrew
CocoaPods
Libraries and frameworks
Adhearsion
eRuby (RHTML)
Merb
Padrino
RubyCocoa
Ruby on Rails
Shoes
Sinatra
QtRuby
Server software
mod_ruby
Mongrel

Sinatra
QtRuby
Server software
mod_ruby
Mongrel
Phusion Passenger (mod_rails/mod_rack)
Rack
WEBrick
People
Yukihiro Matsumoto
David Heinemeier Hansson
why the lucky stiff
Dave Thomas
Other
Document format
why's (poignant) Guide to Ruby
Ruby Central

why's (poignant) Guide to Ruby
Ruby Central
RubyKaigi
RubyForge
Ruby License
Category
Commons
vteProgramming languages
Comparison
Timeline
History
Ada
ALGOL
Simula
APL
Assembly
BASIC
Visual Basic
classic
.NET
C
C++
C#
COBOL
Erlang
Forth
Fortran
Go

.NET
C
C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Julia
Kotlin
Lisp
Lua
MATLAB
ML
Pascal
Object Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Scratch
Shell
Smalltalk
Swift
more...
Lists: Alphabetical
Categorical
Generational

Lists: Alphabetical
Categorical
Generational
Non-English-based
Category
vteFree and open-source softwareGeneral
Alternative terms for free software
Comparison of open-source and closed-source software
Comparison of source-code-hosting facilities

Comparison of source-code-hosting facilities
Free software
Free software project directories
Gratis versus libre
Long-term support
Open-source software
Open-source software development
Outline
Timeline
Softwarepackages
Audio
Bioinformatics
Codecs

Softwarepackages
Audio
Bioinformatics
Codecs
Configuration management
Drivers
Graphics
Wireless
Health
Mathematics
Office suites
Operating systems
Routing
Television
Video games
Web applications
E-commerce
Android apps
iOS apps
Commercial

E-commerce
Android apps
iOS apps
Commercial
Formerly proprietary
Formerly open-source
Community
Free software movement
History
Open-source-software movement
Events
Advocacy
Organisations
Free Software Movement of India
Free Software Foundation

Free Software Foundation
Licenses
AFL
Apache
APSL
Artistic
Beerware
BSD
Creative Commons
CDDL
EPL
Free Software Foundation
GNU GPL
GNU AGPL
GNU LGPL
ISC
MIT
MPL
Python
Python Software Foundation License
Shared Source Initiative
Sleepycat
Unlicense

Shared Source Initiative
Sleepycat
Unlicense
WTFPL
zlib
Types and standards
Comparison of licenses
Contributor License Agreement
Copyleft
Debian Free Software Guidelines
Definition of Free Cultural Works
Free license
The Free Software Definition

Free license
The Free Software Definition
The Open Source Definition
Open-source license
Permissive software license
Public domain
Challenges
Digital rights management
License proliferation
Mozilla software rebranding
Proprietary device drivers

Proprietary device drivers
Proprietary firmware
Proprietary software
SCO/Linux controversies
Software patents
Software security
Tivoization
Trusted Computing
Related topics
Forking
GNU Manifesto
Microsoft Open Specification Promise
Open-core model

Open-core model
Open-source hardware
Shared Source Initiative
Source-available software
The Cathedral and the Bazaar
Revolution OS
Portal
Category
vteISO standards by standard numberList of ISO standards – ISO romanizations – IEC standards1–9999
1
2

1
2
3
4
6
7
9
16
17
31
-0
-1
-3
-4
-5
-6
-7
-8
-9
-10
-11
-12
-13
68-1
128
216
217
226
228
233
259
261
262
302
306
361
500
518
519
639
-1
-2
-3
-5
-6
646
657
668
690
704
732
764
838
843
860
898
965
999
1000
1004
1007
1073-1
1073-2
1155
1413
1538

999
1000
1004
1007
1073-1
1073-2
1155
1413
1538
1629
1745
1989
2014
2015
2022
2033
2047
2108
2145
2146
2240
2281
2533
2709
2711
2720
2788
2848
2852
2921
3029
3103
3166
-1
-2
-3
3297
3307
3601
3602
3864
3901
3950
3977
4031
4157
4165
4217
4909
5218

3864
3901
3950
3977
4031
4157
4165
4217
4909
5218
5426
5427
5428
5725
5775
5776
5800
5807
5964
6166
6344
6346
6373
6385
6425
6429
6438
6523
6709
6943
7001
7002
7010
7027
7064
7098
7185
7200
7498
-1
7637
7736
7810
7811
7812
7813
7816
7942
8000
8093

7637
7736
7810
7811
7812
7813
7816
7942
8000
8093
8178
8217
8373
8501-1
8571
8583
8601
8613
8632
8651
8652
8691
8805/8806
8807
8820-5
8859
-1
-2
-3
-4
-5
-6
-7
-8
-8-I
-9
-10
-11
-12
-13
-14
-15
-16
8879
9000/9001
9036
9075
9126
9141
9227
9241
9293

8879
9000/9001
9036
9075
9126
9141
9227
9241
9293
9314
9362
9407
9496
9506
9529
9564
9592/9593
9594
9660
9797-1
9897
9899
9945
9984
9985
9995
10000–19999
10006
10007
10116
10118-3
10160
10161
10165
10179
10206
10218
10279
10303
-11
-21
-22
-28
-238

10206
10218
10279
10303
-11
-21
-22
-28
-238
10383
10585
10589
10628
10646
10664
10746
10861
10957
10962
10967
11073
11170
11172
11179
11404
11544
11783
11784
11785
11801
11889
11898
11940 (-2)
11941
11941 (TR)
11992
12006
12052
12182
12207
12234-2

11941 (TR)
11992
12006
12052
12182
12207
12234-2
12620
13211
-1
-2
13216
13250
13399
13406-2
13450
13485
13490
13567
13568
13584
13616
13816
13818
14000
14031
14224
14289
14396
14443
14496
-2
-3
-6
-10
-11
-12
-14
-17
-20
14617
14644
14649
14651

-10
-11
-12
-14
-17
-20
14617
14644
14649
14651
14698
14764
14882
14971
15022
15189
15288
15291
15398
15408
15444
-3
-9
15445
15438
15504
15511
15686
15693
15706
-2
15707
15897
15919
15924
15926
15926 WIP
15930
15938
16023
16262
16355-1
16485

15926 WIP
15930
15938
16023
16262
16355-1
16485
16612-2
16750
16949 (TS)
17024
17025
17100
17203
17369
17442
17506
17799
18004
18014
18181
18245
18629
18916
19005
19011
19092
-1
-2
19114
19115
19125
19136
19407
19439
19500
19501
19502
19503
19505

19136
19407
19439
19500
19501
19502
19503
19505
19506
19507
19508
19509
19510
19600
19752
19757
19770
19775-1
19794-5
19831
20000–29999
20000
20022
20121
20400
20802
20830
21000
21001
21047
21122
21500
21827
22000
22275
22300
22301
22395
22537
23000

21827
22000
22275
22300
22301
22395
22537
23000
23003
23008
23009
23090-3
23092
23094-1
23094-2
23270
23271
23360
23941
24517
24613
24617
24707
24728
25178
25964
26000
26262
26300
26324
27000 series
27000
27001
27002
27005
27006
27729
28000
29110

27000
27001
27002
27005
27006
27729
28000
29110
29148
29199-2
29500
30000+
30170
31000
32000
37001
38500
39075
40500
42010
45001
50001
55000
56000
80000
Category

42010
45001
50001
55000
56000
80000
Category
Authority control databases NationalGermanyUnited StatesFranceBnF dataCzech RepublicSpainIsraelOtherIdRef

Retrieved from "https://en.wikipedia.org/w/index.php?title=Ruby_(programming_language)&oldid=1248631172"

Categories: Ruby (programming language)Class-based programming languagesDynamic programming languagesFunctional languagesDynamically typed programming languagesFree software programmed in CISO standardsJapanese inventionsMulti-paradigm programming

inventionsMulti-paradigm programming languagesObject-oriented programming languagesProgramming languages created in 1995Programming languages with an ISO standardScripting languagesSoftware using the BSD licenseText-oriented programming

using the BSD licenseText-oriented programming languagesFree compilers and interpretersHidden categories: Webarchive template wayback linksCS1 maint: multiple names: authors listCS1 maint: bot: original URL status unknownArticles with short

original URL status unknownArticles with short descriptionShort description matches WikidataWikipedia articles that are too technical from June 2022All articles that are too technicalArticles containing potentially dated statements from 2018All

potentially dated statements from 2018All articles containing potentially dated statementsCommons category link is on WikidataOfficial website different in Wikidata and WikipediaArticles with Curlie linksArticles with example Ruby code

This page was last edited on 30 September 2024, at 16:33 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License;

additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policy
About Wikipedia
Disclaimers

Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view

Swift (programming language) - Wikipedia
Jump to content
Main menu
Main menu
move to sidebar
hide
Navigation
Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us
Contribute
HelpLearn to editCommunity portalRecent changesUpload file

Search
Search
Donate
Appearance
Create account
Log in
Personal tools
Create account Log in
Pages for logged out editors learn more
ContributionsTalk
Contents
move to sidebar
hide
(Top)
1
History
Toggle History subsection
1.1
Platforms
1.2

Toggle History subsection
1.1
Platforms
1.2
Version history
2
Features
Toggle Features subsection
2.1
Basic syntax
2.2
Closure support
2.3
String support
2.4
Callable objects
2.5
Access control
2.6
Optionals and chaining
2.7
Value types
2.8

2.6
Optionals and chaining
2.7
Value types
2.8
Extensions
2.9
Protocol-oriented programming
2.10
Concurrency
2.11
Libraries, runtime, development
2.12
Memory management
2.13
Debugging
3
Comparisons to other languages
4

2.13
Debugging
3
Comparisons to other languages
4
Development and other implementations
5
See also
6
References
7
External links
Toggle the table of contents
Swift (programming language)
47 languages

العربيةAzərbaycancaবাংলাБеларускаяБългарскиCatalàČeštinaDeutschΕλληνικάEspañolEsperantoفارسیFrançais한국어ՀայերենBahasa IndonesiaÍslenskaItalianoעבריתКыргызчаLatinaMagyarമലയാളംBahasa MelayuNederlands日本語Norsk bokmålOʻzbekcha /

MelayuNederlands日本語Norsk bokmålOʻzbekcha / ўзбекчаPolskiPortuguêsQaraqalpaqshaRomânăРусскийSimple EnglishSlovenčinaSlovenščinaکوردیСрпски / srpskiSuomiSvenskaТоҷикӣTürkçeУкраїнськаTiếng Việt吴语粵語中文

Edit links
ArticleTalk
English
ReadEditView history
Tools
Tools
move to sidebar
hide
Actions
ReadEditView history
General

hide
Actions
ReadEditView history
General
What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata item
Print/export
Download as PDFPrintable version

Print/export
Download as PDFPrintable version
In other projects
Wikimedia Commons
Appearance
move to sidebar
hide
From Wikipedia, the free encyclopedia
General-purpose compiled programming language

General-purpose compiled programming language
This article is about the Apple programming language. Not to be confused with Swift (parallel scripting language) or Swift (CPU).

SwiftLogoParadigmMulti-paradigm: protocol-oriented, object-oriented, functional, imperative, block structured, declarative, concurrentDesigned byChris Lattner, Doug Gregor, John McCall, Ted Kremenek, Joe Groff, and Apple Inc.[1]DeveloperApple Inc.

Joe Groff, and Apple Inc.[1]DeveloperApple Inc. and open-source contributorsFirst appearedJune 2, 2014; 10 years ago (2014-06-02)[2]Stable release6.0.1[3]

/    27 September 2024; 15 days ago (27 September 2024)Preview release6.0

Typing disciplineStatic, strong, inferredMemory managementAutomatic Reference CountingOSApple's operating systems (Darwin, iOS, iPadOS, macOS, tvOS, visionOS, watchOS), Linux, Windows, Android, z/OSLicenseApache License 2.0 (Swift 2.2 and

z/OSLicenseApache License 2.0 (Swift 2.2 and later)Proprietary (up to Swift 2.2)[4][5]Filename extensions.swift, .SWIFTWebsite

www.swift.org
developer.apple.com/swift/
Influenced byObjective-C,[6] Rust, Haskell, Ruby, Python, C#, CLU,[7] D[8]InfluencedRust,[9] V (Vlang)[10]

Swift is a high-level general-purpose, multi-paradigm, compiled programming language created by Chris Lattner in 2010 for Apple Inc. and maintained by the open-source community. Swift compiles to machine code and uses an LLVM-based compiler. Swift

code and uses an LLVM-based compiler. Swift was first released in June 2014[11] and the Swift toolchain has shipped in Xcode since version 6, released in 2014.

Apple intended Swift to support many core concepts associated with Objective-C, notably dynamic dispatch, widespread late binding, extensible programming, and similar features, but in a "safer" way, making it easier to catch software bugs; Swift has

it easier to catch software bugs; Swift has features addressing some common programming errors like null pointer dereferencing and provides syntactic sugar to help avoid the pyramid of doom. Swift supports the concept of protocol extensibility, an

the concept of protocol extensibility, an extensibility system that can be applied to types, structs and classes, which Apple promotes as a real change in programming paradigms they term "protocol-oriented programming"[12] (similar to traits and

programming"[12] (similar to traits and type classes).[13]

Swift was introduced at Apple's 2014 Worldwide Developers Conference (WWDC).[14] It underwent an upgrade to version 1.2 during 2014 and a major upgrade to Swift 2 at WWDC 2015. It was initially a proprietary language, but version 2.2 was made

a proprietary language, but version 2.2 was made open-source software under the Apache License 2.0 on December 3, 2015, for Apple's platforms and Linux.[15][16]

Through version 3.0 the syntax of Swift went through significant evolution, with the core team making source stability a focus in later versions.[17][18] In the first quarter of 2018 Swift surpassed Objective-C in measured popularity.[19]

Swift 4.0, released in 2017, introduced several changes to some built-in classes and structures. Code written with previous versions of Swift can be updated using the migration functionality built into Xcode. Swift 5, released in March 2019,

into Xcode. Swift 5, released in March 2019, introduced a stable binary interface on Apple platforms, allowing the Swift runtime to be incorporated into Apple operating systems. It is source compatible with Swift 4.[20]

Swift 5.1 was officially released in September 2019. Swift 5.1 builds on the previous version of Swift 5 by extending the stable features of the language to compile-time with the introduction of module stability. The introduction of module stability

stability. The introduction of module stability makes it possible to create and share binary frameworks that will work with future releases of Swift.[21]

Swift 5.5, officially announced by Apple at the 2021 WWDC, significantly expands language support for concurrency and asynchronous code, notably introducing a unique version of the actor model.[22]

Swift 5.9, was released in September 2023 and includes a macro system, generic parameter packs, and ownership features like the new consume operator.[23]

The current version, Swift 5.10, was released in March 2024. This version improves the language's concurrency model, allowing for full data isolation to prevent data races. It is also the last release before Swift 6.[24] Version 5.10 is currently

before Swift 6.[24] Version 5.10 is currently available for macOS, Windows and for Linux.[25]

History[edit]

Development of Swift started in July 2010 by Chris Lattner, with the eventual collaboration of many other programmers at Apple. Swift was motivated by the need for a replacement for Apple's earlier programming language Objective-C, which had been

programming language Objective-C, which had been largely unchanged since the early 1980s and lacked modern language features. Swift took language ideas "from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list".[7] On

C#, CLU, and far too many others to list".[7] On June 2, 2014, the Apple Worldwide Developers Conference (WWDC) application became the first publicly released app written with Swift.[26] A beta version of the programming language was released to

of the programming language was released to registered Apple developers at the conference, but the company did not promise that the final version of Swift would be source code compatible with the test version. Apple planned to make source code

test version. Apple planned to make source code converters available if needed for the full release.[26]

The Swift Programming Language, a free 500-page manual, was also released at WWDC, and is available on the Apple Books Store and the official website.[27]

Swift reached the 1.0 milestone on September 9, 2014, with the Gold Master of Xcode 6.0 for iOS.[28] Swift 1.1 was released on October 22, 2014, alongside the launch of Xcode 6.1.[29] Swift 1.2 was released on April 8, 2015, along with Xcode

was released on April 8, 2015, along with Xcode 6.3.[30] Swift 2.0 was announced at WWDC 2015, and was made available for publishing apps in the App Store on September 21, 2015.[31] Swift 3.0 was released on September 13, 2016.[32] Swift 4.0 was

released on September 13, 2016.[32] Swift 4.0 was released on September 19, 2017.[33] Swift 4.1 was released on March 29, 2018.[34]

Swift won first place for Most Loved Programming Language in the Stack Overflow Developer Survey 2015[35] and second place in 2016.[36]

On December 3, 2015, the Swift language, supporting libraries, debugger, and package manager were open-sourced under the Apache 2.0 license with a Runtime Library Exception,[37] and Swift.org was created to host the project. The source code is

created to host the project. The source code is hosted on GitHub, where it is easy for anyone to get the code, build it themselves, and even create pull requests to contribute code back to the project.

In December 2015, IBM announced its Swift Sandbox website, which allows developers to write Swift code in one pane and display output in another.[38][39][40] The Swift Sandbox was deprecated in January 2018.[41]

During the WWDC 2016, Apple announced an iPad exclusive app, named Swift Playgrounds, intended to teach people how to code in Swift. The app is presented in a 3D video game-like interface which provides feedback when lines of code are placed in a

feedback when lines of code are placed in a certain order and executed.[42][43][44]

In January 2017, Chris Lattner announced his departure from Apple for a new position with Tesla Motors, with the Swift project lead role going to team veteran Ted Kremenek.[45][46]

During WWDC 2019, Apple announced SwiftUI with Xcode 11, which provides a framework for declarative UI structure design across all Apple platforms.[47]

Official downloads of the SDK and toolchain for the Ubuntu distribution of Linux have been available since Swift 2.2, with more distros added since Swift 5.2.4, CentOS and Amazon Linux.[48] There is an unofficial SDK and native toolchain package for

unofficial SDK and native toolchain package for Android too.[49][50]

Platforms[edit]
The platforms Swift supports are Apple's operating systems (Darwin, iOS, iPadOS, macOS, tvOS, watchOS), Linux, Windows, and Android.[51][52]

A key aspect of Swift's design is its ability to interoperate with the huge body of existing Objective-C code developed for Apple products over the previous decades, such as Cocoa and the Cocoa Touch frameworks. On Apple platforms,[53] it links with

frameworks. On Apple platforms,[53] it links with the Objective-C runtime library, which allows C, Objective-C, C++ and Swift code to run within one program.[54]

Version history[edit]
Swiftversion
Release date
macOS
Linux
Windows
1.0
September 9, 2014
Yes
No
No
1.1
October 22, 2014
Yes
No
No
1.2
April 8, 2015
Yes
No
No
2.0
September 21, 2015
Yes
No
No
2.1
October 20, 2015
Yes
No
No
2.2
March 21, 2016
Yes
Yes

Yes
No
No
2.2
March 21, 2016
Yes
Yes
No
2.2.1
May 3, 2016
Yes
Yes
No
3.0
September 13, 2016
Yes
Yes
No
3.0.1
October 28, 2016
Yes
Yes
No
3.0.2
December 13, 2016
Yes
Yes
No
3.1
March 27, 2017
Yes
Yes
No
3.1.1
April 21, 2017
Yes
Yes
No
4.0

Yes
Yes
No
3.1.1
April 21, 2017
Yes
Yes
No
4.0
September 19, 2017
Yes
Yes
No
4.0.2
November 1, 2017
Yes
Yes
No
4.0.3
December 5, 2017
Yes
Yes
No
4.1
March 29, 2018
Yes
Yes
No
4.1.1
May 4, 2018
No
Yes
No
4.1.2
May 31, 2018
Yes
Yes
No
4.1.3

No
Yes
No
4.1.2
May 31, 2018
Yes
Yes
No
4.1.3
July 27, 2018
No
Yes
No
4.2
September 17, 2018
Yes
Yes
No
4.2.1
October 30, 2018
Yes
Yes
No
4.2.2
February 4, 2019
No
Yes
No
4.2.3
February 28, 2019
No
Yes
No
4.2.4
March 29, 2019
No
Yes
No
5.0[55]

No
Yes
No
4.2.4
March 29, 2019
No
Yes
No
5.0[55]
March 25, 2019
Yes
Yes
No
5.0.1
April 18, 2019
Yes
Yes
No
5.0.2
July 15, 2019
No
Yes
No
5.0.3
August 30, 2019
No
Yes
No
5.1
September 10, 2019
Yes
Yes
No
5.1.1
October 11, 2019
No
Yes
No
5.1.2

Yes
Yes
No
5.1.1
October 11, 2019
No
Yes
No
5.1.2
November 7, 2019
Yes
Yes
No
5.1.3
December 13, 2019
Yes
Yes
No
5.1.4
January 31, 2020
No
Yes
No
5.1.5
March 9, 2020
No
Yes
No
5.2
March 24, 2020
Yes
Yes
No
5.2.1
March 30, 2020
No
Yes
No
5.2.2

Yes
Yes
No
5.2.1
March 30, 2020
No
Yes
No
5.2.2
April 15, 2020
Yes
Yes
No
5.2.3
April 29, 2020
No
Yes
No
5.2.4
May 20, 2020
Yes
Yes
No
5.2.5
August 5, 2020
No
Yes
No
5.3
September 16, 2020
Yes
Yes
Yes[56]
5.3.1
November 13, 2020
Yes
Yes
Yes
5.3.2

Yes[56]
5.3.1
November 13, 2020
Yes
Yes
Yes
5.3.2
December 15, 2020
Yes
Yes
Yes
5.3.3
January 25, 2021
No
Yes
Yes
5.4[57]
April 26, 2021
Yes
Yes
Yes
5.4.1
May 25, 2021
No
Yes
Yes
5.4.2
June 28, 2021
Yes
Yes
Yes
5.4.3
September 9, 2021
No
Yes
Yes
5.5

Yes
Yes
5.4.3
September 9, 2021
No
Yes
Yes
5.5
September 20, 2021
Yes
Yes
Yes
5.5.1
October 27, 2021
Yes
Yes
Yes
5.5.2
December 14, 2021
Yes
Yes
Yes
5.5.3
February 9, 2022
No
Yes
Yes
5.6[58]
March 14, 2022
Yes
Yes
Yes
5.6.1[59]
April 9, 2022
No
Yes

Yes
Yes
Yes
5.6.1[59]
April 9, 2022
No
Yes
Yes
5.6.2[60]
June 15, 2022
No
Yes
Yes
5.6.3[61]
September 2, 2022
No
Yes
Yes
5.7[62]
September 12, 2022
Yes
Yes
Yes
5.7.1[63]
November 1, 2022
Yes
Yes
Yes
5.8[64]
March 30, 2023
Yes
Yes
Yes
5.8.1[65]

Yes
5.8[64]
March 30, 2023
Yes
Yes
Yes
5.8.1[65]
June 1, 2023
Yes
Yes
Yes
5.9[66]
September 18, 2023
Yes
Yes
Yes
5.9.1[67]
October 19, 2023
Yes
Yes
Yes
5.9.2[68]
December 11, 2023
Yes
Yes
Yes
5.10[24]
March 5, 2024
Yes
Yes
Yes
5.10.1[69]

Yes
5.10[24]
March 5, 2024
Yes
Yes
Yes
5.10.1[69]
June 5, 2024
Yes
Yes
Yes
6.0[70]
September 16, 2024
Yes
Yes
Yes
Features[edit]

Yes
Yes
Features[edit]
This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (June 2018) (Learn how and when to remove this message)

Swift is a general purpose programming language that employs modern programming-language theory concepts and strives to present a simple, yet powerful syntax. Swift incorporates innovations and conventions from various programming languages, with

from various programming languages, with notable inspiration from Objective-C, which it replaced as the primary development language on Apple Platforms.

Swift was designed to be safe and friendly to new programmers while not sacrificing speed. By default Swift manages all memory automatically and ensures variables are always initialized before use. Array accesses are checked for out-of-bounds errors

accesses are checked for out-of-bounds errors and integer operations are checked for overflow. Parameter names allow creating clear APIs. Protocols define interfaces that types may adopt, while extensions allow developers to add more function to

allow developers to add more function to existing types. Swift enables object-oriented programming with the support for classes, subtyping, and method overriding. Optionals allow nil values to be handled explicitly and safely. Concurrent programs

explicitly and safely. Concurrent programs can be written using async/await syntax and actors isolate shared mutable state in order to eliminate data races.[71][72]

Basic syntax[edit]

Swift's syntax is similar to C-style languages. Code begins executing in the global scope by default.[73] Alternatively, the @main attribute can be applied a structure, class, or enumeration declaration to indicate that it contains the program's

to indicate that it contains the program's entry point.[74]

Swift's "Hello, World!" program is:print("Hello, world!")

The print(_:separator:terminator:) function used here is included in Swift's standard library, which is available to all programs without the need to import external modules. Statements in Swift don't have to end with a semicolon, however semicolons

have to end with a semicolon, however semicolons are required to separate multiple statements written on the same line. Single-line comments begin with // and continue until the end of the current line. Multiline comments are contained by /* and */

Multiline comments are contained by /* and */ characters.

Constants are declared with the let keyword and variables with the var keyword. Values must be initialized before they are read. Values may infer their type based on the type of the provided initial value. If the initial value is set after the

value. If the initial value is set after the value's declaration, a type must be declared explicitly.[73]let highScoreThreshold = 1000 // A constant with type Int. The type was inferred based on the provided value.

var currentScore = 980 // A variable with type Int.
currentScore = 1200 // The value of variables can change over time.
let playerMessage: String // A constant with explicit type String.
if currentScore > highScoreThreshold {

if currentScore > highScoreThreshold {
playerMessage = "You are a top player!"
} else {
playerMessage = "Better luck next time."
}
print(playerMessage) // Prints "You are a top player!"

Control flow in Swift is managed with if-else, guard, and switch statements, along with while and for-in loops.

If statements take a Boolean parameter and execute the body of the if statement if the condition is true, otherwise it executes the optional else body. if-let syntax provides syntactic sugar for checking for the existence of an optional value and

for the existence of an optional value and unwrapping it at the same time.let someNumber = 42

if someNumber % 2 == 0 { // Use the remainder operator to find the remainder of someNumber divided by 2.
print("\(someNumber) is even.")
} else {
print("\(someNumber) is odd.")
}
// Prints "42 is even."

Functions are defined with the func keyword. Function parameters may have names which allow function calls to read like phrases. An underscore before the parameter name allows the argument label to be omitted from the call site. Tuples can be used

be omitted from the call site. Tuples can be used by functions to return multiple pieces of data at once.func constructGreeting(for name: String) -> String {

return "Hello \(name)!"
}
let greeting = constructGreeting(for: "Craig")
print(greeting) // Prints "Hello Craig!"

print(greeting) // Prints "Hello Craig!"
Functions, and anonymous functions known as closures, can be assigned to properties and passed around the program like any other value.func divideByTwo(_ aNum: Int) -> Int {
return aNum / 2
}

return aNum / 2
}
func multiplyByTwo(_ aNum: Int) -> Int {
return aNum * 2
}
let mathOperation = multiplyByTwo
print(mathOperation(21)) // Prints "42"

guard statements require that the given condition is true before continuing on past the guard statement, otherwise the body of the provided else clause is run. The else clause must exit control of the code block in which the guard statement appears.

code block in which the guard statement appears. guard statements are useful for ensuring that certain requirements are met before continuing on with program execution. In particular they can be used to create an unwrapped version of an optional

to create an unwrapped version of an optional value that is guaranteed to be non-nil for the remainder of the enclosing scope.func divide(numerator: Int?, byDenominator denominator: Int) -> Int? {

guard denominator != 0 else {
print("Can't divide by 0.")
return nil
}
guard let numerator else {
print("The provided numerator is nil.")
return nil
}
return numerator / denominator
}
let result = divide(numerator: 3, byDenominator: 0)

print("Division result is: \(result)")
// Prints:
// "Can't divide by 0."
// "Division result is: nil."

switch statements compare a value with multiple potential values and then executes an associated code block. switch statements must be made exhaustive, either by including cases for all possible values or by including a default case which is run

or by including a default case which is run when the provided value doesn't match any of the other cases. switch cases do not implicitly fall through, although they may explicitly do so with the fallthrough keyword. Pattern matching can be used in

keyword. Pattern matching can be used in various ways inside switch statements. Here is an example of an integer being matched against a number of potential ranges:let someNumber = 42

switch someNumber {
case ..<0:
print("\(someNumber) negative.")
case 0:
print("\(someNumber) is 0.")
case 1...9:
print("\(someNumber) greater than 0, but less than 10.")
default:
print("\(someNumber) is greater than 9.")
}

print("\(someNumber) is greater than 9.")
}
// Prints "42 is greater than 9."
for-in loops iterate over a sequence of values:let names = ["Will", "Anna", "Bart"]
for name in names {
print(name)
}
// Prints:
// Will
// Anna
// Bart

print(name)
}
// Prints:
// Will
// Anna
// Bart
while loops iterate as long as the given Boolean condition evaluates to true:// Add together all the numbers from 1 to 5.
var i = 1
var result = 0

var i = 1
var result = 0
while i <= 5 { // The loop performs its body as long as i is less than or equal to 5.
result += i // Add i to the current result.
i += 1 // Increment i by 1.
}
print(result) // Prints "15"
Closure support[edit]

Closure support[edit]
Swift supports closures, which are self-contained blocks of functionality that can be passed around and used in code,[75] and can also be used as anonymous functions. Here are some examples:

// Closure type, defined by its input and output values, can be specified outside the closure:
let closure1: (Int, Int) -> Int = { arg1, arg2 in
return arg1 + arg2
}
// …or inside it:
let closure2 = { (arg1: Int, arg2: Int) -> Int in

let closure2 = { (arg1: Int, arg2: Int) -> Int in
return arg1 + arg2
}
// In most cases, closure's return type can be inferred automatically by the compiler.
let closure3 = { arg1: Int, arg2: Int in
return arg1 + arg2
}

return arg1 + arg2
}
Closures can be assigned to variables and constants, and can be passed into other functions or closures as parameters. Single-expression closures may drop the return keyword.

Swift also has a trailing closure syntax, which allows the closure to be written after the end of the function call instead of within the function's parameter list. Parentheses can be omitted altogether if the closure is the function's only

altogether if the closure is the function's only parameter:

// This function takes a closure which receives no input parameters and returns an integer,
// evaluates it, and uses the closure's return value (an Int) as the function's return value.
func foo(closure bar: () -> Int) -> Int {
return bar()
}

return bar()
}
// Without trailing closure syntax:
foo(closure: { return 1 })
// With trailing closure syntax, and implicit return:
foo { 1 }
Starting from version 5.3, Swift supports multiple trailing closures:[76]

// This function passes the return of the first closure as the parameter of the second,
// and returns the second closure's result:
func foo(bar: () -> Int, baz: (Int) -> Int) -> Int {
return baz(bar())
}
// With no trailing closures:

return baz(bar())
}
// With no trailing closures:
foo(bar: { return 1 }, baz: { x in return x + 1 })
// With 1 trailing closure:
foo(bar: { return 1 }) { x in return x + 1 }

foo(bar: { return 1 }) { x in return x + 1 }
// With 2 trailing closures (only the first closure's argument name is omitted):
foo { return 1 } baz: { x in return x + 1 }

Swift will provide shorthand argument names for inline closures, removing the need to explicitly name all of the closures parameters.[77] Arguments can be referred to with the names $0, $1, $2, and so on:let names = ["Josephine", "Steve", "Chris",

so on:let names = ["Josephine", "Steve", "Chris", "Barbara"]

// filter calls the given closure for each value in names.
// Values with a character count less than 6 are kept, the others are dropped.
let shortNames = names.filter { $0.count < 6 }
print(shortNames) // Prints "["Steve", "Chris"]"

Closures may capture values from their surrounding scope. The closure will refer to this captured value for as long as the closure exists:func makeMultiplier(withMultiple multiple: Int) -> (Int) -> (Int) {

// Create and return a closure that takes in an Int and returns the input multiplied by the value of multiple.
return {
$0 * multiple
}
}
let multiplier = makeMultiplier(withMultiple: 3)
print(multiplier(3)) // Prints "9"

print(multiplier(3)) // Prints "9"
print(multiplier(10)) // Prints "30"
String support[edit]

The Swift standard library includes unicode-compliant String and Character types. String values can be initialized with a String literal, a sequence of characters surrounded by double quotation marks. Strings can be concatenated with the + operator:

var someString = "Hello,"
someString += " world!"

someString += " world!"
String interpolation allows for the creation of a new string from other values and expressions. Values written between parentheses preceded by a \ will be inserted into the enclosing string literal:[78]
var currentScore = 980

var currentScore = 980
print("Your score is \(currentScore).")
// Prints "Your score is 980."
A for-in loop can be used to iterate over the characters contained in a string:
for character in "Swift" {
print(character)
}
// S
// w
// i
// f
// t

print(character)
}
// S
// w
// i
// f
// t
When the Foundation framework is imported Swift invisibly bridges the String type to NSString, the String class commonly used in Objective-C.
Callable objects[edit]

Callable objects[edit]
This section is an excerpt from Callable object § In Swift.[edit]
In Swift, callable objects are defined using callAsFunction.[79]
struct CallableStruct {
var value: Int
func callAsFunction(_ number: Int, scale: Int) {

func callAsFunction(_ number: Int, scale: Int) {
print(scale * (number + value))
}
}
let callable = CallableStruct(value: 100)
callable(4, scale: 2)
callable.callAsFunction(4, scale: 2)
// Both function calls print 208.
Access control[edit]

Swift supports five access control levels for symbols: open, public, internal, fileprivate, and private. Unlike many object-oriented languages, these access controls ignore inheritance hierarchies: private indicates that a symbol is accessible only

indicates that a symbol is accessible only in the immediate scope, fileprivate indicates it is accessible only from within the file, internal indicates it is accessible within the containing module, public indicates it is accessible from any module,

indicates it is accessible from any module, and open (only for classes and their methods) indicates that the class may be subclassed outside of the module.[80]

Optionals and chaining[edit]

An important feature in Swift is option types, which allow references or values to operate in a manner similar to the common pattern in C, where a pointer may either refer to a specific value or no value at all. This implies that non-optional types

at all. This implies that non-optional types cannot result in a null-pointer error; the compiler can ensure this is not possible.

Optional types are created with the Optional enum. To make an Integer that is nullable, one would use a declaration similar to var optionalInteger: Optional<Int>. As in C#,[81] Swift also includes syntactic sugar for this, allowing one to indicate a

sugar for this, allowing one to indicate a variable is optional by placing a question mark after the type name, var optionalInteger: Int?.[82] Variables or constants that are marked optional either have a value of the underlying type or are nil.

have a value of the underlying type or are nil. Optional types wrap the base type, resulting in a different instance. String and String? are fundamentally different types, the former is of type String while the latter is an Optional that may be

while the latter is an Optional that may be holding some String value.

To access the value inside, assuming it is not nil, it must be unwrapped to expose the instance inside. This is performed with the ! operator:
let myValue = anOptionalInstance!.someMethod()

In this case, the ! operator unwraps anOptionalInstance to expose the instance inside, allowing the method call to be made on it. If anOptionalInstance is nil, a null-pointer error occurs, terminating the program. This is known as force unwrapping.

the program. This is known as force unwrapping. Optionals may be safely unwrapped using optional chaining which first tests whether the instance is nil, and then unwrap it if it is non-null:

let myValue = anOptionalInstance?.someMethod()

In this case the runtime calls someMethod only if anOptionalInstance is not nil, suppressing the error. A ? must be placed after every optional property. If any of these properties are nil the entire expression evaluates as nil. The origin of the

expression evaluates as nil. The origin of the term chaining comes from the more common case where several method calls/getters are chained together. For instance:

let aTenant = aBuilding.tenantList[5]
let theirLease = aTenant.leaseDetails
let leaseStart = theirLease?.startDate
can be reduced to:
let leaseStart = aBuilding.tenantList[5].leaseDetails?.startDate

Swift's use of optionals allows the compiler to use static dispatch because the unwrapping action is called on a defined instance (the wrapper), versus occurring in a runtime dispatch system.
Value types[edit]

In many object-oriented languages, objects are represented internally in two parts. The object is stored as a block of data placed on the heap, while the name (or "handle") to that object is represented by a pointer. Objects are passed between

by a pointer. Objects are passed between methods by copying the value of the pointer, allowing the same underlying data on the heap to be accessed by anyone with a copy. In contrast, basic types like integers and floating-point values are

types like integers and floating-point values are represented directly; the handle contains the data, not a pointer to it, and that data is passed directly to methods by copying. These styles of access are termed pass-by-reference in the case of

are termed pass-by-reference in the case of objects, and pass-by-value for basic types.

Both concepts have their advantages and disadvantages. Objects are useful when the data is large, like the description of a window or the contents of a document. In these cases, access to that data is provided by copying a 32- or 64-bit value,

is provided by copying a 32- or 64-bit value, versus copying an entire data structure. However, smaller values like integers are the same size as pointers (typically both are one word), so there is no advantage to passing a pointer, versus passing

no advantage to passing a pointer, versus passing the value.

Swift offers built-in support for objects using either pass-by-reference or pass-by-value semantics, the former using the class declaration and the latter using struct. Structs in Swift have almost all the same features as classes: methods,

almost all the same features as classes: methods, implementing protocols and using the extension mechanisms. For this reason, Apple terms all data generically as instances, versus objects or values. Structs do not support inheritance, however.[83]

The programmer is free to choose which semantics are more appropriate for each data structure in the application. Larger structures like windows would be defined as classes, allowing them to be passed around as pointers. Smaller structures, like a

around as pointers. Smaller structures, like a 2D point, can be defined as structs, which will be pass-by-value and allow direct access to their internal data with no indirection or reference counting. The performance improvement inherent to the

The performance improvement inherent to the pass-by-value concept is such that Swift uses these types for almost all common data types, including Int and Double, and types normally represented by objects, like String and Array.[83] Using value types

like String and Array.[83] Using value types can result in significant performance improvements in user applications as well.[84]

Array, Dictionary, and Set all utilize copy on write so that their data are copied only if and when the program attempts to change a value in them. This means that the various accessors have what is in effect a pointer to the same data storage. So

in effect a pointer to the same data storage. So while the data is physically stored as one instance in memory, at the level of the application, these values are separate and physical separation is enforced by copy on write only if needed.[85]

Extensions[edit]

Extensions add new functionality to an existing type, without the need to subclass or even have access to the original source code. Extensions can add new methods, initializers, computed properties, subscripts, and protocol conformances.[86] An

subscripts, and protocol conformances.[86] An example might be to add a spell checker to the base String type, which means all instances of  String in the program gain the ability to spell-check. The system is also widely used as an organizational

system is also widely used as an organizational technique, allowing related code to be gathered into library-like extensions.

Extensions are declared with the extension keyword.struct Rectangle {
let width: Double
let height: Double
}
extension Rectangle {
var area: Double {
return height * width
}
}
Protocol-oriented programming[edit]

Protocols promise that a particular type implements a set of methods or properties, meaning that other instances in the system can call those methods on any instance implementing that protocol. This is often used in modern object-oriented languages

is often used in modern object-oriented languages as a substitute for multiple inheritance, although the feature sets are not entirely similar.

In Objective-C, and most other languages implementing the protocol concept, it is up to the programmer to ensure that the required methods are implemented in each class.[87] Swift adds the ability to add these methods using extensions, and to use

to add these methods using extensions, and to use generic programming (generics) to implement them. Combined, these allow protocols to be written once and support a wide variety of instances. Also, the extension mechanism can be used to add protocol

extension mechanism can be used to add protocol conformance to an object that does not list that protocol in its definition.[88]

For example, a protocol might be declared called Printable, which ensures that instances that conform to the protocol implement a description property and a printDetails() method requirement:
// Define a protocol named Printable
protocol Printable {

protocol Printable {
var description: String { get } // A read-only property requirement
func printDetails() // A method requirement
}
This protocol can now be adopted by other types:
// Adopt the Printable protocol in a class

// Adopt the Printable protocol in a class
class MyClass: Printable {
var description: String {
return "An instance of MyClass"
}
func printDetails() {
print(description)
}
}

Extensions can be used to add protocol conformance to types. Protocols themselves can also be extended to provide default implementations of their requirements. Adopters may define their own implementations, or they may use the default

own implementations, or they may use the default implementation:extension Printable { // All Printable instances will receive this implementation, or they may define their own.

func printDetails() {
print(description)
}
}
// Bool now conforms to Printable, and inherits the printDetails() implementation above.
extension Bool: Printable {
var description: String {
return "An instance of Bool with value: \(self)"
}
}

}
}
In Swift, like many modern languages supporting interfaces, protocols can be used as types, which means variables and methods can be defined by protocol instead of their specific type:
func getSomethingPrintable() -> any Printable {
return true

return true
}
var someSortOfPrintableInstance = getSomethingPrintable()
print(someSortOfPrintableInstance.description)
// Prints "An instance of Bool with value: true"

It does not matter what concrete type of someSortOfPrintableInstance is, the compiler will ensure that it conforms to the protocol and thus this code is safe. This syntax also means that collections can be based on protocols also, like let

can be based on protocols also, like let printableArray = [any Printable].

Both extensions and protocols are used extensively in Swift's standard library; in Swift 5.9, approximately 1.2 percent of all symbols within the standard library were protocols, and another 12.3 percent were protocol requirements or default

percent were protocol requirements or default implementations.[89] For instance, Swift uses extensions to add the Equatable protocol to many of their basic types, like Strings and Arrays, allowing them to be compared with the == operator. The

them to be compared with the == operator. The Equatable protocol also defines this default implementation:

func !=<T : Equatable>(lhs: T, rhs: T) -> Bool

This function defines a method that works on any instance conforming to Equatable, providing a not equals operator. Any instance, class or struct, automatically gains this implementation simply by conforming to Equatable.[90]

Protocols, extensions, and generics can be combined to create sophisticated APIs. For example, constraints allow types to conditionally adopt protocols or methods based on the characteristics of the adopting type. A common use case may be adding a

adopting type. A common use case may be adding a method on collection types only when the elements contained within the collection are Equatable:extension Array where Element: Equatable {

// allEqual will be available only on instances of Array that contain Equatable elements.
func allEqual() -> Bool {
for element in self {
if element != self.first {
return false
}
}
return true
}
}
Concurrency[edit]

Swift 5.5 introduced structured concurrency into the language.[91] Structured concurrency uses Async/await syntax similar to Kotlin, JavaScript, and Rust. An async function is defined with the async keyword after the parameter list. When calling an

keyword after the parameter list. When calling an async function the await keyword must be written before the function to indicate that execution will potentially suspend while calling function. While a function is suspended the program may run some

a function is suspended the program may run some other concurrent function in the same program. This syntax allows programs to clearly call out potential suspension points and avoid a version of the Pyramid of doom (programming) caused by the

the Pyramid of doom (programming) caused by the previously widespread use of closure callbacks.[92] func downloadText(name: String) async -> String {

let result = // ... some asynchronous downloading code ...
return result
}
let text = await downloadText("text1")

The async let syntax allows multiple functions to run in parallel. await is again used to mark the point at which the program will suspend to wait for the completion of the async functions called earlier.// Each of these calls to downloadText will

Each of these calls to downloadText will run in parallel.

async let text1 = downloadText(name: "text1")
async let text2 = downloadText(name: "text2")
async let text3 = downloadText(name: "text3")
let textToPrint = await [text1, text2, text3] // Suspends until all three downloadText calls have returned.

print(textToPrint)
Tasks and TaskGroups can be created explicitly to create a dynamic number of child tasks during runtime:let taskHandle = Task {
await downloadText(name: "someText")
}
let result = await taskHandle.value

Swift uses the Actor model to isolate mutable state, allowing different tasks to mutate shared state in a safe manner. Actors are declared with the actor keyword and are reference types, like classes. Only one task may access the mutable state of an

Only one task may access the mutable state of an actor at the same time. Actors may access and mutate their own internal state freely, but code running in separate tasks must mark each access with the await keyword to indicate that the code may

the await keyword to indicate that the code may suspend until other tasks finish accessing the actor's state.actor Directory {

var names: [String] = []
func add(name: String) {
names.append(name)
}
}
let directory = Directory()
// Code suspends until other tasks finish accessing the actor.
await directory.add(name: "Tucker")
print(await directory.names)

print(await directory.names)
Libraries, runtime, development[edit]

On Apple systems, Swift uses the same runtime as the extant Objective-C system, but requires iOS 7 or macOS 10.9 or higher. It also depends on Grand Central Dispatch.[93] Swift and Objective-C code can be used in one program, and by extension, C and

be used in one program, and by extension, C and C++ also. Beginning in Swift 5.9, C++ code can be used directly from Swift code.[94] In the case of Objective-C, Swift has considerable access to the object model, and can be used to subclass, extend

object model, and can be used to subclass, extend and use Objective-C code to provide protocol support.[95] The converse is not true: a Swift class cannot be subclassed in Objective-C.[96]

To aid development of such programs, and the re-use of extant code, Xcode 6 and higher offers a semi-automated system that builds and maintains a bridging header to expose Objective-C code to Swift. This takes the form of an additional header file

This takes the form of an additional header file that simply defines or imports all of the Objective-C symbols that are needed by the project's Swift code. At that point, Swift can refer to the types, functions, and variables declared in those

types, functions, and variables declared in those imports as though they were written in Swift. Objective-C code can also use Swift code directly, by importing an automatically maintained header file with Objective-C declarations of the project's

with Objective-C declarations of the project's Swift symbols. For instance, an Objective-C file in a mixed project called "MyApp" could access Swift classes or functions with the code #import "MyApp-Swift.h". Not all symbols are available through

Not all symbols are available through this mechanism, however—use of Swift-specific features like generic types, non-object optional types, sophisticated enums, or even Unicode identifiers may render a symbol inaccessible from Objective-C.[97]

Swift also has limited support for attributes, metadata that is read by the development environment, and is not necessarily part of the compiled code. Like Objective-C, attributes use the @ syntax, but the currently available set is small. One

but the currently available set is small. One example is the @IBOutlet attribute, which marks a given value in the code as an outlet, available for use within Interface Builder (IB). An outlet is a device that binds the value of the on-screen

is a device that binds the value of the on-screen display to an object in code.

On non-Apple systems, Swift does not depend on an Objective-C runtime or other Apple system libraries; a set of Swift "Corelib" implementations replace them. These include a "swift-corelibs-foundation" to stand in for the Foundation Kit, a

to stand in for the Foundation Kit, a "swift-corelibs-libdispatch" to stand in for the Grand Central Dispatch, and an "swift-corelibs-xctest" to stand in for the XCTest APIs from Xcode.[98]

As of 2019, with Xcode 11, Apple has also added a major new UI paradigm called SwiftUI.  SwiftUI replaces the older Interface Builder paradigm with a new declarative development paradigm.[99]
Memory management[edit]

Swift uses Automatic Reference Counting (ARC) to manage memory. Every instance of a class or closure maintains a reference count which keeps a running tally of the number of references the program is holding on to. When this count reaches 0 the

is holding on to. When this count reaches 0 the instance is deallocated. This automatic deallocation removes the need for a garbage collector as instances are deallocated as soon as they are no longer needed.

A strong reference cycle can occur if two instances each strongly reference each other (e.g. A references B, B references A). Since neither instances reference count can ever reach zero neither is ever deallocated, resulting in a memory leak. Swift

deallocated, resulting in a memory leak. Swift provides the keywords weak and unowned to prevent strong reference cycles. These keywords allow an instance to be referenced without incrementing its reference count. weak references must be optional

reference count. weak references must be optional variables, since they can change and become nil.[100] Attempting to access an unowned value that has already been deallocated results in a runtime error.

A closure within a class can also create a strong reference cycle by capturing self references. Self references to be treated as weak or unowned can be indicated using a capture list.class Person {
let name: String

let name: String
weak var home: Home? // Defined as a weak reference in order to break the reference cycle. weak references do not increment the reference count of the instance that they refer to.
init(name: String) {
self.name = name
}

init(name: String) {
self.name = name
}
deinit { print("De-initialized \(name)") }
}
class Home {
let address: String
var owner: Person?
init(address: String, owner: Person?) {
self.address = address
self.owner = owner
}

self.address = address
self.owner = owner
}
deinit { print("De-initialized \(address)") }
}
var stacy: Person? = Person(name: "Stacy")
var house21b: Home? = Home(address: "21b Baker Street", owner: stacy)

stacy?.home = house21b // stacy and house42b now refer to each other.
stacy = nil // The reference count for stacy is now 1, because house21b is still holding a reference to it.

house21b = nil // house21b's reference count drops to 0, which in turn drops stacy's count to 0 because house21b was the last instance holding a strong reference to stacy.
// Prints:
// De-initialized 21b Baker Street
// De-initialized Stacy

// De-initialized Stacy
Debugging[edit]

A key element of the Swift system is its ability to be cleanly debugged and run within the development environment, using a read–eval–print loop (REPL), giving it interactive properties more in common with the scripting abilities of Python than

with the scripting abilities of Python than traditional system programming languages. The REPL is further enhanced with playgrounds, interactive views running within the Xcode environment or Playgrounds app that respond to code or debugger changes

app that respond to code or debugger changes on-the-fly.[101] Playgrounds allow programmers to add in Swift code along with markdown documentation. Programmers can step through code and add breakpoints using LLDB either in a console or an IDE like

using LLDB either in a console or an IDE like Xcode.

Comparisons to other languages[edit]
Swift is considered a C family programming language and is similar to C in various ways:

Most operators in C also appear in Swift, although some operators such as + have slightly different behavior. For example, in Swift, + traps on overflow, whereas &+ is used to denote the C-like behavior of wrapping on overflow.

Curly braces are used to group statements.
Variables are assigned using an equals sign, but compared using two consecutive equals signs. A new identity operator, ===, is provided to check if two data elements refer to the same object.

Control statements while, if, and switch are similar, but have extended functions, e.g., a switch that takes non-integer cases, while and if supporting pattern matching and conditionally unwrapping optionals, for uses the for i in 1...10 syntax.

Square brackets are used with arrays, both to declare them and to get a value at a given index in one of them.
It also has similarities to Objective-C:
Basic numeric types: Int, UInt, Float, Double

Basic numeric types: Int, UInt, Float, Double
Class methods are inherited, like instance methods; self in class methods is the class the method was called on.
Similar for...in enumeration syntax.
Differences from Objective-C include:

Differences from Objective-C include:
Statements need not end with semicolons (;), though these must be used to allow more than one statement on one line.
No header files.
Uses type inference.
Generic programming.
Functions are first-class objects.

Functions are first-class objects.
Enumeration cases can have associated data (algebraic data types).
Operators can be redefined for classes (operator overloading), and new operators can be defined.

Strings fully support Unicode. Most Unicode characters can be used in either identifiers or operators.
No exception handling. Swift 2 introduces a different and incompatible error-handling model.[102]

Several features of earlier C-family languages that are easy to misuse have been removed:
Pointers are not exposed by default. There is no need for the programmer to keep track of and mark names for referencing or dereferencing.

Assignments return no value. This prevents the common error of writing i = 0 instead of i == 0 (which throws a compile-time error).

No need to use break statements in switch blocks. Individual cases do not fall through to the next case unless the fallthrough statement is used.
Variables and constants are always initialized and array bounds are always checked.

Integer overflows, which result in undefined behavior for signed integers in C, are trapped as a run-time error in Swift. Programmers can choose to allow overflows by using the special arithmetical operators &+, &-, &*, &/ and &%. The properties min

&+, &-, &*, &/ and &%. The properties min and max are defined in Swift for all integer types and can be used to safely check for potential overflows, versus relying on constants defined for each type in external libraries.

The one-statement form of if and while, which allows for the omission of braces around the statement, is unsupported.
C-style enumeration for (int i = 0; i < c; i++), which is prone to off-by-one errors, is unsupported (from Swift 3 onward).[103]

The pre- and post- increment and decrement operators (i++, --i ...) are unsupported (from Swift 3 onward), more so since C-style for statements are also unsupported from Swift 3 onward.[104]
Development and other implementations[edit]

Development and other implementations[edit]
Because Swift can run on Linux, it is sometimes also used as a server-side language.[105] Some web frameworks have already been developed, such as IBM's Kitura (now discontinued), Perfect and Vapor.

An official "Server APIs" work group has also been started by Apple,[106] with members of the Swift developer community playing a central role.[107]

A second free implementation of Swift that targets Cocoa, Microsoft's Common Language Infrastructure (.NET Framework, now .NET), and the Java and Android platform exists as part of the Elements Compiler from RemObjects Software.[108]

Subsets of Swift have been ported to additional platforms, such as Arduino[109] and Mac OS 9.[110]
See also[edit]
Computer programming portal
Comparison of programming languages
Objective-C
D (programming language)
Kotlin (programming language)

Kotlin (programming language)
Python (programming language)
Nim (programming language)
References[edit]
^ U.S. patent no. 9329844
^ "Swift Has Reached 1.0". Apple. September 9, 2014. Retrieved March 8, 2015.

^ . September 27, 2024 https://github.com/swiftlang/swift/releases/tag/swift-6.0.1-RELEASE. {{cite web}}: Missing or empty |title= (help)

^ "Swift, Objectively". Swift is proprietary and closed: It is entirely controlled by Apple and there is no open source implementation.

^ Lattner, Chris (June 11, 2014). "Re: [LLVMdev] [cfe-dev] [Advertisement] open positions in Apple's Swift compiler team". Archived from the original on July 14, 2014. Retrieved June 12, 2014. You can imagine that many of us want it to be open

can imagine that many of us want it to be open source and part of LLVM, but the discussion hasn't happened yet, and won't for some time.

^ "Chris Lattner's Homepage". Chris Lattner. June 3, 2014. Retrieved June 3, 2014. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important

optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing

by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.

^ a b Lattner, Chris (June 3, 2014). "Chris Lattner's Homepage". Chris Lattner. Retrieved June 3, 2014. I started work on the Swift Programming Language in July of 2010. I implemented much of the basic language structure, with only a few people

basic language structure, with only a few people knowing of its existence. A few other (amazing) people started contributing in earnest late in 2011, and it became a major focus for the Apple Developer Tools group in July 2013 [...] drawing ideas

Tools group in July 2013 [...] drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.

^ "Building assert() in Swift, Part 2: __FILE__ and __LINE__". Retrieved September 25, 2014.
^ "Influences - The Rust Reference". doc.rust-lang.org. Retrieved May 2, 2020.
^ "influenced by - V documentation". github.com. Retrieved November 3, 2023.

^ Lardinois, Frederic (June 2, 2014). "Apple Launches Swift, A New Programming Language For Writing iOS And OS X Apps". TechCrunch. Retrieved September 7, 2022.
^ Protocol-oriented Programming in Swift. Apple Inc. YouTube.

^ "Concepts are similar to Rust Traits".
^ Williams, Owen (June 2, 2014). "Tim Berners-Lee's sixtieth birthday Apple announces Swift, a new programming language for iOS". The Next Web. Retrieved June 2, 2014.

^ "Apple's new programming language Swift is now open source". The Verge. December 3, 2015. Retrieved December 5, 2015.

^ "Apple Open Sources Swift in Latest Pitch to the Enterprise". CIO Journal. The Wall Street Journal Blogs. December 3, 2015. Retrieved December 5, 2015.

^ "Looking back on Swift 3 and ahead to Swift 4". Swift Forums. July 29, 2016. Retrieved November 19, 2018.
^ "Swift-Evolution". Swift Evolution. Retrieved November 19, 2018.

^ "The RedMonk Programming Language Rankings: January 2018 – tecosystems". redmonk.com. March 7, 2018. Retrieved November 20, 2018.
^ Kremenek, Ted (March 25, 2019). "Swift 5 Released!".

^ Kremenek, Ted (September 20, 2019). "Swift 5.1 Released!". Archived from the original on February 26, 2022. Retrieved October 28, 2019.

^ Hudson, Paul (June 6, 2021). "What's new in Swift 5.5?". HackingWithSwift.com. Hacking with Swift. Retrieved June 8, 2021.
^ "Swift 5.9 Released". Swift.org. September 18, 2023. Retrieved October 9, 2023.

^ a b Borla, Holly (March 5, 2024). "Swift 5.10 Released". Swift.org. Retrieved March 13, 2024.
^ "Swift.org". Swift.org. March 2014. Retrieved April 28, 2024.

^ a b Platforms State of the Union, Session 102, Apple Worldwide Developers Conference, June 2, 2014
^ The Swift Programming Language. Apple. June 2, 2014. Retrieved June 2, 2014.
"Documentation". Swift.

"Documentation". Swift.
^ "Swift Has Reached 1.0". September 9, 2014. Retrieved September 10, 2014.
^ "Xcode 6.1 Release Notes". October 22, 2014. Retrieved January 23, 2015.
^ "Xcode 6.3 Release Notes". April 8, 2015. Retrieved April 8, 2015.

^ "Swift 2 Apps in the App Store". Swift Blog. Retrieved March 13, 2016.
^ "Swift 3.0 Released!". Swift.org. September 13, 2016. Archived from the original on October 14, 2016. Retrieved October 26, 2016.

^ "Swift 4.0 Released!". Swift.org. September 17, 2017. Archived from the original on March 28, 2019. Retrieved March 1, 2018.

^ "Swift 4.1 Released!". Swift.org. March 29, 2018. Archived from the original on April 25, 2019. Retrieved March 30, 2018.
^ "Stack Overflow Developer Survey Results 2015".
^ "Stack Overflow Developer Survey Results 2016".

^ "Stack Overflow Developer Survey Results 2016".
^ "Swift.org and Open Source". Swift.org. Apple Inc. Retrieved February 25, 2019.
^ "Introducing the IBM Swift Sandbox — Swift". Swift. Retrieved December 5, 2015.

^ Mayo, Benjamin (December 4, 2015). "Write Swift code in a web browser with the IBM Swift Sandbox". 9to5Mac. Retrieved December 5, 2015.
^ "After Apple open sources it, IBM puts Swift programming in the cloud". ZDNet. Retrieved December 5, 2015.

^ "Swift Package Catalog and Swift Sandbox Deprecation". Retrieved November 9, 2018.
^ "Swift Playgrounds". Apple Developer. Retrieved June 19, 2016.
^ "Swift Playgrounds — Preview". Apple. Retrieved June 19, 2016.

^ Mayo, Benjamin (June 13, 2016). "Apple announces Swift Playgrounds for iPad at WWDC, public release in fall". 9to5Mac. Retrieved June 19, 2016.

^ Cunningham, Andrew (January 10, 2017). "Longtime Apple programmer and Swift creator leaves Apple for Tesla". Ars Technica.

^ Wuerthele, Mike (January 13, 2017). "New Swift project head Ted Kremenek said to be running the show behind the scenes for some time". AppleInsider.

^ Daniel Eran Dilger (June 19, 2019). "WWDC19: SwiftUI was the brightest star in a galaxy of new ideas". AppleInsider. Retrieved July 19, 2019.
^ "Swift.org - Download Swift". Retrieved June 21, 2020.

^ "Android SDKs for Swift". GitHub. Retrieved September 10, 2021.
^ "swift-lang package versions". Retrieved September 10, 2021.
^ Readdle (January 15, 2020). "Swift for Android: Our Experience and Tools". Medium. Retrieved August 20, 2020.

^ Anderson, Tim (March 30, 2020). "Official tailored Swift for Windows support promised in 5.3: Swift on more platforms – provided you do not need a GUI". The Register. Retrieved September 18, 2020.

^ "The Swift Linux Port". Swift.org. Apple Inc. December 3, 2015. Retrieved August 3, 2016.
^ Timmer, John (June 5, 2014). "A fast look at Swift, Apple's new programming language". Ars Technica. Condé Nast. Retrieved June 6, 2014.

^ Kremenek, Ted (March 25, 2019). "Swift 5 Released!". Swift.org. Retrieved March 28, 2019.
^ "Download Swift". Swift.org. Apple. Retrieved December 15, 2020.

^ Kremenek, Ted (April 26, 2021). "Swift 5.4 Released!". Swift.org. Apple. Archived from the original on April 26, 2021. Retrieved April 26, 2021.
^ Kremenek, Ted (March 14, 2022). "Swift 5.6 Released!". Swift.org. Apple. Retrieved March 14, 2022.

^ "Release Swift 5.6.1 Release · apple/Swift". GitHub.
^ "Release Swift 5.6.2 Release · apple/Swift". GitHub.
^ "Release Swift 5.6.3 Release · apple/Swift". GitHub.

^ Borla, Holly (September 12, 2022). "Swift 5.7 Released!". Swift.org. Apple. Retrieved September 23, 2022.
^ "Release Swift 5.7.1 Release · apple/Swift". GitHub.
^ "Release Swift 5.8 Release · apple/Swift". GitHub.

^ "Release Swift 5.8.1 Release · apple/swift". GitHub. Retrieved June 14, 2023.
^ "Release Swift 5.9 Release · apple/swift". GitHub. Retrieved September 18, 2023.
^ "Release Swift 5.9.1 Release · apple/swift". GitHub. Retrieved October 19, 2023.

^ "Release Swift 5.9.2 Release · apple/swift". GitHub. Retrieved December 11, 2023.
^ "Swift 5.10.1 Release". GitHub. Retrieved June 5, 2024.
^ "Swift 6.0 Release". GitHub. Retrieved September 17, 2024.

^ "Documentation". docs.swift.org. Retrieved November 17, 2023.
^ "Eliminate data races using Swift Concurrency - WWDC22 - Videos". Apple Inc. Retrieved November 17, 2023.
^ a b "Documentation". docs.swift.org. Retrieved October 15, 2023.

^ "Documentation". docs.swift.org. Retrieved October 15, 2023.
^ "Closures — The Swift Programming Language (Swift 5.5)". docs.swift.org. Retrieved August 31, 2021.

^ Macomber, Kyle; Yaskevich, Yavel; Gregor, Doug; McCall, John. "Multiple Trailing Closures". GitHub. Retrieved October 19, 2020.
^ "Documentation". docs.swift.org. Retrieved October 16, 2023.

^ "Strings and Characters". docs.swift.org. Retrieved October 16, 2023.
^ "Declarations — The Swift Programming Language (Swift 5.6)". docs.swift.org. Retrieved February 28, 2022.

^ "Access Control". The Swift Programming Language. Apple Developer. Retrieved October 25, 2016.
^ "Nullable Types", C# Programming Guide, Microsoft. Archived February 21, 2017, at the Wayback Machine.

^ "Types". The Swift Programming Language. Apple Developer. Retrieved July 16, 2014.
^ a b "Classes and Structures". The Swift Programming Language. Apple Developer. Archived from the original on March 25, 2016.

^ Guhit, Fiel (February 14, 2015). "Performance Case Study on Swift 1.1, Swift 1.2, and Objective-C". Medium. Archived from the original on December 12, 2023.

^ Building Better Apps with Value Types. Apple. Archived from the original on June 21, 2015.
^ "Extensions". docs.swift.org. Retrieved November 28, 2023.

^ "Working with Protocols". Programming with Objective-C. Apple Developer Documentation Archive. September 17, 2014. Archived from the original on April 29, 2016.
^ "NSCopying Protocol Reference". Apple.

^ "NSCopying Protocol Reference". Apple.
^ "Swift standard library statistics". swiftinit.org. Swiftinit. Retrieved October 2, 2023.
^ Thompson, Mattt (September 2, 2014). "Swift Default Protocol Implementations". NSHipster.

^ "swift-evolution/proposals/0304-structured-concurrency.md at main · apple/swift-evolution". GitHub. Retrieved October 16, 2023.
^ "swift-evolution/proposals/0296-async-await.md at main · apple/swift-evolution". GitHub. Retrieved October 16, 2023.

^ "Do Swift-based apps work on macOS 10.9/iOS 7 and lower?", StackOverflow
^ Inc, Apple (September 18, 2023). "Swift 5.9 Released". Swift.org. Retrieved October 9, 2023. {{cite web}}: |last= has generic name (help)

^ "Writing Swift Classes with Objective-C Behavior", Apple Inc.
^ "Migrating Your Objective-C Code to Swift".
^ "Swift and Objective-C in the Same Project", Apple Inc.
^ "Apple: search "corelib"". GitHub.

^ "Apple: search "corelib"". GitHub.
^ "Xcode - SwiftUI- Apple Developer". developer.apple.com. Retrieved February 1, 2021.
^ Lanier, Brian; Groff, Joe. "Intermediate Swift". Apple. Retrieved July 3, 2014.

^ Metz, Cade. "Why Coders Are Going Nuts Over Apple's New Programming Language". Wired. Retrieved July 16, 2014.
^ "Error-Handling in Swift-Language". stackoverflow.com.
^ "apple/swift-evolution". GitHub. Retrieved April 4, 2016.

^ "apple/swift-evolution". GitHub. Retrieved April 4, 2016.
^ Barbosa, Greg (February 22, 2016). "IBM brings Swift to the cloud, releases web framework Kitura written in Apple's programming language". 9to5Mac. Retrieved May 16, 2016.

^ "Server APIs Work Group". Swift.org. October 25, 2016. Retrieved October 28, 2016.
^ "Swift.org". Swift.org. Archived from the original on May 10, 2021. Retrieved October 28, 2016.
^ "RemObjects Elements Compiler". Retrieved January 17, 2016.

^ "Swift for Arduino".
^ Rose, Jordan (April 1, 2020). "Swift on Mac OS 9". -dealloc.
External links[edit]
Official website
Swift at Apple Developer
Swift source code on GitHub
Swift Example
Server-side Swift: The Vapor Framework

Server-side Swift: The Vapor Framework
vteProgramming languages
Comparison
Timeline
History
Ada
ALGOL
Simula
APL
Assembly
BASIC
Visual Basic
classic
.NET
C
C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Julia
Kotlin
Lisp
Lua
MATLAB
ML

Java
JavaScript
Julia
Kotlin
Lisp
Lua
MATLAB
ML
Pascal
Object Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Scratch
Shell
Smalltalk
Swift
more...
Lists: Alphabetical
Categorical
Generational
Non-English-based
Category

Generational
Non-English-based
Category
vteSoftware by AppleOperating systems
Apple DOS
Apple III (SOS)
Classic Mac OS
Darwin
iOS
iPadOS
GS/OS
Lisa OS
macOS (OS X)
MacWorks XL
ProDOS
tvOS
visionOS
watchOS
Consumer
Bento
Clips
Final Cut Express

watchOS
Consumer
Bento
Clips
Final Cut Express
Front Row
GarageBand
iCloud
iDVD
iLife
iMovie
iTunes
iWork
Keynote
Pages
Numbers
iPhoto
Logic Express
Professional
Aperture
Apple Media Tool
Apple Qmaster
Color
DVD Studio Pro
FileMaker
Final Cut Pro

Color
DVD Studio Pro
FileMaker
Final Cut Pro
Motion
Compressor
Final Cut Studio
Cinema Tools
Logic Studio
Logic Pro
MacProject
MacTerminal
MainStage
Shake
Soundtrack Pro
Education
Classroom
Bundled
AppleWorks
Books
Calendar
Contacts
Mail
Messages

AppleWorks
Books
Calendar
Contacts
Mail
Messages
FaceTime
MacDraw
MacPaint
MacWrite
Music
Passwords
Photo Booth
Photos
Podcasts
Safari
TextEdit
Server
Apple Remote Desktop
FoundationDB
macOS Server
WebObjects
Xgrid
Xsan
Developer
HyperCard

WebObjects
Xgrid
Xsan
Developer
HyperCard
iBooks Author
Instruments
Interface Builder
Quartz Composer
ResEdit
Swift
Xcode
Internet
.Mac
Dashcode
iAd Producer
iChat
iWeb
MobileMe
on Windows
AirPort Utility
AppleWorks
Bonjour
Boot Camp
iCloud
iTunes

AppleWorks
Bonjour
Boot Camp
iCloud
iTunes
MobileMe
QuickTime
Software Update
List of Apple II application software • List of Mac software • List of old Macintosh software

Authority control databases: National GermanyUnited StatesFranceBnF dataIsrael
Retrieved from "https://en.wikipedia.org/w/index.php?title=Swift_(programming_language)&oldid=1247277508"

Categories: Swift (programming language)Apple Inc. softwareProgramming languagesHigh-level programming languagesDeclarative programming languagesObject-oriented programming languagesFunctional languagesPattern matching programming

languagesPattern matching programming languagesProgramming languages created in 2014Statically typed programming languagesSystems programming languagesCross-platform free softwareSoftware using the Apache licenseHidden categories: CS1 errors:

the Apache licenseHidden categories: CS1 errors: missing titleCS1 errors: bare URLWebarchive template wayback linksCS1 errors: generic nameArticles with short descriptionShort description is different from WikidataUse mdy dates from October

different from WikidataUse mdy dates from October 2018Wikipedia articles that are too technical from June 2018All articles that are too technicalArticles with excerptsArticles with example Swift code

This page was last edited on 23 September 2024, at 16:22 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License;

additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policy
About Wikipedia
Disclaimers

Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view

PHP - Wikipedia
Jump to content
Main menu
Main menu
move to sidebar
hide
Navigation
Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us
Contribute
HelpLearn to editCommunity portalRecent changesUpload file
Search
Search
Donate

Search
Search
Donate
Appearance
Create account
Log in
Personal tools
Create account Log in
Pages for logged out editors learn more
ContributionsTalk
Contents
move to sidebar
hide
(Top)
1
History
Toggle History subsection
1.1
Early history
1.2

Toggle History subsection
1.1
Early history
1.2
PHP 3 and 4
1.3
PHP 5
1.4
PHP 6 and Unicode
1.5
PHP 7
1.6
PHP 8
1.6.1
Just-in-time compilation
1.6.2
Addition of the match expression
1.6.3
Type changes and additions
1.6.4
Syntax changes and additions

1.6.4
Syntax changes and additions
1.6.5
Standard library changes and additions
1.6.6
Additional changes
1.7
PHP 8.1
1.8
PHP 8.2
1.9
Release history
2
Mascot
3
Syntax
Toggle Syntax subsection
3.1
Data types
3.2
Functions
3.3
PHP objects
3.3.1

Data types
3.2
Functions
3.3
PHP objects
3.3.1
Example
4
Implementations
5
Licensing
6
Development and community
7
The PHP Foundation
8
Installation and configuration
9
Use
Toggle Use subsection
9.1
Popularity and usage statistics
10
Security

9.1
Popularity and usage statistics
10
Security
Toggle Security subsection
10.1
Cryptographic Security
10.2
Long Term Support
11
See also
12
References
13
Further reading
14
External links
Toggle the table of contents
PHP
116 languages

AfrikaansAlemannischالعربيةAragonésAsturianuAzərbaycancaবাংলা閩南語 / Bân-lâm-gúБеларускаяБеларуская

/ Bân-lâm-gúБеларускаяБеларуская (тарашкевіца)भोजपुरीБългарскиBoarischBosanskiBrezhonegCatalàCebuanoČeštinaCymraegDanskDeutschEestiΕλληνικάEspañolEsperantoEuskaraفارسیFrançaisGalegoગુજરાતી客家語 / Hak-kâ-ngî한국어Հայերենहिन्दीHrvatskiIdoBahasa

/ Hak-kâ-ngî한국어Հայերենहिन्दीHrvatskiIdoBahasa IndonesiaInterlinguaÍslenskaItalianoעבריתJawaಕನ್ನಡქართულიҚазақшаKiswahiliKreyòl ayisyenKurdîКыргызчаLatinaLatviešuLëtzebuergeschLietuviųLingua Franca

Franca NovaLombardMagyarMadhurâमैथिलीМакедонскиMalagasyമലയാളംमराठीBahasa MelayuMinangkabau閩東語 / Mìng-dĕ̤ng-ngṳ̄Монголမြန်မာဘာသာNederlandsनेपालीनेपाल भाषा日本語НохчийнNorsk bokmålNorsk nynorskOccitanOʻzbekcha /

bokmålNorsk nynorskOccitanOʻzbekcha / ўзбекчаپنجابیភាសាខ្មែរPlattdüütschPolskiPortuguêsQaraqalpaqshaRomânăRuna SimiРусскийСаха тылаसंस्कृतम्ShqipසිංහලSimple EnglishSlovenčinaSlovenščinaکوردیСрпски / srpskiSrpskohrvatski /

/ srpskiSrpskohrvatski / српскохрватскиSuomiSvenskaTagalogதமிழ்TaqbaylitไทยТоҷикӣTürkçeTürkmençeУкраїнськаاردوTiếng ViệtVõroWest-VlamsWinarayWolof吴语ייִדיש粵語Žemaitėška中文

Edit links
ArticleTalk
English
ReadEditView history
Tools
Tools
move to sidebar
hide
Actions
ReadEditView history
General

hide
Actions
ReadEditView history
General
What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationCite this pageGet shortened URLDownload QR codeWikidata item
Print/export
Download as PDFPrintable version

Print/export
Download as PDFPrintable version
In other projects
Wikimedia CommonsWikiversity
Appearance
move to sidebar
hide
From Wikipedia, the free encyclopedia
Scripting language created in 1994

Scripting language created in 1994
This article is about the scripting language. For other uses, see PHP (disambiguation).

PHPParadigmMulti-paradigm: imperative, functional, object-oriented, procedural, reflectiveDesigned byRasmus LerdorfDeveloperThe PHP Development Team, Zend Technologies, PHP FoundationFirst appeared8 June 1995; 29 years ago (1995-06-08)[1][2]Stable

1995; 29 years ago (1995-06-08)[1][2]Stable release8.3.12

/ 26 September 2024; 16 days ago (2024-09-26)[3]Preview release8.4.0 RC 2
/ 10 October 2024; 2 days ago (2024-10-10)[4]

Typing disciplineDynamic, weak, gradual[5]Implementation languageC (primarily; some components C++)OSUnix-like, Windows, macOS, IBM i, OpenVMS, IBM ZLicensedual licensed GNU General Public License version 2 or any later version and PHP License for

2 or any later version and PHP License for PHP versions 3.0 or earlier.[6] Only PHP License (most of Zend engine under Zend Engine License) for 3.01x and later versions.Filename extensions.php,.phar,.phtml,.pht,.phpsWebsitewww.php.net Major

Major implementationsZend Engine, HHVM, PeachPie, Quercus, ParrotInfluenced byPerl, C, C++, Java,[7] Tcl,[2] JavaScript[8]InfluencedHack, JSP, ASP, React JS

PHP Programming at Wikibooks

PHP is a general-purpose scripting language geared towards web development.[9] It was originally created by Danish-Canadian programmer Rasmus Lerdorf in 1993 and released in 1995.[10][11] The PHP reference implementation is now produced by the PHP

implementation is now produced by the PHP Group.[12] PHP was originally an abbreviation of Personal Home Page,[13][14] but it now stands for the recursive acronym PHP: Hypertext Preprocessor.[15]

PHP code is usually processed on a web server by a PHP interpreter implemented as a module, a daemon or a Common Gateway Interface (CGI) executable. On a web server, the result of the interpreted and executed PHP code—which may be any type of data,

executed PHP code—which may be any type of data, such as generated HTML or binary image data—would form the whole or part of an HTTP response. Various web template systems, web content management systems, and web frameworks exist that can be

systems, and web frameworks exist that can be employed to orchestrate or facilitate the generation of that response. Additionally, PHP can be used for many programming tasks outside the web context, such as standalone graphical applications[16] and

such as standalone graphical applications[16] and drone control.[17] PHP code can also be directly executed from the command line.

The standard PHP interpreter, powered by the Zend Engine, is free software released under the PHP License. PHP has been widely ported and can be deployed on most web servers on a variety of operating systems and platforms.[18]

The PHP language has evolved without a written formal specification or standard, with the original implementation acting as the de facto standard that other implementations aimed to follow.

W3Techs reports that as of 23 May 2024[update] (the six months after the PHP 8.3 release), PHP is used by 76.2% of all websites whose programming language could be determined, and 55.1% thereof use PHP 7 which is outdated and known to be

use PHP 7 which is outdated and known to be insecure.[19][20]

History[edit]
Rasmus Lerdorf, creator of PHP; and Andi Gutmans and Zeev Suraski, creators of the Zend Engine
Early history[edit]

PHP development began in 1993[10] when Rasmus Lerdorf wrote several Common Gateway Interface (CGI) programs in C,[21][22] which he used to maintain his personal homepage. He extended them to work with web forms and to communicate with databases, and

web forms and to communicate with databases, and called this implementation "Personal Home Page/Forms Interpreter" or PHP/FI.

An example of the early PHP syntax:[23]
<!--include /text/header.html-->
<!--getenv HTTP_USER_AGENT-->
<!--if substr $exec_result Mozilla-->
Hey, you are using Netscape!<p>
<!--endif-->
<!--sql database select * from table where user='$username'-->

<!--ifless $numentries 1-->
Sorry, that record does not exist<p>
<!--endif exit-->
Welcome <!--$user-->!<p>
You have <!--$index:0--> credits left in your account.<p>
<!--include /text/footer.html-->

PHP/FI could be used to build simple, dynamic web applications. To accelerate bug reporting and improve the code, Lerdorf initially announced the release of PHP/FI as "Personal Home Page Tools (PHP Tools) version 1.0" on the Usenet discussion group

version 1.0" on the Usenet discussion group comp.infosystems.www.authoring.cgi on 8 June 1995.[1][24] This release included basic functionality such as Perl-like variables, form handling, and the ability to embed HTML. By this point, the syntax had

to embed HTML. By this point, the syntax had changed to resemble that of Perl, but was simpler, more limited, and less consistent.[13][12]

Early PHP was never intended to be a new programming language; rather, it grew organically, with Lerdorf noting in retrospect: "I don't know how to stop it [...] there was never any intent to write a programming language [...] I have absolutely no

a programming language [...] I have absolutely no idea how to write a programming language [...] I just kept adding the next logical step on the way."[25] A development team began to form and, after months of work and beta testing, officially

after months of work and beta testing, officially released PHP/FI 2 in November 1997.[26]

The fact that PHP was not originally designed, but instead was developed organically has led to inconsistent naming of functions and inconsistent ordering of their parameters.[27] In some cases, the function names were chosen to match the

the function names were chosen to match the lower-level libraries which PHP was "wrapping",[28] while in some very early versions of PHP the length of the function names was used internally as a hash function, so names were chosen to improve the

function, so names were chosen to improve the distribution of hash values.[29]

PHP 3 and 4[edit]
This is an example of PHP code for the WordPress content management system.

Zeev Suraski and Andi Gutmans rewrote the parser in 1997 and formed the base of PHP 3, changing the language's name to the recursive acronym PHP: Hypertext Preprocessor.[12][30] Afterwards, public testing of PHP 3 began, and the official launch came

of PHP 3 began, and the official launch came in June 1998. Suraski and Gutmans then started a new rewrite of PHP's core, producing the Zend Engine in 1999.[31] They also founded Zend Technologies in Ramat Gan, Israel.[12]

On 22 May 2000, PHP 4, powered by the Zend Engine 1.0, was released.[12] By August 2008, this branch had reached version 4.4.9. PHP 4 is now no longer under development and nor are any security updates planned to be released.[32][33]
PHP 5[edit]

On 1 July 2004, PHP 5 was released, powered by the new Zend Engine II.[12] PHP 5 included new features such as improved support for object-oriented programming, the PHP Data Objects (PDO) extension (which defines a lightweight and consistent

(which defines a lightweight and consistent interface for accessing databases), and numerous performance enhancements.[34] In 2008, PHP 5 became the only stable version under development. Late static binding had been missing from previous versions

binding had been missing from previous versions of PHP, and was added in version 5.3.[35][36]

Many high-profile open-source projects ceased to support PHP 4 in new code from February 5, 2008, because of the GoPHP5 initiative,[37] provided by a consortium of PHP developers promoting the transition from PHP 4 to PHP 5.[38][39]

Over time, PHP interpreters became available on most existing 32-bit and 64-bit operating systems, either by building them from the PHP source code or by using pre-built binaries.[40] For PHP versions 5.3 and 5.4, the only available Microsoft

5.3 and 5.4, the only available Microsoft Windows binary distributions were 32-bit IA-32 builds,[41][42] requiring Windows 32-bit compatibility mode while using Internet Information Services (IIS) on a 64-bit Windows platform. PHP version 5.5 made

a 64-bit Windows platform. PHP version 5.5 made the 64-bit x86-64 builds available for Microsoft Windows.[43]

Official security support for PHP 5.6 ended on 31 December 2018.[44]
PHP 6 and Unicode[edit]

PHP received mixed reviews due to lacking native Unicode support at the core language level.[45][46] In 2005, a project headed by Andrei Zmievski was initiated to bring native Unicode support throughout PHP, by embedding the International Components

PHP, by embedding the International Components for Unicode (ICU) library, and representing text strings as UTF-16 internally.[47] Since this would cause major changes both to the internals of the language and to user code, it was planned to release

and to user code, it was planned to release this as version 6.0 of the language, along with other major features then in development.[48]

However, a shortage of developers who understood the necessary changes, and performance problems arising from conversion to and from UTF-16, which is rarely used in a web context, led to delays in the project.[49] As a result, a PHP 5.3 release was

project.[49] As a result, a PHP 5.3 release was created in 2009, with many non-Unicode features back-ported from PHP 6, notably namespaces. In March 2010, the project in its current form was officially abandoned, and a PHP 5.4 release was prepared

abandoned, and a PHP 5.4 release was prepared to contain most remaining non-Unicode features from PHP 6, such as traits and closure re-binding.[50] Initial hopes were that a new plan would be formed for Unicode integration, but by 2014 none had been

Unicode integration, but by 2014 none had been adopted.[citation needed]

PHP 7[edit]

During 2014 and 2015, a new major PHP version was developed, PHP 7. The numbering of this version involved some debate among internal developers.[51] While the PHP 6 Unicode experiments had never been released, several articles and book titles

been released, several articles and book titles referenced the PHP 6 names, which might have caused confusion if a new release were to reuse the name.[52] After a vote, the name PHP 7 was chosen.[53]

The foundation of PHP 7 is a PHP branch that was originally dubbed PHP next generation (phpng). It was authored by Dmitry Stogov, Xinchen Hui and Nikita Popov,[54] and aimed to optimize PHP performance by refactoring the Zend Engine while retaining

by refactoring the Zend Engine while retaining near-complete language compatibility.[55] By 14 July 2014, WordPress-based benchmarks, which served as the main benchmark suite for the phpng project, showed an almost 100% increase in performance.

showed an almost 100% increase in performance. Changes from phpng make it easier to improve performance in future versions, as more compact data structures and other changes are seen as better suited for a successful migration to a just-in-time

for a successful migration to a just-in-time (JIT) compiler.[56] Because of the significant changes, the reworked Zend Engine was called Zend Engine 3, succeeding Zend Engine 2 used in PHP 5.[57]

Because of the major internal changes in phpng, it must receive a new major version number of PHP, rather than a minor PHP 5 release, according to PHP's release process.[58] Major versions of PHP are allowed to break backward-compatibility of code

allowed to break backward-compatibility of code and therefore PHP 7 presented an opportunity for other improvements beyond phpng that require backward-compatibility breaks.[citation needed] In particular, it involved the following changes:

Many fatal or recoverable-level legacy PHP error mechanisms were replaced with modern object-oriented exceptions.[59]

The syntax for variable dereferencing was reworked to be internally more consistent and complete, allowing the use of the operators ->, [], (),{}, and ::, with arbitrary meaningful left-side expressions.[60]

Support for legacy PHP 4-style constructor methods was deprecated.[61]
The behavior of the foreach statement was changed to be more predictable.[62]

Constructors for the few classes built-in to PHP which returned null upon failure were changed to throw an exception instead, for consistency.[63]

Several unmaintained or deprecated server application programming interfaces (SAPIs) and extensions were removed from the PHP core, most notably the legacy mysql extension.[64]

The behavior of the list() operator was changed to remove support for strings.[65]
Support was removed for legacy ASP-style delimiters <% and %> and <script language="php"> ... </script>.[66]

An oversight allowing a switch statement to have multiple default clauses was fixed.[67]
Support for hexadecimal number support in some implicit conversions from strings to number types was removed.[68]

The left-shift and right-shift operators were changed to behave more consistently across platforms.[69]

Conversions between floating-point numbers and integers were changed (e.g. infinity changed to convert to zero) and implemented more consistently across platforms.[69][70]

PHP 7 also included new language features. Most notably, it introduced return type declarations for functions[71] which complement the existing parameter type declarations, and support for the scalar types (integer, float, string, and boolean) in

types (integer, float, string, and boolean) in parameter and return type declarations.[72]

PHP 8[edit]
PHP 8 was released on 26 November 2020, and is currently the second-most used PHP major version. PHP 8 is a major version and has breaking changes from previous versions.[73][74] New features and notable changes include:

Just-in-time compilation[edit]
Just-in-time compilation is supported in PHP 8.[75]

PHP 8's JIT compiler can provide substantial performance improvements for some use cases,[76][77] while PHP developer Nikita Popov stated that the performance improvements for most websites will be less substantial than the upgrade from PHP 5 to

less substantial than the upgrade from PHP 5 to PHP 7.[78] Substantial improvements are expected more for mathematical-type operations than for common web-development use cases.[78] Additionally, the JIT compiler provides the future potential to

the JIT compiler provides the future potential to move some code from C to PHP, due to the performance improvements for some use cases.[79]

Addition of the match expression[edit]
Main article: PHP syntax and semantics § Match expression

PHP 8 introduced the match expression.[80] The match expression is conceptually similar to a switch statement and is more compact for some use cases.[81] Because match is an expression, its result can be assigned to a variable or returned from a

can be assigned to a variable or returned from a function.[82]

Type changes and additions[edit]
PHP 8 introduced union types, a new static return type, and a new mixed type.[73]

"Attributes", often referred to as "annotations" in other programming languages, were added in PHP 8, which allow metadata to be added to classes.[73]

throw was changed from being a statement to being an expression.[83] This allows exceptions to be thrown in places that were not previously possible.[73]
Syntax changes and additions[edit]

PHP 8 includes changes to allow alternate, more concise, or more consistent syntaxes in a number of scenarios. For example, the nullsafe operator is similar to the null coalescing operator ??, but used when calling methods.[84] The following code

used when calling methods.[84] The following code snippet will not throw an error if getBirthday() returns null:

$human_readable_date = $user->getBirthday()?->diffForHumans();

Constructor property promotion has been added as "syntactic sugar," allowing class properties to be set automatically when parameters are passed into a class constructor.[73] This reduces the amount of boilerplate code that must be written.[85]

Other minor changes include support for use of ::class on objects, which serves as an alternative for the use of get_class();[73] non-capturing catches in try-catch blocks; variable syntax tweaks to resolve inconsistencies; support for named

to resolve inconsistencies; support for named arguments; and support for trailing commas in parameter lists, which adds consistency with support for trailing commas in other contexts, such as in arrays.[74]

Standard library changes and additions[edit]

Weak maps were added in PHP 8. A WeakMap holds references to objects, but these references do not prevent such objects from being garbage collected.[86] This can provide performance improvements in scenarios where data is being cached; this is of

scenarios where data is being cached; this is of particular relevance for object–relational mappings (ORM).[73]

Various adjustments to interfaces, such as adding support for creating DateTime objects from interfaces, and the addition of a Stringable interface that can be used for type hinting.[73]

Various new functions including str_contains(), str_starts_with(), and str_ends_with();[87] fdiv(); get_debug_type(); and get_resource_id()[73]
Object implementation of token_get_all()[73]
Additional changes[edit]

Additional changes[edit]
Type annotations were also added into PHP's C source code itself to allow internal functions and methods to have "complete type information in reflection."[88]
Inheritance with private methods[73]

Inheritance with private methods[73]
Abstract methods in traits improvements[73]
PHP 8.1[edit]

PHP 8.1 was released on November 25, 2021.[89] It added support for enumerations (also called "enums"), declaring properties as readonly (which prevents modification of the property after initialization), and array unpacking with string keys. The

and array unpacking with string keys. The new never type can be used to indicate that a function does not return.[90]

PHP 8.2[edit]

PHP 8.2 was released on December 8, 2022.[91] New in this release are readonly classes (whose instance properties are implicitly readonly), disjunctive normal form (DNF) types, and the random extension, which provides a pseudorandom number generator

which provides a pseudorandom number generator with an object-oriented API,[92] Sensitive Parameter value redaction, and a ton of other features.

Release history[edit]
Version
Release date
Supported until[93]
Notes
Old version, no longer maintained:  1.0
8 June 1995
Officially called "Personal Home Page Tools (PHP Tools)". This is the first use of the name "PHP".[12]

Old version, no longer maintained:  2.0
1 November 1997
Officially called "PHP/FI 2.0". This is the first release that could actually be characterised as PHP, being a standalone language with many features that have endured to the present day.

Old version, no longer maintained:  3.0
6 June 1998
20 October 2000[93]
Development moves from one person to multiple developers. Zeev Suraski and Andi Gutmans rewritten the base for this version.[12]
Old version, no longer maintained:  4.0

Old version, no longer maintained:  4.0
22 May 2000[94]
23 June 2001[93]
Added more advanced two-stage parse/execute tag-parsing system called the Zend engine.[95]
Old version, no longer maintained:  4.1
10 December 2001[96]
12 March 2002[93]

10 December 2001[96]
12 March 2002[93]
Introduced "superglobals" ($_GET, $_POST, $_SESSION, etc.)[95]
Old version, no longer maintained:  4.2
22 April 2002[97]
6 September 2002[93]

22 April 2002[97]
6 September 2002[93]
Disabled register_globals by default. Data received over the network is not inserted directly into the global namespace anymore, closing possible security holes in applications.[95]

Old version, no longer maintained:  4.3
27 December 2002[98]
31 March 2005[93]
Introduced the command-line interface (CLI), to supplement the CGI.[95][99]
Old version, no longer maintained:  4.4
11 July 2005[100]
7 August 2008[93]

11 July 2005[100]
7 August 2008[93]
Fixed a memory corruption bug, which required breaking binary compatibility with extensions compiled against PHP version 4.3.x.[101]
Old version, no longer maintained:  5.0
13 July 2004[102]
5 September 2005[93]

13 July 2004[102]
5 September 2005[93]
Zend Engine II with a new object model.[103]
Old version, no longer maintained:  5.1
24 November 2005[104]
24 August 2006[93]

24 November 2005[104]
24 August 2006[93]
Performance improvements with the introduction of compiler variables in re-engineered PHP Engine.[103] Added PHP Data Objects (PDO) as a consistent interface for accessing databases.[105]

Old version, no longer maintained:  5.2
2 November 2006[106]
6 January 2011[93]
Enabled the filter extension by default. Native JSON support.[103]
Old version, no longer maintained:  5.3
30 June 2009[107]
14 August 2014[93]

Namespace support; late static bindings, jump label (limited goto), anonymous functions, closures, PHP archives (phar), garbage collection for circular references, improved Windows support, sqlite3, mysqlnd as a replacement for libmysql as the

mysqlnd as a replacement for libmysql as the underlying library for the extensions that work with MySQL, fileinfo as a replacement for mime_magic for better MIME support, the Internationalization extension, and deprecation of ereg extension.

Old version, no longer maintained:  5.4
1 March 2012[108]
3 September 2015[93]

Trait support, short array syntax support. Removed items: register_globals, safe_mode, allow_call_time_pass_reference, session_register(), session_unregister() and session_is_registered(). Built-in web server.[109] Several improvements to existing

web server.[109] Several improvements to existing features, performance and reduced memory requirements.

Old version, no longer maintained:  5.5
20 June 2013[110]
10 July 2016[111]
Support for generators, finally blocks for exceptions handling, OpCache (based on Zend Optimizer+) bundled in official distribution.[112]

Old version, no longer maintained:  5.6
28 August 2014[113]
31 December 2018[111]

Constant scalar expressions, variadic functions, argument unpacking, new exponentiation operator, extensions of the use statement for functions and constants, new phpdbg debugger as a SAPI module, and other smaller improvements.[114]
6.x

6.x
Not released
—
Abandoned version of PHP that planned to include native Unicode support.[115][116]
Old version, no longer maintained:  7.0
3 December 2015[117]
10 January 2019[58]

Zend Engine 3 (performance improvements[56] and 64-bit integer support on Windows[118]), uniform variable syntax,[60] AST-based compilation process,[119] added Closure::call(),[120] bitwise shift consistency across platforms,[121] ?? (null coalesce)

across platforms,[121] ?? (null coalesce) operator,[122] Unicode code point escape syntax,[123] return type declarations,[71] scalar type (integer, float, string and boolean) declarations,[72] <=> "spaceship" three-way comparison operator,[124]

"spaceship" three-way comparison operator,[124] generator delegation,[125] anonymous classes,[126] simpler and more consistently available CSPRNG API,[127] replacement of many remaining internal PHP "errors" with the more modern exceptions,[59] and

"errors" with the more modern exceptions,[59] and shorthand syntax for importing multiple items from a namespace.[128]

Old version, no longer maintained:  7.1
1 December 2016
1 December 2019[111]
iterable type,[129] nullable types,[130] void return type,[131] class constant visibility modifiers,[132] short list syntax,[133] multi-catch[134]

Old version, no longer maintained:  7.2
30 November 2017
30 November 2020[111]
Object parameter and return type declaration,[135] libsodium extension,[136] abstract method overriding,[137] parameter type widening[138]

Old version, no longer maintained:  7.3
6 December 2018[139]
6 December 2021
Flexible Heredoc and Nowdoc syntax,[140] support for reference assignment and array deconstruction with list(),[141] PCRE2 support,[142] hrtime function[143]

Old version, no longer maintained:  7.4
28 November 2019[144]
28 November 2022

Typed properties 2.0,[145] preloading,[146] null-coalescing assignment operator,[147] improve openssl_random_pseudo_bytes,[148] weak references,[86] foreign function interface (FFI),[149] always available hash extension,[150] password hash

available hash extension,[150] password hash registry,[151] multibyte string splitting,[152] reflection for references,[153] unbundle ext/wddx,[154] new custom object serialization mechanism[155]

Old version, no longer maintained:  8.0
26 November 2020[156]
26 November 2023

Just-In-Time (JIT) compilation,[75] arrays starting with a negative index,[157] stricter/saner language semantics (validation for abstract trait methods),[158] saner string to number comparisons,[159] saner numeric strings,[160] TypeError on invalid

saner numeric strings,[160] TypeError on invalid arithmetic/bitwise operators,[161] reclassification of various engine errors,[162] consistent type errors for internal functions,[163] fatal error for incompatible method signatures[164]),

error for incompatible method signatures[164]), locale-independent float to string conversion,[165] variable syntax tweaks,[166] attributes,[167][168][169][170] named arguments,[171] match expression,[172] constructor property promotion,[173] union

constructor property promotion,[173] union types,[174] mixed type,[175] static return type,[176] nullsafe operator,[84] non-capturing catches,[177] throw expression,[83] JSON extension is always available.[178]

Old version, yet still maintained:  8.1
25 November 2021[179]
31 December 2025

Explicit octal integer literal notation,[180] enumerations,[181] read-only properties,[182] first-class callable syntax,[183] new in initializers,[184] pure intersection types,[185] never return type,[186] final class constraints,[187] fibers[188]

Old version, yet still maintained: 8.2
8 December 2022[189]
31 December 2026

8 December 2022[189]
31 December 2026
Readonly classes,[190] null, false, and true as stand-alone types,[191][192] locale-independent case conversion,[193] disjunctive normal form types,[194] constants in traits[195]
Current stable version:  8.3

Current stable version:  8.3
23 November 2023[196]
31 December 2027

Typed class constants,[197] dynamic class constant fetch,[198] #[\Override] attribute,[199] deep-cloning of read-only properties,[200] new json_validate function,[201] randomizer additions,[202] the command-line linter supports multiple files

Future release:  8.4
21 November 2024[203]
31 December 2028
Legend:Old version, not maintainedOld version, still maintainedLatest versionLatest preview versionFuture release

Beginning on 28 June 2011, the PHP Development Team implemented a timeline for the release of new versions of PHP.[58] Under this system, at least one release should occur every month. Once per year, a minor release should occur which may include

a minor release should occur which may include new features. Every minor release should at least be supported for two years with security and bug fixes, followed by at least one year of only security fixes, for a total of a three-year release

fixes, for a total of a three-year release process for every minor release. No new features, unless small and self-contained, are to be introduced into a minor release during the three-year release process.

Mascot[edit]
The elePHPant, PHP mascot

The mascot of the PHP project is the elePHPant, a blue elephant with the PHP logo on its side, designed by Vincent Pontier[204] in 1998.[205] "The (PHP) letters were forming the shape of an elephant if viewed in a sideways angle."[206] The elePHPant

viewed in a sideways angle."[206] The elePHPant is sometimes differently coloured when in plush toy form.[207]

Many variations of this mascot have been made over the years. Only the elePHPants based on the original design by Vincent Pontier are considered official by the community.[208] These are collectable and some of them are extremely rare.[209]

Syntax[edit]
Main article: PHP syntax and semantics
A "Hello, World" application in PHP 7.4 running on its built-in development server
The following "Hello, World!" program is written in PHP code embedded in an HTML document:
<!DOCTYPE html>
<html>

<!DOCTYPE html>
<html>
<head>
<title>PHP "Hello, World!" program</title>
</head>
<body>
<p><?= 'Hello, World!' ?></p>
</body>
</html>

</body>
</html>
However, as no requirement exists for PHP code to be embedded in HTML, the simplest version of Hello, World! may be written like this, with the closing tag ?> omitted as preferred in files containing pure PHP code.[210]

<?php echo 'Hello, World!';

The PHP interpreter only executes PHP code within its delimiters. Anything outside of its delimiters is not processed by PHP, although the non-PHP text is still subject to control structures described in PHP code. The most common delimiters are

in PHP code. The most common delimiters are <?php to open and ?> to close PHP sections. The shortened form <? also exists. This short delimiter makes script files less portable since support for them can be disabled in the local PHP configuration

can be disabled in the local PHP configuration and it is therefore discouraged.[211][212] Conversely, there is no recommendation against the echo short tag <?=.[213] Prior to PHP 5.4.0, this short syntax for echo only works with the short_open_tag

for echo only works with the short_open_tag configuration setting enabled, while for PHP 5.4.0 and later it is always available.[214][215][211] The purpose of all these delimiters is to separate PHP code from non-PHP content, such as JavaScript code

from non-PHP content, such as JavaScript code or HTML markup.[216] So the shortest "Hello, World!" program written in PHP is:

<?='Hello, World!';

The first form of delimiters, <?php and ?>, in XHTML and other XML documents, creates correctly formed XML processing instructions.[217] This means that the resulting mixture of PHP code and other markups in the server-side file is itself

other markups in the server-side file is itself well-formed XML.

Variables are prefixed with a dollar symbol, and a type does not need to be specified in advance. PHP 5 introduced type declarations that allow functions to force their parameters to be objects of a specific class, arrays, interfaces or callback

a specific class, arrays, interfaces or callback functions. However, before PHP 7, type declarations could not be used with scalar types such as integers or strings.[72]

Below is an example of how PHP variables are declared and initialized.
<?php
$name = 'John';  // variable of string type being declared and initialized
$age = 18;       // variable of integer type being declared and initialized

$height = 5.3;   // variable of double type being declared and initialized
echo $name . ' is ' . $height . "m tall\n"; // concatenating variables and strings
echo "$name is $age years old."; // interpolating variables to string
?>

Unlike function and class names, variable names are case-sensitive. Both double-quoted ("") and heredoc strings provide the ability to interpolate a variable's value into the string.[218] PHP treats newlines as whitespace in the manner of a

treats newlines as whitespace in the manner of a free-form language, and statements are terminated by a semicolon.[219] PHP has three types of comment syntax: /* */ marks block and inline comments; // or # are used for one-line comments.[220] The

// or # are used for one-line comments.[220] The echo statement is one of several facilities PHP provides to output text.[citation needed]

In terms of keywords and language syntax, PHP is similar to C-style syntax. if conditions, for and while loops and function returns are similar in syntax to languages such as C, C++, C#, Java and Perl.[citation needed]
Data types[edit]

PHP is loosely typed. It stores integers in a platform-dependent range, either as a 32, 64 or 128-bit signed integer equivalent to the C-language long type. Unsigned integers are converted to signed values in certain situations, which is different

values in certain situations, which is different behaviour to many other programming languages.[221] Integer variables can be assigned using decimal (positive and negative), octal, hexadecimal, and binary notations.[citation needed]

Floating-point numbers are also stored in a platform-specific range. They can be specified using floating-point notation, or two forms of scientific notation.[222] PHP has a native Boolean type that is similar to the native Boolean types in Java and

similar to the native Boolean types in Java and C++. Using the Boolean type conversion rules, non-zero values are interpreted as true and zero as false, as in Perl and C++.[222]

The null data type represents a variable that has no value; NULL is the only allowed value for this data type.[222]

Variables of the "resource" type represent references to resources from external sources. These are typically created by functions from a particular extension, and can only be processed by functions from the same extension; examples include file,

from the same extension; examples include file, image, and database resources.[222]

Arrays can contain elements of any type that PHP can handle, including resources, objects, and even other arrays. Order is preserved in lists of values and in hashes with both keys and values, and the two can be intermingled.[222] PHP also supports

two can be intermingled.[222] PHP also supports strings, which can be used with single quotes, double quotes, nowdoc or heredoc syntax.[223]

The Standard PHP Library (SPL) attempts to solve standard problems and implements efficient data access interfaces and classes.[224]
Functions[edit]

PHP defines a large array of functions in the core language and many are also available in various extensions; these functions are well documented online PHP documentation.[225] However, the built-in library has a wide variety of naming conventions

library has a wide variety of naming conventions and associated inconsistencies, as described under history above.

Custom functions may be defined by the developer:
function myAge(int $birthYear): string
{
// calculate the age by subtracting the birth year from the current year.
$yearsOld = date('Y') - $birthYear;
// return the age in a descriptive string.

// return the age in a descriptive string.
return $yearsOld . ($yearsOld == 1 ? ' year' : ' years');
}
echo 'I am currently ' . myAge(1995) . ' old.';
As of 2024, the output of the above sample program is "I am currently 29 years old."

In lieu of function pointers, functions in PHP can be referenced by a string containing their name. In this manner, normal PHP functions can be used, for example, as callbacks or within function tables.[226] User-defined functions may be created at

User-defined functions may be created at any time without being prototyped.[225][226] Functions may be defined inside code blocks, permitting a run-time decision as to whether or not a function should be defined. There is a function_exists function

be defined. There is a function_exists function that determines whether a function with a given name has already been defined. Function calls must use parentheses, with the exception of zero-argument class constructor functions called with the PHP

class constructor functions called with the PHP operator new, in which case parentheses are optional.[citation needed]

Since PHP 4.0.1 create_function(), a thin wrapper around eval(), allowed normal PHP functions to be created during program execution; it was deprecated in PHP 7.2 and removed in PHP 8.0[227] in favor of syntax for anonymous functions or

in favor of syntax for anonymous functions or "closures"[228] that can capture variables from the surrounding scope, which was added in PHP 5.3. Shorthand arrow syntax was added in PHP 7.4:[229]

function getAdder($x) {
return fn($y) => $x + $y;
}
$adder = getAdder(8);
echo $adder(2);  // prints "10"

In the example above, getAdder() function creates a closure using passed argument $x, which takes an additional argument $y, and returns the created closure to the caller. Such a function is a first-class object, meaning that it can be stored in a

object, meaning that it can be stored in a variable, passed as a parameter to other functions, etc.[230]

Unusually for a dynamically typed language, PHP supports type declarations on function parameters, which are enforced at runtime. This has been supported for classes and interfaces since PHP 5.0, for arrays since PHP 5.1, for "callables" since

for arrays since PHP 5.1, for "callables" since PHP 5.4, and scalar (integer, float, string and boolean) types since PHP 7.0.[72] PHP 7.0 also has type declarations for function return types, expressed by placing the type name after the list of

by placing the type name after the list of parameters, preceded by a colon.[71] For example, the getAdder function from the earlier example could be annotated with types like so in PHP 7:

function getAdder(int $x): Closure
{
return fn(int $y): int => $x + $y;
}
$adder = getAdder(8);
echo $adder(2); // prints "10"
echo $adder(null); // throws an exception because an incorrect type was passed

$adder = getAdder([]); // would also throw an exception

By default, scalar type declarations follow weak typing principles. So, for example, if a parameter's type is int, PHP would allow not only integers, but also convertible numeric strings, floats or Booleans to be passed to that function, and would

Booleans to be passed to that function, and would convert them.[72] However, PHP 7 has a "strict typing" mode which, when used, disallows such conversions for function calls and returns within a file.[72]

PHP objects[edit]

Basic object-oriented programming functionality was added in PHP 3 and improved in PHP 4.[12] This allowed for PHP to gain further abstraction, making creative tasks easier for programmers using the language. Object handling was completely rewritten

Object handling was completely rewritten for PHP 5, expanding the feature set and enhancing performance.[231] In previous versions of PHP, objects were handled like value types.[231] The drawback of this method was that code had to make heavy use of

method was that code had to make heavy use of PHP's "reference" variables if it wanted to modify an object it was passed rather than creating a copy of it. In the new approach, objects are referenced by handle, and not by value.[citation needed]

PHP 5 introduced private and protected member variables and methods, along with abstract classes, final classes, abstract methods, and final methods. It also introduced a standard way of declaring constructors and destructors, similar to that of

constructors and destructors, similar to that of other object-oriented languages such as C++, and a standard exception handling model. Furthermore, PHP 5 added interfaces and allowed for multiple interfaces to be implemented. There are special

interfaces to be implemented. There are special interfaces that allow objects to interact with the runtime system. Objects implementing ArrayAccess can be used with array syntax and objects implementing Iterator or IteratorAggregate can be used with

Iterator or IteratorAggregate can be used with the foreach language construct. There is no virtual table feature in the engine, so static variables are bound with a name instead of a reference at compile time.[232]

If the developer creates a copy of an object using the reserved word clone, the Zend engine will check whether a __clone() method has been defined. If not, it will call a default __clone() which will copy the object's properties. If a __clone()

will copy the object's properties. If a __clone() method is defined, then it will be responsible for setting the necessary properties in the created object. For convenience, the engine will supply a function that imports the properties of the source

that imports the properties of the source object, so the programmer can start with a by-value replica of the source object and only override properties that need to be changed.[233]

The visibility of PHP properties and methods is defined using the keywords public, private, and protected. The default is public, if only var is used; var is a synonym for public. Items declared public can be accessed everywhere. protected limits

can be accessed everywhere. protected limits access to inherited classes (and to the class that defines the item). private limits visibility only to the class that defines the item.[234] Objects of the same type have access to each other's private

the same type have access to each other's private and protected members even though they are not the same instance.[citation needed]

Example[edit]
The following is a basic example of object-oriented programming in PHP 8:
<?php
abstract class User
{
protected string $name;
public function __construct(string $name)
{
// make first letter uppercase and the rest lowercase

$this->name = ucfirst(strtolower($name));
}
public function greet(): string
{
return "Hello, my name is " . $this->name;
}
abstract public function job(): string;
}
class Student extends User
{

}
class Student extends User
{
public function __construct(string $name, private string $course)
{
parent::__construct($name);
}
public function job(): string
{
return "I learn " . $this->course;
}
}
class Teacher extends User
{

}
}
class Teacher extends User
{
public function __construct(string $name, private array $teachingCourses)
{
parent::__construct($name);
}
public function job(): string
{
return "I teach " . implode(", ", $this->teachingCourses);
}
}
$students = [

}
}
$students = [
new Student("Alice", "Computer Science"),
new Student("Bob", "Computer Science"),
new Student("Charlie", "Business Studies"),
];
$teachers = [
new Teacher("Dan", ["Computer Science", "Information Security"]),

new Teacher("Erin", ["Computer Science", "3D Graphics Programming"]),
new Teacher("Frankie", ["Online Marketing", "Business Studies", "E-commerce"]),
];
foreach ([$students, $teachers] as $users) {
echo $users[0]::class . "s:\n";

echo $users[0]::class . "s:\n";
array_walk($users, function (User $user) {
echo "{$user->greet()}, {$user->job()}\n";
});
}
This program outputs the following:
Students:
Hello, my name is Alice, I learn Computer Science

Hello, my name is Alice, I learn Computer Science
Hello, my name is Bob, I learn Computer Science
Hello, my name is Charlie, I learn Business Studies
Teachers:
Hello, my name is Dan, I teach Computer Science, Information Security

Hello, my name is Erin, I teach Computer Science, 3D Graphics Programming
Hello, my name is Frankie, I teach Online Marketing, Business Studies, E-commerce
Implementations[edit]

The only complete PHP implementation is the original, known simply as PHP. It is the most widely used and is powered by the Zend Engine. To disambiguate it from other implementations, it is sometimes unofficially called "Zend PHP". The Zend Engine

unofficially called "Zend PHP". The Zend Engine compiles PHP source code on-the-fly into an internal format that it can execute, thus it works as an interpreter.[235][236] It is also the "reference implementation" of PHP, as PHP has no formal

implementation" of PHP, as PHP has no formal specification, and so the semantics of Zend PHP define the semantics of PHP. Due to the complex and nuanced semantics of PHP, defined by how Zend works, it is difficult for competing implementations to

it is difficult for competing implementations to offer complete compatibility.[citation needed]

PHP's single-request-per-script-execution model, and the fact that the Zend Engine is an interpreter, leads to inefficiency; as a result, various products have been developed to help improve PHP performance. In order to speed up execution time and

In order to speed up execution time and not have to compile the PHP source code every time the web page is accessed, PHP scripts can also be deployed in the PHP engine's internal format by using an opcode cache, which works by caching the compiled

opcode cache, which works by caching the compiled form of a PHP script (opcodes) in shared memory to avoid the overhead of parsing and compiling the code every time the script runs. An opcode cache, Zend Opcache, is built into PHP since version

Zend Opcache, is built into PHP since version 5.5.[237] Another example of a widely used opcode cache is the Alternative PHP Cache (APC), which is available as a PECL extension.[238]

While Zend PHP is still the most popular implementation, several other implementations have been developed. Some of these are compilers or support JIT compilation, and hence offer performance benefits over Zend PHP at the expense of lacking full PHP

over Zend PHP at the expense of lacking full PHP compatibility.[citation needed] Alternative implementations include the following:

HHVM (HipHop Virtual Machine) – developed at Facebook and available as open source, it converts PHP code into a high-level bytecode (commonly known as an intermediate language), which is then translated into x86-64 machine code dynamically at

into x86-64 machine code dynamically at runtime by a just-in-time (JIT) compiler, resulting in up to 6× performance improvements.[239] However, since version 7.2 Zend has outperformed HHVM,[240] and HHVM 3.24 is the last version to officially

and HHVM 3.24 is the last version to officially support PHP.[241]

HipHop – developed at Facebook and available as open source, it transforms the PHP scripts into C++ code and then compiles the resulting code, reducing the server load up to 50%. In early 2013, Facebook deprecated it in favour of HHVM due to

Facebook deprecated it in favour of HHVM due to multiple reasons, including deployment difficulties and lack of support for the whole PHP language, including the create_function() and eval() constructs.[242]

Parrot – a virtual machine designed to run dynamic languages efficiently; the cross-translator Pipp transforms the PHP source code into the Parrot intermediate representation, which is then translated into the Parrot's bytecode and executed by the

into the Parrot's bytecode and executed by the virtual machine.

PeachPie – a second-generation compiler to .NET Common Intermediate Language (CIL) bytecode, built on the Roslyn platform; successor of Phalanger, sharing several architectural components

Phalanger – compiles PHP into .Net Common Intermediate Language bytecode; predecessor of PeachPie
Quercus – compiles PHP into Java bytecode
Licensing[edit]
Main article: PHP License

Licensing[edit]
Main article: PHP License
PHP is free software released under the PHP License, which stipulates that:[243]

Products derived from this software may not be called "PHP", nor may "PHP" appear in their name, without prior written permission from group@php.net. You may indicate that your software works in conjunction with PHP by saying "Foo for PHP" instead

with PHP by saying "Foo for PHP" instead of calling it "PHP Foo" or "phpfoo".

This restriction on the use of "PHP" makes the PHP License incompatible with the GNU General Public License (GPL), while the Zend License is incompatible due to an advertising clause similar to that of the original BSD license.[244]

Development and community[edit]

PHP includes various free and open-source libraries in its source distribution or uses them in resulting PHP binary builds. PHP is fundamentally an Internet-aware system with built-in modules for accessing File Transfer Protocol (FTP) servers and

File Transfer Protocol (FTP) servers and many database servers, including PostgreSQL, MySQL, Microsoft SQL Server and SQLite (which is an embedded database), LDAP servers, and others. Numerous functions are familiar to C programmers, such as those

are familiar to C programmers, such as those in the stdio family, are available in standard PHP builds.[245]

PHP allows developers to write extensions in C to add functionality to the PHP language. PHP extensions can be compiled statically into PHP or loaded dynamically at runtime. Numerous extensions have been written to add support for the Windows API,

been written to add support for the Windows API, process management on Unix-like operating systems, multibyte strings (Unicode), cURL, and several popular compression formats. Other PHP features made available through extensions include integration

available through extensions include integration with Internet Relay Chat (IRC), dynamic generation of images and Adobe Flash content, PHP Data Objects (PDO) as an abstraction layer used for accessing databases,[246][247][248][249][250][251][252]

databases,[246][247][248][249][250][251][252] and even speech synthesis. Some of the language's core functions, such as those dealing with strings and arrays, are also implemented as extensions.[253] The PHP Extension Community Library (PECL)

The PHP Extension Community Library (PECL) project is a repository for extensions to the PHP language.[254]

Some other projects, such as Zephir, provide the ability for PHP extensions to be created in a high-level language and compiled into native PHP extensions. Such an approach, instead of writing PHP extensions directly in C, simplifies the development

directly in C, simplifies the development of extensions and reduces the time required for programming and testing.[255]

By December 2018 the PHP Group consisted of ten people: Thies C. Arntzen, Stig Bakken, Shane Caraveo, Andi Gutmans, Rasmus Lerdorf, Sam Ruby, Sascha Schumann, Zeev Suraski, Jim Winstead, and Andrei Zmievski.[256]

Zend Technologies provides a PHP Certification based on PHP 7[257] exam (and previously based on PHP 5.5) for programmers to become certified PHP developers.
The PHP Foundation[edit]

The PHP Foundation[edit]
PHPFormationNovember 22, 2021; 2 years ago (2021-11-22)FounderAutomattic, Laravel, Acquia, Zend, Private Packagist, Symfony, Craft CMS, Tideways, PrestaShop, JetBrains[258]Websitehttps://thephp.foundation

On 26 November 2021, the JetBrains blog announced the creation of The PHP Foundation, which will sponsor the design and development of PHP.[259]
Year
Commits
Reviews
RFCs
2022[260]
683
283
8
2023[261]
784
702
17

RFCs
2022[260]
683
283
8
2023[261]
784
702
17
The foundation hires "Core Developers" to work on the PHP language's core repository. Roman Pronskiy, a member of the foundation's board, said that they aim to pay "market salaries" to developers.[262]

The response to the foundation has mostly been positive, with the foundation being praised for better supporting the language and helping to stop the decrease in the language's popularity.[263][264] However, it has also been criticised for adding

However, it has also been criticised for adding breaking changes to minor versions of PHP, such as in PHP 8.2 where initialising members of a class out-with the original class scope would cause depreciation errors,[265] these changes impacted a

errors,[265] these changes impacted a number of open source projects including WordPress.

[266]
Germany's Sovereign Tech Fund provided more than 200,000 Euros to support the PHP Foundation.[267]
Installation and configuration[edit]
Example output of the phpinfo() function in PHP 7.1

There are two primary ways for adding support for PHP to a web server – as a native web server module, or as a CGI executable. PHP has a direct module interface called server application programming interface (SAPI), which is supported by many web

interface (SAPI), which is supported by many web servers including Apache HTTP Server, Microsoft IIS and iPlanet Web Server. Some other web servers, such as OmniHTTPd, support the Internet Server Application Programming Interface (ISAPI), which is

Programming Interface (ISAPI), which is Microsoft's web server module interface. If PHP has no module support for a web server, it can always be used as a Common Gateway Interface (CGI) or FastCGI processor; in that case, the web server is

processor; in that case, the web server is configured to use PHP's CGI executable to process all requests to PHP files.[268]

PHP-FPM (FastCGI Process Manager) is an alternative FastCGI implementation for PHP, bundled with the official PHP distribution since version 5.3.3.[269] When compared to the older FastCGI implementation, it contains some additional features, mostly

it contains some additional features, mostly useful for heavily loaded web servers.[270]

When using PHP for command-line scripting, a PHP command-line interface (CLI) executable is needed. PHP supports a CLI server application programming interface (SAPI) since PHP 4.3.0.[271] The main focus of this SAPI is developing shell applications

of this SAPI is developing shell applications using PHP. There are quite a few differences between the CLI SAPI and other SAPIs, although they do share many of the same behaviours.[272]

PHP has a direct module interface called SAPI for different web servers;[273] in case of PHP 5 and Apache 2.0 on Windows, it is provided in form of a DLL file called php5apache2.dll,[274] which is a module that, among other functions, provides an

a module that, among other functions, provides an interface between PHP and the web server, implemented in a form that the server understands. This form is what is known as a SAPI.[citation needed]

There are different kinds of SAPIs for various web server extensions. For example, in addition to those listed above, other SAPIs for the PHP language include the Common Gateway Interface and command-line interface.[273][275]

PHP can also be used for writing desktop graphical user interface (GUI) applications, by using the PHP-GTK extension. PHP-GTK is not included in the official PHP distribution,[268] and as an extension, it can be used only with PHP versions 5.1.0 and

it can be used only with PHP versions 5.1.0 and newer. The most common way of installing PHP-GTK is by compiling it from the source code.[276]

When PHP is installed and used in cloud environments, software development kits (SDKs) are provided for using cloud-specific features.[citation needed] For example:
Amazon Web Services provides the AWS SDK for PHP[277]

Microsoft Azure can be used with the Windows Azure SDK for PHP.[278]

Numerous configuration options are supported, affecting both core PHP features and extensions.[279][280] Configuration file php.ini is searched for in different locations, depending on the way PHP is used.[281] The configuration file is split into

used.[281] The configuration file is split into various sections,[282] while some of the configuration options can be also set within the web server configuration.[283]

Use[edit]
A broad overview of the LAMP software bundle, displayed here together with Squid

PHP is a general-purpose scripting language that is especially suited to server-side web development, in which case PHP generally runs on a web server. Any PHP code in a requested file is executed by the PHP runtime, usually to create dynamic web

by the PHP runtime, usually to create dynamic web page content or dynamic images used on websites or elsewhere.[284] It can also be used for command-line scripting and client-side graphical user interface (GUI) applications. PHP can be deployed on

(GUI) applications. PHP can be deployed on most web servers, many operating systems and platforms, and can be used with many relational database management systems (RDBMS). Most web hosting providers support PHP for use by their clients. It is

support PHP for use by their clients. It is available free of charge, and the PHP Group provides the complete source code for users to build, customize and extend for their own use.[18]

Dynamic web page: example of server-side scripting (PHP and MySQL)

Originally designed to create dynamic web pages, PHP now focuses mainly on server-side scripting,[285] and it is similar to other server-side scripting languages that provide dynamic content from a web server to a client, such as Python, Microsoft's

server to a client, such as Python, Microsoft's ASP.NET, Sun Microsystems' JavaServer Pages,[286] and mod_perl. PHP has also attracted the development of many software frameworks that provide building blocks and a design structure to promote rapid

blocks and a design structure to promote rapid application development (RAD).[citation needed] Some of these include PRADO, CakePHP, Symfony, CodeIgniter, Laravel, Yii Framework, Phalcon and Laminas, offering features similar to other web

Laminas, offering features similar to other web frameworks.

The LAMP architecture has become popular in the web industry as a way of deploying web applications.[287] PHP is commonly used as the P in this bundle alongside Linux, Apache and MySQL, although the P may also refer to Python, Perl, or some mix of

P may also refer to Python, Perl, or some mix of the three. Similar packages, WAMP and MAMP, are also available for Windows and macOS, with the first letter standing for the respective operating system. Although both PHP and Apache are provided as

Although both PHP and Apache are provided as part of the macOS base install, users of these packages seek a simpler installation mechanism that can be more easily kept up to date.[citation needed]

For specific and more advanced usage scenarios, PHP offers a well-defined and documented way for writing custom extensions in C or C++.[288][289][290][291][292][293][294][non-primary source needed] Besides extending the language itself in form of

Besides extending the language itself in form of additional libraries, extensions are providing a way for improving execution speed where it is critical and there is room for improvements by using a true compiled language.[295][296] PHP also offers

true compiled language.[295][296] PHP also offers well-defined ways for embedding itself into other software projects. That way PHP can be easily used as an internal scripting language for another project, also providing tight interfacing with the

also providing tight interfacing with the project's specific internal data structures.[297]

PHP received mixed reviews due to lacking support for multithreading at the core language level,[298] though using threads is made possible by the "pthreads" PECL extension.[299][300]

A command line interface, php-cli, and two ActiveX Windows Script Host scripting engines for PHP have been produced.[citation needed]
Popularity and usage statistics[edit]

Popularity and usage statistics[edit]
PHP is used for Web content management systems including MediaWiki,[301] WordPress,[302] Joomla,[303] Drupal,[304] Moodle,[305] eZ Publish, eZ Platform, and SilverStripe.[306]

As of January 2013[update], PHP was used in more than 240 million websites (39% of those sampled) and was installed on 2.1 million web servers.[307]

As of 23 September 2024[update] (ten months after PHP 8.3's release), PHP is used as the server-side programming language on 75.8% of websites where the language could be determined; PHP 7 is the most used version of the language with 51% of

the most used version of the language with 51% of websites using PHP being on that version, while 35.3% use PHP 8, 13.5% use PHP 5 and 0.1% use PHP 4.[20]

PHP 835.3%PHP 751%PHP 513.5%PHP 40.1%
Usage share of PHP versions on 23 September 2024: ten months after PHP 8.3's release[20][308][309][310][311]

PHP 8.3: 7.70% of PHP 8 (2.72%)  PHP 8.2: 22.6% of PHP 8 (7.98%)  PHP 8.1: 42.0% of PHP 8 (14.83%)  PHP 8.0: 27.7% of PHP 8 (9.78%)  PHP 7.4: 71.7% of PHP 7 (36.57%)  PHP 7.3: 11.9% of PHP 7 (6.07%)  PHP 7.2: 8.80% of PHP 7 (4.49%)  PHP 7.1: 3.80%

7.2: 8.80% of PHP 7 (4.49%)  PHP 7.1: 3.80% of PHP 7 (1.94%)  PHP 7.0: 3.90% of PHP 7 (1.99%)  PHP 5.6: 54.2% of PHP 5 (7.3170%)  PHP 5.5: 8.20% of PHP 5 (1.1070%)  PHP 5.4: 15.5% of PHP 5 (2.0925%)  PHP 5.3: 14.7% of PHP 5 (1.9845%)  PHP 5.2: 6.80%

5.3: 14.7% of PHP 5 (1.9845%)  PHP 5.2: 6.80% of PHP 5 (0.9180%)  PHP 5.1: 0.40% of PHP 5 (0.0540%)  PHP 5.0: 0.10% of PHP 5 (0.0135%)  PHP 4.4: 76.4% of PHP 4 (0.0764%)  PHP 4.3: 19.0% of PHP 4 (0.0190%)  PHP 4.2: 3.30% of PHP 4 (0.0033%)  PHP 4.1:

4.2: 3.30% of PHP 4 (0.0033%)  PHP 4.1: 0.90% of PHP 4 (0.0009%)  PHP 4.0: 0.40% of PHP 4 (0.0004%)

Security[edit]

In 2019, 11% of all vulnerabilities listed by the National Vulnerability Database were linked to PHP;[312] historically, about 30% of all vulnerabilities listed since 1996 in this database are linked to PHP. Technical security flaws of the language

to PHP. Technical security flaws of the language itself or of its core libraries are not frequent (22 in 2009, about 1% of the total although PHP applies to about 20% of programs listed).[313] Recognizing that programmers make mistakes, some

Recognizing that programmers make mistakes, some languages include taint checking to automatically detect the lack of input validation which induces many issues. Such a feature has been proposed for PHP in the past, but either been rejected or the

PHP in the past, but either been rejected or the proposal abandoned.[314][315][316]

Third-party projects such as Suhosin[317] and Snuffleupagus [318] aim to remove or change dangerous parts of the language.

Historically, old versions of PHP had some configuration parameters and default values for such runtime settings that made some PHP applications prone to security issues. Among these, magic_quotes_gpc and register_globals[319] configuration

and register_globals[319] configuration directives were the best known; the latter made any URL parameters become PHP variables, opening a path for serious security vulnerabilities by allowing an attacker to set the value of any uninitialized global

to set the value of any uninitialized global variable and interfere with the execution of a PHP script. Support for "magic quotes" and "register globals" settings has been deprecated since PHP 5.3.0, and removed from PHP 5.4.0.[320]

Another example for the potential runtime-settings vulnerability comes from failing to disable PHP execution (for example by using the engine configuration directive)[321] for the directory where uploaded files are stored; enabling it can result in

files are stored; enabling it can result in the execution of malicious code embedded within the uploaded files.[322][323][324] The best practice is to either locate the image directory outside of the document root available to the web server and

the document root available to the web server and serve it via an intermediary script or disable PHP execution for the directory which stores the uploaded files.[citation needed]

Also, enabling the dynamic loading of PHP extensions (via enable_dl configuration directive)[325] in a shared web hosting environment can lead to security issues.[326][327]

Implied type conversions that result in different values being treated as equal, sometimes against the programmer's intent, can lead to security issues. For example, the result of the comparison '0e1234' == '0' is true, because strings that are

'0e1234' == '0' is true, because strings that are parsable as numbers are converted to numbers; in this case, the first compared value is treated as scientific notation having the value (0×101234), which is zero. Errors like this resulted in

which is zero. Errors like this resulted in authentication vulnerabilities in Simple Machines Forum,[328] Typo3[329] and phpBB[330] when MD5 password hashes were compared. The recommended way is to use hash_equals() (for timing attack safety),

to use hash_equals() (for timing attack safety), strcmp or the identity operator (===), as '0e1234' === '0' results in false.[citation needed]

In a 2013 analysis of over 170,000 website defacements, published by Zone-H, the most frequently (53%) used technique was the exploitation of file inclusion vulnerability, mostly related to insecure usage of the PHP language constructs include,

usage of the PHP language constructs include, require, and allow_url_fopen.[331][332]

Cryptographic Security[edit]

PHP includes rand()[333] and mt_rand()[334]functions which use a pseudorandom number generator, and are not cryptographically secure. As of version 8.1, the random_int() function is included, which uses a cryptographically secure source of

which uses a cryptographically secure source of randomness provided by the system.[335]

There are two attacks that can be performed over PHP entropy sources: "seed attack" and "state recovery attack".[citation needed] As of 2012, a $250 GPU can perform up to 230 MD5 calculations per second, while a $750 GPU can perform four times as

while a $750 GPU can perform four times as many calculations at the same time.[336] In combination with a "birthday attack" this can lead to serious security vulnerabilities.[citation needed]

Long Term Support[edit]

The PHP development team provides official bug fixes for 2 years following release of each minor version, followed by another 2 years where only security fixes are released.[337] After this, the release is considered end of life and no longer

release is considered end of life and no longer officially supported.

Extended Long Term Support beyond this is available from commercial providers, such as Zend and others[338][339]
See also[edit]
Computer programming portalFree and open-source software portal
Comparison of programming languages

Comparison of programming languages
List of Apache–MySQL–PHP packages
List of PHP accelerators
List of PHP editors
PEAR (PHP Extension and Application Repository)
PHP accelerator
Template processor

PHP accelerator
Template processor
XAMPP (free and open-source cross-platform web server solution stack package)
Zend Server
References[edit]

Zend Server
References[edit]
^ a b Lerdorf, Rasmus (June 8, 1995). "Announce: Personal Home Page Tools (PHP Tools)". Retrieved 7 June 2011.

^ a b Lerdorf, Rasmus (2007-04-26). "PHP on Hormones – history of PHP presentation by Rasmus Lerdorf given at the MySQL Conference in Santa Clara, California". The Conversations Network. Archived from the original on 2019-01-06. Retrieved

from the original on 2019-01-06. Retrieved 2009-12-11.

^ "PHP: News Archive - 2024". www.php.net.
^ "PHP: News Archive - 2024". www.php.net.
^ "PHP: Function arguments – Manual". secure.php.net.
^ "PHP: Release Archives (museum)". museum.php.net.
^ "PHP: Preface – Manual".

^ "PHP: Preface – Manual".
^ Stogov, Dmitry [@dstogov] (2015-12-04). "It's not a secret that some #PHP7 optimization ideas came from HHVM, LuaJIT and V8. Thank you @HipHopVM @SaraMG. #php7thankyou" (Tweet) – via Twitter.

^ "PHP: Hypertext Preprocessor". www.php.net. Retrieved 2020-02-12.
^ a b Krill, Paul (2013-11-18). "Believe the hype: PHP founder backs Facebook's HipHop technology". InfoWorld. Retrieved 2022-10-13.

^ "Announce: Personal Home Page Tools (PHP Tools)". groups.google.com. Retrieved 2022-11-03.
^ a b c d e f g h i "History of PHP and related projects". The PHP Group. Retrieved 2008-02-25.
^ a b "History of PHP". php.net.

^ a b "History of PHP". php.net.
^ Olsson, Mikael (2013-09-04). PHP Quick Scripting Reference. Apress. ISBN 978-1-4302-6284-8.
^ PHP Manual: Preface, www.php.net.
^ "Introduction: What can PHP do?". PHP Manual. Retrieved 2009-03-05.

^ helicopter: Port of node-ar-drone which allows user to control a Parrot AR Drone over PHP: jolicode/php-ar-drone, JoliCode, 2019-01-11, retrieved 2019-02-23

^ a b "Embedding PHP in HTML". O'Reilly. 2001-05-03. Archived from the original on 2008-02-19. Retrieved 2008-02-25.
^ "PHP: Unsupported Branches". www.php.net.

^ "PHP: Unsupported Branches". www.php.net.
^ a b c "Usage statistics of PHP for websites". W3Techs – World Wide Web Technology Surveys. W3Techs. Retrieved 23 September 2024.

^ Lerdorf, Rasmus (2012-07-20). "I wonder why people keep writing that PHP was ever written in Perl. It never was. #php". Twitter. Retrieved 2014-09-04.

^ Lerdorf, Rasmus (2007-04-26). "PHP on Hormones". The Conversations Network. Archived from the original (mp3) on 2019-01-06. Retrieved 2009-06-22.

^ Lerdorf, Rasmus (2007). "Slide 3". slides for 'PHP on Hormones' talk. The PHP Group. Retrieved 2009-06-22.

^ Lerdorf, Rasmus (1995-06-08). "Announce: Personal Home Page Tools (PHP Tools)". Newsgroup: comp.infosystems.www.authoring.cgi. Retrieved 2006-09-17.

^ "Rasmus Lerdorf, Senior Technical Yahoo: PHP, Behind the Mic". 2003-11-19. Archived from the original on 2013-07-28.

^ Alshetwi, A.B.; Rahmat, R. A. A. O.; Borhan, M. N.; Ismael, S.; Ali, A.; Irtema, H. I. M.; Alfakhria, A. Y. (2018). "Web-Based Expert System for Optimizing of Traffic Road in Developing Countries". Retrieved 13 Feb 2024.

^ "Problems with PHP". Retrieved 20 December 2010.
^ "php.internals: Re: Function name consistency". news.php.net. 2013-12-28. Retrieved 2014-02-09.

^ Rasmus Lerdorf (Dec 16, 2013). "Re: Flexible function naming". Newsgroup: php.internals. Retrieved December 26, 2013.
^ "PHP –  Acronym Meaning Vote". PHP.net. Archived from the original on August 15, 2000.

^ "Zend Engine version 2.0: Feature Overview and Design". Zend Technologies Ltd. Archived from the original on 2006-07-19. Retrieved 2006-09-17.
^ "php.net 2007 news archive". The PHP Group. 2007-07-13. Retrieved 2008-02-22.

^ Kerner, Sean Michael (2008-02-01). "PHP 4 is Dead—Long Live PHP 5". InternetNews. Archived from the original on 2018-08-06. Retrieved 2018-12-16.

^ Trachtenberg, Adam (2004-07-15). "Why PHP 5 Rocks!". O'Reilly. Archived from the original on 2016-03-31. Retrieved 2008-02-22.
^ "Late Static Binding in PHP". Digital Sandwich. 2006-02-23. Retrieved 2008-03-25.

^ "Static Keyword". The PHP Group. Retrieved 2008-03-25.
^ "GoPHP5". Archived from the original on 2011-07-17.

^ "PHP projects join forces to Go PHP 5" (PDF). GoPHP5 Press Release. Archived from the original (PDF) on 2019-08-04. Retrieved 2008-02-23.
^ "GoPHP5". GoPHP5. Archived from the original on 2011-04-27. Retrieved 2008-02-22.

^ "PHP Installation and Configuration". php.net. Retrieved 2013-10-29.
^ "PHP for Windows: Binaries and sources releases (5.3)". php.net. Retrieved 2013-10-29.
^ "PHP for Windows: Binaries and sources releases (5.4)". php.net. Retrieved 2013-10-29.

^ "PHP for Windows: Binaries and sources releases (5.5)". php.net. Retrieved 2013-10-29.
^ "PHP: Supported Versions".
^ "Types: Strings (PHP Manual)". PHP.net. Retrieved 2013-09-22.

^ "Details of the String Type (PHP Manual)". PHP.net. Retrieved 2021-09-22.
^ Andrei Zmievski (2005-08-10). "PHP Unicode support design document" (Mailing list). Retrieved 2014-02-09.
^ "PHP 5.5 or 6.0". Retrieved 2014-02-09.

^ "PHP 5.5 or 6.0". Retrieved 2014-02-09.
^ Andrei Zmievski (2011-04-22). "The Good, the Bad, and the Ugly: What Happened to Unicode and PHP 6". Retrieved 2014-02-09.
^ Rasmus Lerdorf (2010-03-11). "PHP 6" (Mailing list). Retrieved 2014-02-07.

^ "The Neverending Muppet Debate of PHP 6 v PHP 7". Archived from the original on 2015-11-19. Retrieved 2015-11-19.
^ "RFC: Name of Next Release of PHP". php.net. 2014-07-07. Retrieved 2014-07-15.

^ "Re: [PHP-DEV] [VOTE] [RFC] Name of Next Release of PHP (again)". 2014-07-30. Retrieved 2014-07-30.
^ "phpng: Refactored PHP Engine with Big Performance Improvement". news.php.net.
^ "PHP: rfc:phpng". php.net. Retrieved 16 December 2014.

^ a b "PHP: phpng". php.net. Retrieved 2014-07-15.
^ "Merge branch 'ZendEngine3'". github.com. 2014-12-05. Retrieved 2014-12-05.
^ a b c "PHP: Release Process". 2011-06-20. Retrieved 2013-10-06.

^ a b "PHP RFC: Exceptions in the engine (for PHP 7)". php.net. Retrieved 2015-05-21.
^ a b "PHP RFC: Uniform Variable Syntax". php.net. 2014-05-31. Retrieved 2014-07-30.
^ "Online PHP editor | output for udRhX". 3v4l.org.

^ "PHP RFC: Fix "foreach" behavior". php.net. Retrieved 2015-05-21.
^ "PHP RFC: Constructor behaviour of internal classes". php.net. Retrieved 2015-05-21.

^ "PHP RFC: Removal of dead or not yet PHP7 ported SAPIs and extensions". php.net. Retrieved 2015-05-21.
^ "PHP RFC: Fix list() behavior inconsistency". php.net. Retrieved 2015-05-21.

^ "PHP RFC: Remove alternative PHP tags". php.net. Retrieved 2015-05-21.
^ "PHP RFC: Make defining multiple default cases in a switch a syntax error". php.net. Retrieved 2015-05-21.

^ "PHP RFC: Remove hex support in numeric strings". php.net. Retrieved 2015-05-21.

^ a b "PHP RFC: Integer Semantics". php.net. Retrieved 2015-05-21. Making NaN and Infinity always become zero when cast to integer means more cross-platform consistency, and is also less surprising than what is currently produces

^ "PHP RFC: ZPP Failure on Overflow". php.net. Retrieved 2015-05-21.
^ a b c "RFC: Return Types". php.net. 2015-01-27. Retrieved 2015-01-28.
^ a b c d e f "RFC: Scalar Type Declarations". php.net. 2015-03-16. Retrieved 2015-03-17.

^ a b c d e f g h i j k l Brent. "What's new in PHP 8". Stitcher. Retrieved 22 September 2020.
^ a b "PHP 8 Released". PHP. Retrieved 27 November 2020.
^ a b "PHP: rfc:jit". wiki.php.net. Retrieved 2019-04-05.

^ Brent. "PHP 8: JIT performance in real-life web applications". Stitcher.io. Retrieved 4 October 2020.
^ Rethams, Derick. "PHP 8: A Quick Look at JIT".

^ Rethams, Derick. "PHP 8: A Quick Look at JIT".
^ a b Popov, Nikita (13 July 2020). ""What's new in PHP 8.0?" Nikita Popov". PHP fwdays. Archived from the original on 2021-12-11. Retrieved 4 October 2020.

^ Daniele, Carlo (25 May 2020). "What's New in PHP 8 (Features, Improvements, and the JIT Compiler)". Kinsta. Retrieved 24 December 2020.
^ Redmond, Paul (15 July 2020). "Match Expression is Coming to PHP 8". Laravel News. Retrieved 4 October 2020.

^ "PHP 8.0: Match Expressions". PHP Watch. Retrieved 4 October 2020.
^ Barnes, Eric (27 November 2020). "PHP 8 is now Released!". Laravel News. Retrieved 24 December 2020.
^ a b "PHP RFC: throw expression". wiki.php.net. Retrieved 14 August 2020.

^ a b "PHP RFC: Nullsafe operator". wiki.php.net. Retrieved 14 August 2020.
^ Roose, Brent. "PHP 8: Constructor property promotion". Retrieved 30 April 2024.
^ a b "PHP: rfc:weakrefs". wiki.php.net. Retrieved 2019-04-05.

^ Merchant, Amit (13 June 2020). "These new string functions are coming in PHP 8". Amit Merchant. Retrieved 4 October 2020.

^ Popov, Nikita. "Call for participation: Annotating internal function argument and return types". Externals. Retrieved 19 November 2020.
^ "PHP 8 ChangeLog". PHP.net. Retrieved 2024-01-05.

^ "PHP: PHP 8.1.0 Release Announcement". PHP.net. Retrieved 2024-01-05.
^ "PHP 8 ChangeLog". PHP.net. Retrieved 2024-01-05.
^ "PHP: PHP 8.2.0 Release Announcement". PHP.net. Retrieved 2024-01-05.

^ a b c d e f g h i j k l "Unsupported Branches". php.net. Retrieved 2019-07-31.
^ "PHP 4.0.0 Released". Retrieved 25 October 2020.
^ a b c d "PHP: PHP 4 ChangeLog". The PHP Group. 2008-01-03. Retrieved 2008-02-22.

^ "PHP 4.1.0 Release Announcement". Retrieved 25 October 2020.
^ "PHP 4.2.0 Release Announcement". Retrieved 25 October 2020.
^ "PHP 4.3.0 Release Announcement". Retrieved 25 October 2020.

^ "Using PHP from the command line". PHP Manual. The PHP Group. Retrieved 2009-09-11.
^ "PHP 4.4.0 Release Announcement". Retrieved 25 October 2020.
^ "PHP 4.4.0 Release Announcement". PHP Mannual. The PHP Group. Retrieved 2013-11-24.

^ "PHP 5.0.0 Released!". Retrieved 25 October 2020.
^ a b c "PHP: PHP 5 ChangeLog". The PHP Group. 2007-11-08. Retrieved 2008-02-22.
^ "PHP 5.1.0 Release Announcement". Retrieved 25 October 2020.

^ "PHP manual: PDO". The PHP Group. 2011-11-15. Retrieved 2011-11-15.
^ "PHP 5.2.0 Release Announcement". Retrieved 25 October 2020.
^ "PHP 5.3.0 Release Announcement". Retrieved 25 October 2020.

^ "PHP 5.4.0 Release Announcement". Retrieved 25 October 2020.
^ "Built-in web server". Retrieved March 26, 2012.
^ "PHP 5.5.0 Release Announcement". Retrieved 25 October 2020.
^ a b c d "Supported Versions". php.net. Retrieved 2017-12-13.

^ "PHP 5.5.0 changes". php.net. Retrieved 2015-03-03.
^ "PHP 5.6.0 Release Announcement". Retrieved 25 October 2020.
^ "Migrating from PHP 5.5.x to PHP 5.6.x". php.net. Retrieved 2014-03-24.

^ "Resetting PHP 6". There have been books on the shelves purporting to cover PHP 6 since at least 2008. But, in March 2010, the PHP 6 release is not out –  in fact, it is not even close to out. Recent events suggest that PHP 6 will not be released

events suggest that PHP 6 will not be released before 2011 –  if, indeed, it is released at all.

^ "PHP 7 moves full speed ahead". 2014-10-31. Recent versions of PHP have been part of the 5.x release series, but there will be no PHP 6. "We're going to skip [version] 6, because years ago, we had plans for a 6, but those plans were very different

for a 6, but those plans were very different from what we're doing now," Gutmans said. Going right to version 7 avoids confusion.

^ "News Archive – 2018: PHP 7.2.9 Released". php.net. 2018-08-16. Retrieved 2018-08-16.
^ "PHP: rfc:size_t_and_int64_next". php.net. Retrieved 16 December 2014.
^ "PHP: rfc:abstract_syntax_tree". php.net. Retrieved 16 December 2014.

^ "PHP: rfc:closure_apply". php.net. Retrieved 16 December 2014.
^ "PHP: rfc:integer_semantics". php.net. Retrieved 16 December 2014.
^ "PHP: rfc:isset_ternary". php.net. Retrieved 16 December 2014.

^ "RFC: Unicode Codepoint Escape Syntax". 2014-11-24. Retrieved 2014-12-19.
^ "Combined Comparison (Spaceship) Operator". php.net. Retrieved 2015-05-21.
^ "PHP RFC: Generator Delegation". php.net. Retrieved 2015-05-21.

^ "PHP RFC: Anonymous Classes". php.net. Retrieved 2015-05-21.
^ "PHP RFC: Easy User-land CSPRNG". php.net. Retrieved 2015-05-21.
^ "PHP RFC: Group Use Declarations". php.net. Retrieved 2015-05-21.

^ "PHP: rfc:iterable". php.net. 2016-06-10. Retrieved 2023-06-30.
^ "PHP: rfc:nullable_types". php.net. 2014-04-10. Retrieved 2023-06-30.
^ "PHP: rfc:void_return_type". php.net. 2015-11-09. Retrieved 2015-11-14.

^ "PHP: rfc:class_constant_visibility". php.net. 2015-10-27. Retrieved 2015-12-08.
^ "PHP: rfc:short_list_syntax". php.net. 2016-04-07. Retrieved 2023-06-30.
^ "PHP: rfc:multiple-catch". php.net. 2016-03-06. Retrieved 2023-06-30.

^ "PHP: rfc:object-typehint". wiki.php.net.
^ "PHP: rfc:libsodium". wiki.php.net.
^ "PHP: rfc:allow-abstract-function-override". wiki.php.net.
^ "PHP: rfc:parameter-no-type-variance". wiki.php.net.
^ "PHP: todo:php73". wiki.php.net.

^ "PHP: todo:php73". wiki.php.net.
^ "PHP: rfc:flexible_heredoc_nowdoc_syntaxes". wiki.php.net.
^ "PHP: rfc:list_reference_assignment". wiki.php.net.
^ "PHP: rfc:pcre2-migration". wiki.php.net.
^ "PHP: hrtime –  Manual". php.net.

^ "PHP: hrtime –  Manual". php.net.
^ "PHP 7.4.0 Released!". php.net. Retrieved 2019-11-28.
^ "PHP: rfc:typed_properties_v2". wiki.php.net. Retrieved 2019-04-04.
^ "PHP: rfc:preload". wiki.php.net. Retrieved 2019-04-04.

^ "PHP: rfc:null_coalesce_equal_operator". wiki.php.net. Retrieved 2019-04-04.
^ "PHP: rfc:improve-openssl-random-pseudo-bytes". wiki.php.net. Retrieved 2019-04-04.
^ "PHP: rfc:ffi". wiki.php.net. Retrieved 2019-04-05.

^ "PHP: rfc:permanent_hash_ext". wiki.php.net. Retrieved 2019-04-05.
^ "PHP: rfc:password_registry". wiki.php.net. Retrieved 2019-04-05.
^ "PHP: rfc:mb_str_split". wiki.php.net. Retrieved 2019-04-05.

^ "PHP: rfc:reference_reflection". wiki.php.net. Retrieved 2019-04-05.
^ "PHP: rfc:deprecate-and-remove-ext-wddx". wiki.php.net. Retrieved 2019-04-05.
^ "PHP: rfc:custom_object_serialization". wiki.php.net. Retrieved 2019-04-05.

^ "PHP: Supported Versions". php.net. Retrieved 2023-11-26.
^ "PHP: rfc:negative_array_index". wiki.php.net. Retrieved 2019-04-05.
^ "PHP RFC: Validation for abstract trait methods". wiki.php.net. Retrieved 14 August 2020.

^ "PHP RFC: Saner string to number comparisons". wiki.php.net. Retrieved 14 August 2020.
^ "PHP RFC: Saner numeric strings". wiki.php.net. Retrieved 14 August 2020.

^ "PHP RFC: Stricter type checks for arithmetic/bitwise operators". wiki.php.net. Retrieved 14 August 2020.
^ "PHP RFC: Reclassifying engine warnings". wiki.php.net. Retrieved 14 August 2020.

^ "PHP: rfc:consistent_type_errors". wiki.php.net. Retrieved 2019-04-05.
^ "PHP: rfc:lsp_errors". wiki.php.net. Retrieved 2019-05-26.
^ "PHP RFC: Locale-independent float to string cast". wiki.php.net. Retrieved 14 August 2020.

^ "PHP RFC: Variable Syntax Tweaks". wiki.php.net. Retrieved 14 August 2020.
^ "PHP RFC: Attributes V2". wiki.php.net. Retrieved 14 August 2020.
^ "PHP RFC: Attribute Amendments". wiki.php.net. Retrieved 14 August 2020.

^ "PHP RFC: Shorter Attribute Syntax". wiki.php.net. Retrieved 2020-06-20.
^ "PHP RFC: Shorter Attribute Syntax Change". wiki.php.net. Retrieved 14 August 2020.
^ "PHP RFC: Named Arguments". wiki.php.net. Retrieved 14 August 2020.

^ "PHP RFC: Match expression v2". wiki.php.net. Retrieved 14 August 2020.
^ "PHP RFC: Constructor Property Promotion". wiki.php.net. Retrieved 14 August 2020.
^ "PHP RFC: Union Types 2.0". wiki.php.net. Retrieved 14 August 2020.

^ "PHP RFC: Mixed Type v2". wiki.php.net. Retrieved 14 August 2020.
^ "PHP RFC: Static return type". wiki.php.net. Retrieved 14 August 2020.
^ "PHP RFC: non-capturing catches". wiki.php.net. Retrieved 14 August 2020.

^ Andre, Tyson. "PHP RFC: Always available JSON extension". PHP. Retrieved 25 October 2020.
^ "PHP: todo:php81". wiki.php.net. Retrieved 2022-06-16.
^ "PHP RFC: Explicit octal integer literal notation". wiki.php.net. Retrieved 2020-11-25.

^ "PHP RFC: Enumerations". wiki.php.net. Retrieved 2021-03-25.
^ "PHP: rfc:readonly_properties_v2". wiki.php.net. Retrieved 2021-11-26.
^ "PHP: rfc:first_class_callable_syntax". wiki.php.net. Retrieved 2021-11-26.

^ "PHP: rfc:new_in_initializers". wiki.php.net. Retrieved 2021-11-26.
^ "PHP: rfc:pure-intersection-types". wiki.php.net. Retrieved 2021-11-26.
^ "PHP: rfc:noreturn_type". wiki.php.net. Retrieved 2021-11-26.

^ "PHP: rfc:final_class_const". wiki.php.net. Retrieved 2021-11-26.
^ "PHP: rfc:fibers". wiki.php.net. Retrieved 2021-11-26.
^ "PHP: todo:php82". wiki.php.net. Retrieved 2022-06-16.
^ "PHP: rfc:readonly_classes". wiki.php.net. Retrieved 2022-06-16.

^ "PHP: rfc:null-false-standalone-types". wiki.php.net. Retrieved 2022-06-16.
^ "PHP: rfc:true-type". wiki.php.net. Retrieved 2022-06-16.
^ "PHP: rfc:strtolower-ascii". wiki.php.net. Retrieved 2022-06-16.

^ "PHP: rfc:dnf_types". wiki.php.net. Retrieved 2023-02-07.
^ "PHP: rfc:constants_in_traits". wiki.php.net. Retrieved 2023-02-07.
^ "PHP 8.3.0 Released!". php.net. 23 November 2023. Retrieved 24 November 2023.

^ "PHP: rfc:typed_class_constants". wiki.php.net. Retrieved 2023-12-17.
^ "PHP: rfc:dynamic_class_constant_fetch". wiki.php.net. Retrieved 2023-12-17.
^ "PHP: rfc:marking_overriden_methods". wiki.php.net. Retrieved 2023-12-17.

^ "PHP: rfc:readonly_amendments". wiki.php.net. Retrieved 2023-12-17.
^ "PHP: rfc:json_validate". wiki.php.net. Retrieved 2023-12-17.
^ "PHP: rfc:randomizer_additions". wiki.php.net. Retrieved 2023-12-17.

^ "PHP: todo: php84". php.net. 26 March 2024. Retrieved 26 March 2024.
^ "PHP: ElePHPant". 4 Oct 2014. Retrieved 4 Oct 2014.
^ "Redirecting…". wwphp-fb.github.io.

^ "Redirecting…". wwphp-fb.github.io.
^ "The PHP Mascot's Birth - Creator Of The elePHPant Vincent Pontier Reveals The True Story!". 7php.com. 2014-01-06.
^ "ElePHPant". PHP.earth. Retrieved 2024-02-13.
^ "PHP: ElePHPant". www.php.net.

^ "PHP: ElePHPant". www.php.net.
^ "A Field Guide to Elephpants". afieldguidetoelephpants.net.
^ "tags –  Manual". php.net. Retrieved 2014-02-17.
^ a b "PHP: rfc:shortags". php.net. 2008-04-03. Retrieved 2014-05-08.

^ "PHP: Basic syntax". The PHP Group. Retrieved 2008-02-22.
^ "Basic Coding Standard". PHP Framework Interoperability Group. Retrieved 2016-01-03.
^ "echo –  Manual". php.net. Retrieved 2014-02-17.

^ "Description of core php.ini directives –  Manual". php.net. 2002-03-17. Retrieved 2014-02-17.
^ "Your first PHP-enabled page". The PHP Group. Retrieved 2008-02-25.

^ Bray, Tim; et al. (26 November 2008). "Processing Instructions". Extensible Markup Language (XML) 1.0 (Fifth Edition). W3C. Retrieved 2009-06-18.
^ "Variables". The PHP Group. Retrieved 2008-03-16.

^ "Instruction separation". The PHP Group. Retrieved 2008-03-16.
^ "Comments". The PHP Group. Retrieved 2008-03-16.
^ "Integers in PHP, running with scissors, and portability". MySQL Performance Blog. March 27, 2007. Retrieved 2007-03-28.

^ a b c d e "Types". The PHP Group. Retrieved 2008-03-16.
^ "Strings". The PHP Group. Retrieved 2008-03-21.
^ "SPL – StandardPHPLibrary". PHP.net. March 16, 2009. Retrieved 2009-03-16.

^ a b "User-defined functions (PHP manual)". php.net. 2014-07-04. Retrieved 2014-07-07.
^ a b "Variable functions (PHP manual)". php.net. 2014-07-04. Retrieved 2014-07-07.

^ "create_function() (PHP manual)". php.net. 2022-04-06. Retrieved 2022-05-04.
^ "Anonymous functions (PHP manual)". php.net. 2014-07-04. Retrieved 2014-07-07.
^ "Arrow Functions (PHP manual)". php.net. Retrieved 2021-01-25.

^ Christian Seiler; Dmitry Stogov (2008-07-01). "Request for Comments: Lambda functions and closures". php.net. Retrieved 2014-07-07.
^ a b "PHP 5 Object References". mjtsai.com. Retrieved 2008-03-16.

^ "Classes and Objects (PHP 5)". The PHP Group. Retrieved 2008-03-16.
^ "Object cloning". The PHP Group. Retrieved 2008-03-16.

^ "Visibility (PHP Manual)". theserverpages.com. 2005-05-19. Archived from the original on 2010-09-24. Retrieved 2010-08-26.
^ "How do computer languages work?". Archived from the original on 2011-07-16. Retrieved 2009-11-04.

^ Gilmore, W. Jason (2006-01-23). Beginning PHP and MySQL 5: From Novice to Professional. Apress. p. 43. ISBN 1590595521.
^ "[VOTE] Integrating Zend Optimizer+ into the PHP distribution". news.php.net. Retrieved 2013-03-08.

^ "Alternative PHP Cache". PHP.net. Archived from the original on 2013-11-15. Retrieved 2013-09-21.
^ "We are the 98.5% (and the 16%) « HipHop Virtual Machine". hhvm.com. December 2013. Retrieved 2014-02-23.

^ "The Definitive PHP 5.6, 7.0, 7.1, 7.2 & 7.3 Benchmarks (2019)". 2019-01-14. Retrieved 2019-04-19.
^ Krill, Paul (2017-09-20). "Forget PHP! Facebook's HHVM engine switches to Hack instead". InfoWorld. Retrieved 2019-02-06.

^ "Announcement on GitHub removing HPHPc support". GitHub. Retrieved 2013-05-24.
^ "The PHP License, version 3.01". Retrieved 2010-05-20.

^ "GPL-Incompatible, Free Software Licenses". Various Licenses and Comments about Them. Free Software Foundation. Retrieved 2011-01-03.
^ "PHP: Function and Method listing –  Manual". The PHP Group. Retrieved 2015-01-14.

^ "Introduction –  Manual". php.net. 2013-06-07. Retrieved 2013-06-13.

^ Darryl Patterson (5 August 2004). "Simplify Business Logic with PHP DataObjects — O'Reilly Media". ibm.com. Archived from the original on 16 December 2014. Retrieved 16 December 2014.
^ "IBM — United States". Retrieved 16 December 2014.

^ "Five common PHP database problems". ibm.com. 2006-08-01. Retrieved 2013-06-13.
^ "IBM Redbooks — Developing PHP Applications for IBM Data Servers". redbooks.ibm.com. Retrieved 16 December 2014.

^ "php[architect] Magazine - The Journal for PHP Programmers". www.phparch.com.
^ Krill, Paul (19 October 2005). "PHP catching on at enterprises, vying with Java". InfoWorld. Archived from the original on 13 July 2014.

^ "Cross Reference: /PHP_5_4/ext/standard/". php.net. Archived from the original on 16 March 2012. Retrieved 16 December 2014.

^ "Developing Custom PHP Extensions". devnewz.com. 2002-09-09. Archived from the original on 2008-02-18. Retrieved 2008-02-25.
^ "Why Zephir?". zephir-lang.com. 2015-10-20. Retrieved 2015-12-14.
^ "PHP Credits". Retrieved 2018-12-16.

^ "PHP Credits". Retrieved 2018-12-16.
^ "Learn PHP Via PHP Training and PHP Certification". www.zend.com. Retrieved 2020-11-16.
^ Walker, James (2021-12-13). "What the New PHP Foundation Means for PHP's Future". How-To Geek. Retrieved 2023-11-26.

^ "The New Life of PHP – The PHP Foundation | The PhpStorm Blog". The JetBrains Blog. 22 November 2021. Retrieved 2022-06-16.
^ "The PHP Foundation: Impact and Transparency Report 2022". thephp.foundation. Retrieved 2023-11-27.

^ Pronskiy, Roman (2024-02-26). "The PHP Foundation: Impact and Transparency Report 2023". The PHP Foundation. Retrieved 2024-04-01.
^ Anderson, Tim. "PHP Foundation formed to fund core developers". www.theregister.com. Retrieved 2023-12-05.

^ "Programming languages: This old favourite is gaining popularity again". ZDNET. Retrieved 2023-12-05.
^ "PHP 8.1 Released With Enums, Read-Only Properties and Fibers". www.i-programmer.info. Retrieved 2023-12-05.

^ "It's time for the PHP Foundation to #StopBreakingPHP". trongate.io. Retrieved 2023-11-27.
^ "WordPress 6.4 PHP Compatibility". Make WordPress Hosting. 2023-11-16. Retrieved 2023-11-27.
^ "PHP". Sovereign Tech Fund. Retrieved 2024-05-26.

^ a b "General Installation Considerations". php.net. Retrieved 2013-09-22.
^ "News Archive: PHP 5.3.3 Released!". php.net. 2010-07-22.
^ "FastCGI Process Manager (FPM)". php.net. Retrieved 2013-09-22.

^ "Command line usage: Introduction". php.net. Retrieved 2013-09-22.
^ "Command line usage: Differences to other SAPIs". php.net. Retrieved 2013-09-22.
^ a b "General Installation Considerations". php.net. Retrieved 2013-09-22.

^ "PHP: Apache 2.x on Microsoft Windows". php.net. Archived from the original on 2013-09-26. Retrieved 2013-09-22.
^ "Command line usage: Introduction". php.net. Retrieved 2013-09-22.

^ "Installing PHP-GTK 2". php.net. Archived from the original on 2013-12-12. Retrieved 2013-09-22.
^ "AWS SDK for PHP". aws.amazon.com. Retrieved 2014-03-06.

^ "Windows Azure SDK for PHP — Interoperability Bridges and Labs Center". interoperabilitybridges.com. Archived from the original on 2014-03-20. Retrieved 2014-03-06.
^ "Runtime configuration: Table of contents". php.net. Retrieved 2013-09-22.

^ "php.ini directives: List of php.ini directives". php.net. Retrieved 2013-09-22.
^ "Runtime configuration: The configuration file". PHP.net. Retrieved 2013-09-22.
^ "php.ini directives: List of php.ini sections". PHP.net. Retrieved 2013-09-22.

^ "Runtime configuration: Where a configuration setting may be set". PHP.net. Retrieved 2013-09-22.
^ "PHP Manual Image Processing and GD;". php.net. Retrieved 2011-04-09.

^ "PHP Server-Side Scripting Language". Indiana University. 2007-04-04. Archived from the original on 2016-01-21. Retrieved 2008-02-25.

^ "JavaServer Pages Technology — JavaServer Pages Comparing Methods for Server-Side Dynamic Content White Paper". Sun Microsystems. Retrieved 2008-02-25.
^ "Five simple ways to tune your LAMP application". IBM. 2011-01-25.

^ "PHP at the core: Extension structure". PHP.net. Archived from the original on 2013-09-26. Retrieved 2013-09-22.

^ "PHP at the core: The "counter" Extension – A Continuing Example". PHP.net. Archived from the original on 2013-09-26. Retrieved 2013-09-22.

^ "Extension Writing Part I: Introduction to PHP and Zend". Zend Technologies. 2005-03-01. Archived from the original on 2013-09-24. Retrieved 2013-09-22.

^ "Extension Writing Part II: Parameters, Arrays, and ZVALs". Zend Technologies. 2005-06-06. Archived from the original on 2013-09-26. Retrieved 2013-09-22.

^ "Extension Writing Part II: Parameters, Arrays, and ZVALs (continued)". Zend Technologies. 2005-06-06. Archived from the original on 2013-09-26. Retrieved 2013-09-22.

^ "Extension Writing Part III: Resources". Zend Technologies. 2006-05-12. Archived from the original on 2013-09-26. Retrieved 2013-09-22.

^ "Wrapping C++ Classes in a PHP Extension". Zend Technologies. 2009-04-22. Archived from the original on 2013-09-20. Retrieved 2013-09-22.
^ "Extending PHP with C++?". Stack Overflow. Retrieved 2013-09-22.

^ "How can I use C++ code to interact with PHP?". Stack Overflow. Retrieved 2013-09-22.
^ Golemon, Sara (2006). Extending and Embedding PHP. Sams. ISBN 978-0-672-32704-9.
^ "Request #46919: Multithreading". PHP.net. Retrieved 2013-09-22.

^ "pthreads: Introduction (PHP Manual)". PHP.net. Retrieved 2013-09-22.
^ "PECL :: Package :: pthreads". pecl.php.net. Retrieved 2014-02-09.

^ "Manual:Installation requirements#PHP". MediaWiki. 2010-01-25. Retrieved 2010-02-26. PHP is the programming language in which MediaWiki is written [...]
^ "About WordPress". Retrieved 2010-02-26. WordPress was [...] built on PHP

^ Kempkens, Alex. "Joomla! — Content Management System to build websites & apps".
^ "PHP and Drupal". Drupal.org. 16 September 2007. Archived from the original on 2010-02-08. Retrieved 2010-06-13.

^ "About". Moodle.org. Archived from the original on 2010-01-11. Retrieved 2009-12-20.
^ "Server requirements of SilverStripe". Archived from the original on 28 November 2014. Retrieved 13 October 2014. SilverStripe requires PHP 5.3.2+

^ Ide, Andy (2013-01-31). "PHP just grows & grows". Retrieved 2013-04-01.
^ "Usage Statistics and Market Share of PHP Version 4 for Websites, September 2024". w3techs.com.

^ "Usage Statistics and Market Share of PHP Version 5 for Websites, September 2024". w3techs.com.
^ "Usage Statistics and Market Share of PHP Version 7 for Websites, September 2024". w3techs.com.

^ "Usage Statistics and Market Share of PHP Version 8 for Websites, September 2024". w3techs.com.
^ "National Vulnerability Database (NVD) Search Vulnerabilities Statistics". Retrieved 2019-11-22.

^ "PHP-related vulnerabilities on the National Vulnerability Database". 2012-07-05. Archived from the original on 2009-06-28. Retrieved 2013-04-01.
^ "Developer Meeting Notes, Nov. 2005".

^ "Developer Meeting Notes, Nov. 2005".
^ "Taint mode decision, November 2007". Archived from the original on 2009-02-26.
^ "PHP: rfc:taint". wiki.php.net.

^ "PHP: rfc:taint". wiki.php.net.
^ "Hardened-PHP Project". 2008-08-15. Archived from the original on 2019-02-24. Retrieved 2019-08-22.
^ "Snuffleupagus Documentation".

^ "Snuffleupagus Documentation".
^ "Security: Using Register Globals". PHP Manual. PHP.net. Archived from the original on 2013-09-27. Retrieved 2013-09-22.

^ "Magic Quotes". PHP Manual. PHP.net. Archived from the original on 2014-02-08. Retrieved 2014-01-17.
^ "'engine' configuration directive". PHP: Runtime Configuration. PHP.net. Retrieved 2014-02-13.

^ "PHP Security Exploit With GIF Images". 2007-06-22. Archived from the original on 2013-09-27. Retrieved 2013-09-22.
^ "PHP security exploit with GIF images". PHP Classes blog. 2007-06-20. Retrieved 2013-09-22.

^ "Passing Malicious PHP Through getimagesize()". 2007-06-04. Archived from the original on 2013-09-21. Retrieved 2013-09-22.
^ "'enable_dl' configuration directive". PHP: Runtime Configuration. PHP.net. Retrieved 2014-02-13.

^ "PHP function reference: dl()". PHP.net. Retrieved 2013-09-22.
^ "My host won't fix their Trojan". WebHosting Talk. Retrieved 2013-09-22.

^ Raz0r (25 January 2013). "Simple Machines Forum <= 2.0.3 Admin Password Reset".{{cite web}}:  CS1 maint: numeric names: authors list (link)
^ Nibble Security. "TYPO3-SA-2010-020, TYPO3-SA-2010-022 EXPLAINED".

^ "Криптостойкость и небезопасное сравнение". ahack.ru (in Russian). Archived from the original on 4 July 2017.{{cite web}}:  CS1 maint: unfit URL (link)

^ Krawczyk, Pawel (2013). "Most common attacks on web applications". IPSec.pl. Archived from the original on 2015-04-15. Retrieved 2015-04-15.

^ Krawczyk, Pawel (2013). "So what are the "most critical" application flaws? On new OWASP Top 10". IPSec.pl. Retrieved 2015-04-15.
^ "PHP: Rand - Manual".
^ "PHP: Mt_rand - Manual".
^ "PHP: Random_int - Manual".

^ "PHP: Random_int - Manual".
^ Argyros, George; Kiayias, Aggelos (10 August 2012). "I Forgot Your Password: Randomness Attacks Against PHP Applications". usenix.org. USENIX. Retrieved 19 April 2024.
^ "PHP: RFC:release_cycle_update".

^ "PHP: RFC:release_cycle_update".
^ "PHP Support for PHP 7.2 - 8.0 | PHP LTS | Zend by Perforce". Retrieved 2024-05-23.
^ "Pagely PHP Long Term Support Page". Pagely. Retrieved 2024-09-14.
Further reading[edit]
Listen to this article (35 minutes)

Listen to this article (35 minutes)
This audio file was created from a revision of this article dated 23 November 2011 (2011-11-23), and does not reflect subsequent edits.(Audio help · More spoken articles)

Ford, Paul (June 11, 2015). "What is Code?". Bloomberg Businessweek. What's the Absolute Minimum I Must Know About PHP?
External links[edit]
Official website
PHP at Curlie
Links to related articles
vtePHPPeople
Andi Gutmans
Rasmus Lerdorf

vtePHPPeople
Andi Gutmans
Rasmus Lerdorf
Zeev Suraski
Resources
Accelerator (List)
Composer
Editors
Libraries
PEAR
Implementations
HHVM
HPHPc
Parrot
PeachPie
Phalanger
Quercus
Zend Engine
Web frameworks
CakePHP
CodeIgniter
Drupal
eZ Publish
Fat-Free

CakePHP
CodeIgniter
Drupal
eZ Publish
Fat-Free
Flow
FuelPHP
Grav
Gyroscope
Horde
Joomla!
Laminas
Laravel
li₃
Midgard
MODX
Nette
Phalcon
PHP-Fusion
PHP-Nuke
Pop PHP
PRADO
ProcessWire
Qcodo
Silverstripe
Symfony
TYPO3
WordPress
XOOPS
Yii
Testing
Behat

Symfony
TYPO3
WordPress
XOOPS
Yii
Testing
Behat
PHPUnit
ORMs
Doctrine
IDEs
Aptana
Codelobster
Eclipse PDT
NetBeans
PHPEdit
PhpStorm
Zend Studio
Widget toolkit
PHP-GTK
wxPHP
Category
Commons
vteWeb interfacesServer-sideProtocols
HTTP
v2
v3
Encryption

HTTP
v2
v3
Encryption
WebDAV
CGI
SCGI
FCGI
AJP
WSRP
WebSocket
Server APIs
C NSAPI
C ASAPI
C ISAPI
COM ASP
Jakarta Servlet
container
CLI OWIN
ASP.NET Handler
Python WSGI
Python ASGI
Ruby Rack
JavaScript JSGI
Perl PSGI
Portlet
container
Apache modules

Perl PSGI
Portlet
container
Apache modules
mod_include
mod_jk
mod_lisp
mod_mono
mod_parrot
mod_perl
mod_php
mod_proxy
mod_python
mod_wsgi
mod_ruby
Phusion Passenger
Topics
Web service vs. Web resource
WOA vs. ROA
Open API
Webhook
Application server

WOA vs. ROA
Open API
Webhook
Application server
comparison
Scripting
Client-sideBrowser APIs
C NPAPI
LiveConnect
XPConnect
C NPRuntime
C PPAPI
NaCl
ActiveX
BHO
XBAP
Web APIsWHATWG
Audio
Canvas
CORS
DOM
SSE
Video
WebSockets
Web messaging
Web storage

SSE
Video
WebSockets
Web messaging
Web storage
Web worker
XMLHttpRequest
W3C
DOM events
EME
File
Geolocation
IndexedDB
MSE
SVG
WebAssembly
WebAuthn
WebGPU
WebRTC
WebXR
Khronos
WebCL
WebGL
Others
Gears
GraphQL
Web SQL Database (formerly W3C)
WebUSB

GraphQL
Web SQL Database (formerly W3C)
WebUSB
Topics
Ajax and Remote scripting vs. DHTML
Browser extension
Mashup
Web IDL
Scripting
Topics
Microservices
Web page
Static
Dynamic
Web standards
REST
Web API security
Web application
Rich
Single-page

Web API security
Web application
Rich
Single-page
Progressive
Web framework
vteProgramming languages
Comparison
Timeline
History
Ada
ALGOL
Simula
APL
Assembly
BASIC
Visual Basic
classic
.NET
C
C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java

C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Julia
Kotlin
Lisp
Lua
MATLAB
ML
Pascal
Object Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Scratch
Shell
Smalltalk
Swift
more...
Lists: Alphabetical
Categorical
Generational

Lists: Alphabetical
Categorical
Generational
Non-English-based
Category
vteFree and open-source softwareGeneral
Alternative terms for free software
Comparison of open-source and closed-source software
Comparison of source-code-hosting facilities

Comparison of source-code-hosting facilities
Free software
Free software project directories
Gratis versus libre
Long-term support
Open-source software
Open-source software development
Outline
Timeline
Softwarepackages
Audio
Bioinformatics
Codecs

Softwarepackages
Audio
Bioinformatics
Codecs
Configuration management
Drivers
Graphics
Wireless
Health
Mathematics
Office suites
Operating systems
Routing
Television
Video games
Web applications
E-commerce
Android apps
iOS apps
Commercial

E-commerce
Android apps
iOS apps
Commercial
Formerly proprietary
Formerly open-source
Community
Free software movement
History
Open-source-software movement
Events
Advocacy
Organisations
Free Software Movement of India
Free Software Foundation

Free Software Foundation
Licenses
AFL
Apache
APSL
Artistic
Beerware
BSD
Creative Commons
CDDL
EPL
Free Software Foundation
GNU GPL
GNU AGPL
GNU LGPL
ISC
MIT
MPL
Python
Python Software Foundation License
Shared Source Initiative
Sleepycat
Unlicense

Shared Source Initiative
Sleepycat
Unlicense
WTFPL
zlib
Types and standards
Comparison of licenses
Contributor License Agreement
Copyleft
Debian Free Software Guidelines
Definition of Free Cultural Works
Free license
The Free Software Definition

Free license
The Free Software Definition
The Open Source Definition
Open-source license
Permissive software license
Public domain
Challenges
Digital rights management
License proliferation
Mozilla software rebranding
Proprietary device drivers

Proprietary device drivers
Proprietary firmware
Proprietary software
SCO/Linux controversies
Software patents
Software security
Tivoization
Trusted Computing
Related topics
Forking
GNU Manifesto
Microsoft Open Specification Promise
Open-core model

Open-core model
Open-source hardware
Shared Source Initiative
Source-available software
The Cathedral and the Bazaar
Revolution OS
Portal
Category

Revolution OS
Portal
Category
PHP at Wikipedia's sister projects:Media from CommonsTextbooks from WikibooksResources from WikiversityDocumentation from MediaWiki

Authority control databases NationalGermanyUnited StatesFranceBnF dataCzech RepublicSpainIsraelOtherELMCIP
Retrieved from "https://en.wikipedia.org/w/index.php?title=PHP&oldid=1250521453"

Categories: PHP1995 softwareClass-based programming languagesCross-platform softwareDynamic programming languagesDynamically typed programming languagesFilename extensionsFree compilers and interpretersHigh-level programming languagesInternet

programming languagesInternet terminologyObject-oriented programming languagesPHP softwareProcedural programming languagesProgramming languagesProgramming languages created in 1995Scripting languagesSoftware using the PHP licenseText-oriented

using the PHP licenseText-oriented programming languagesHidden categories: CS1 maint: numeric names: authors listCS1 maint: unfit URLCS1 Russian-language sources (ru)Articles with short descriptionShort description is different from WikidataArticles

description is different from WikidataArticles containing potentially dated statements from May 2024All articles containing potentially dated statementsAll articles with unsourced statementsArticles with unsourced statements from November

with unsourced statements from November 2023Articles with unsourced statements from April 2024All pages needing factual verificationWikipedia articles needing factual verification from November 2023Articles containing potentially dated statements

containing potentially dated statements from January 2013Articles containing potentially dated statements from September 2024Articles with hAudio microformatsSpoken articlesArticles with Curlie linksPages using Sister project links with wikidata

using Sister project links with wikidata namespace mismatchPages using Sister project links with hidden wikidataArticles with example PHP code

This page was last edited on 10 October 2024, at 22:47 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License;

additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policy
About Wikipedia
Disclaimers

Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view

